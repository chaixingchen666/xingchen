package com.flyang.main;

import java.io.IOException;
import java.sql.Types;
// import java.io.BufferedWriter;
// import java.io.File;
// import java.io.FileOutputStream;
// import java.io.FileWriter;
// import java.io.OutputStreamWriter;
// import java.io.PrintWriter;
// import java.io.RandomAccessFile;
// import java.io.File;
// import java.io.UnsupportedEncodingException;
// import java.sql.SQLException;
// import java.sql.Types;
// import java.util.Date;
// import java.util.HashMap;
// import java.util.Map;
// import java.text.DateFormat;
import java.text.SimpleDateFormat;
// import java.util.Date;
import java.util.HashMap;

// import java.sql.ResultSet;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
// import com.comdot.data.DataSet;
import com.comdot.data.Table;
import com.common.tool.Func;
import com.common.tool.*;
import com.common.tool.TwoBarCode;
import com.oracle.bean.*;
import com.netdata.db.*;

// import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

/**
 * erp进销存及主接口
 */
@WebServlet("/api")
public class ErpServlet extends HttpServlet {

	private static final long serialVersionUID = -8250428508633548879L;
	// private static String aes_key = "sun81xjh34wmg91zhb16ccy35lk82xjw"; //
	// 32位
	// private static final long serialVersionUID = 1L;
	private static String filePath = "";

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public void destroy() {
		// TODO Auto-generated constructor stub
		super.destroy();
	}

	public void Init() throws ServletException {
		// super();
		// TODO Auto-generated constructor stub
		// filePath = getServletContext().getRealPath("/");
		// System.out.println("Init ");
		// filePath = Func.getRootPath();
	}

	public ErpServlet() {
		// TODO Auto-generated constructor stub
		super();
		// filePath = System.getProperty("user.dir");
		// filePath = getServletContext().getRealPath("/");
		filePath = Func.initRootPath();// +"skyderp.config/";

		System.out.println("ErpServlet is ready ok! " + filePath);

	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);

	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		// System.out.println("0000000");

		request.setCharacterEncoding("UTF-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html;charset=UTF-8");
		// LogUtils.LogWrite("aaa","111", "1111");

		String url = request.getRequestURL() + "?" + request.getQueryString();
		String url0 = url;
		String url1 = url;

		//		System.out.println(url + " post:" + request.getParameterMap().toString());

		String action = request.getParameter("action").toLowerCase();
		if (action == null || action.length() <= 0)
			action = "noaction";
		//		if (action.compareTo("(null)") == 0 || action == null || length(action) <= 0)
		//			action = "getwareoutmsum";
		// 测试接口
		if (action.equals("path")) {
			response.getWriter().write(filePath + "  ---erp  ");
			return;
		} else if (action.equals("serverdate")) {
			ServerDate(response);
			return;
		} else

		if (action.equals("serverdatetime")) {
			ServerDateTime(response);
			return;
		}
		// System.out.println("0000000-1");

		HttpInfo htp1 = new HttpInfo();
		htp1.setIpaddress(Func.getIpAddress(request));
		htp1.setAction(action);// 设action
		// htp1.setRootfilepath(filePath);
		String signjson = request.getParameter("sign"); // 取sign参数
		// LogUtils.LogDebugWrite(action + "-00000", signjson);
		// System.out.println("1111111");

		if (signjson == null || signjson.length() <= 0) {
			WriteResult(response, 0, "sign参数无效！");
			return;
		}
		url0 += " sign=" + signjson;

		// base64解码
		signjson = Func.Base64Decode(signjson);// sign base64解码
		// System.out.println("1111111-1");

		JSONObject jsonObject = JSONObject.fromObject(signjson);
		jsonObject.remove("timestamp");
		jsonObject.remove("signature");
		url1 += " sign=" + jsonObject.toString();

		htp1.setUrl(url);//

		String datajson = request.getParameter("data");//.replaceAll(" ", "+");
		// LogUtils.LogDebugWrite(action+"-22222", datajson);
		if (datajson != null) {
			url0 += " data=" + datajson;
			// url1 += " data=" + datajson;
			htp1.setDatajson(datajson);// 传入data参数

		}

		// if (action.equals("test1")) {
		// response.getWriter().write(url1+" "+Func.StrtoMD5(url1));
		// return;
		// }

		// LogUtils.LogWrite("ERP调用1", "", url + " sign=" + signjson + " data="
		// + datajson);

		// =================
		String pictjson = request.getParameter("pict");

		if (pictjson != null)// pictjson="";
			htp1.setPictjson(pictjson);// 传入pict参数
		// ===================
		// LogUtils.LogDebugWrite(action+"-3333", "begin");
		htp1.setUrl0(url0);//
		htp1.setUrl1(url1);//
		// System.out.println("1111111-2");
		int ret = htp1.setSignjson(signjson, 0);
		// System.out.println("222222");

		String nologaction = "^serverdate^serverdatetime^path^test^devicevalid^getworkday^decodexstr1^decodexstr^passday^cleardemo^getdeviceno^backprintlist^overbackprint^getaccesskey^";
		// 不记录日志的接口名
		if (!nologaction.contains("^" + action + "^")) {
			// 接口调用记录
			LogUtils.LogWrite(htp1.getUsername() + " " + htp1.getIpaddress(), htp1.getUrl());
		}

		if (ret == 0)// 校验参数是否有效
		{
			Write(response, htp1.getErrmess());
			return;
		} else if (ret == -1) {
			// WriteResult(response, 0, htp1.getErrmess());
			return;
		}
		String ss = Func.HttpIsDanger(htp1.getUrl());
		if (!ss.equals("")) {
			// 有危险操作的请求不允许通过
			LogUtils.LogWrite(htp1.getUsername() + "【 " + ss.trim() + "】" + htp1.getIpaddress(), htp1.getUrl(), "warn");
			// WriteResult(response, 0, "警告：请求中含有危险操作命令！");
			// return;
		}
		// System.out.println("action=" + action);
		try {
			switch (action) {
			case "test":
				Test(response, htp1);
				break;

			// case "dbconntest":// 数据库连接测试
			// DbConntest(response, htp1);
			// break;
			case "getpublicip"://获取外网ip
				GetPublicIP(response, htp1);
				break;
			case "pushmess": // 指定推送消息
				PushMess(response, htp1);
				break;

			case "serverdate":
				ServerDate(response);
				break;
			case "serverdatetime":
				ServerDateTime(response);
				break;
			case "messstate":
				GetMessstate(response, htp1); // 取新消息记录数
				break;
			case "gettwobarcode": // 生成推荐注册二维码，供商家扫码注册
				Twobarcode(response, htp1);
				break;
			// ================================================= ok
			case "listaccregpay": // 分页显示企业账户支付信息表
				ListAccregpay(response, htp1);
				break;
			case "getaccregpay": // 获取企业账户支付信息表
				GetAccregpay(response, htp1);
				break;
			case "checkaccregpay": // 审核/取消审核企业账户支付信息表
				CheckAccregpay(response, htp1);
				break;
			case "delaccregpay": // 删除企业账户支付信息表
				DelAccregpay(response, htp1);
				break;
			case "listprogpage": // 显示页面程序功能(v2版功能页) ok
				ListProgPage(response, htp1);
				break;
			case "selectprogpage": // 选择功能页程序(v2版功能页) ok
				SelectProgPage(response, htp1);
				break;
			// // =================================================
			case "savefirstpage": // 保存我的首页功能 或排序后调用
				SaveFirstPage(response, htp1);
				break;

			case "employelogin": // 职员验证登录
				EmployeLogin(response, htp1, 0);
				break;
			case "employeloginx": // 职员验证登录(不产生登录日志，供打印后台登录用)
				EmployeLogin(response, htp1, 1);
				break;
			case "totaljyhztj": // 汇总经营汇总统计
				TotalJyhztj(response, htp1);
				break;
			// =======================
			case "addpaymoney": // 增加账户充值记录操作
				AddPaymoneyRec(response, htp1);
				break;
			case "updatepaymoneybyid": // 更新账户充值记录
				UpdatePaymoneyByID(response, htp1);
				break;

			case "uploadlogmess": // 上传日志信息
				UploadLogmess(response, htp1);
				break;
			case "addaccmoneybyname": // 按企业账户名称充值
				AddAccmoneybynameRec(response, htp1);
				break;

			case "addaccuserbyname": // 增加站点
				AddAccuserbynameRec(response, htp1);
				break;

			case "accmoneylist": // 获取账户充值及扣费记录
				GetAccmoneyList(response, htp1);
				break;

			case "moveaccmoney": // 枫杨果转账
				MoveAccmoneyRec(response, htp1);
				break;

			case "updateaccregbyid": // 更新指定账户id信息 ，更改登账日期
				UpdateAccregByID(response, htp1);
				break;
			case "addaccreg": // 新增账户记录
				AddAccregRec(response, htp1);
				break;
			case "accregnearlist": // 取最近注册用户
				GetAccregnearlist(response, htp1);
				break;

			case "nearlogin": // 取最近登录的程序
				GetNearloginlist(response, htp1);
				break;

			case "accregcount1": // 取注册账户数及当前登录用户数
				GetAccregcount1(response, htp1);
				break;
			case "accregcount1x": // 取注册账户数及当前登录用户数
				GetAccregcount1x(response, htp1);
				break;

			case "accregcount2": // 取本期注册账户数及当前登录用户数
				GetAccregcount2(response, htp1);
				break;
			case "accregcount2x": // 取本期注册账户数及当前登录用户数
				GetAccregcount2x(response, htp1);
				break;

			case "devicevalid": // 校验当前用户设备号有效性,是否授权使用
				Devicevalid(response, htp1);
				break;
			case "accnamevalid": // 注册时判断企业账号是否可用
				Accnamevalid(response, htp1);
				break;

			case "resetaccnamepwd": // 重置企业账户密码
				ResetAccnamepwd(response, htp1);
				break;

			case "changeaccregusetag": // 更改指定账户使用状态
				ChangeAccregUsetag(response, htp1);
				break;
			case "getaccnamebymobile": // 通过手机号找注册账号
				GetAccnamebymobile(response, htp1);
				break;
			case "getaccregbyid": // 获取指定账户id信息
				GetAccregByID(response, htp1);
				break;
			case "getaccregbyname":// 通过注册名称找注册账号
				GetAccregbyname(response, htp1);
				break;
			case "regbyprovince": // 按省份统计账户注册数
				TotalAccregbyprovince(response, htp1);
				break;

			case "accreglist": // 分页获取账户列表
				GetAccregList(response, htp1);
				break;
			case "getdeviceno": // 获取当前用户最近登录的设备号
				GetDeviceno(response, htp1);
				break;
			case "totalcost": // 汇总当前成本
				TotalCost(response, htp1);
				break;
			case "cleardemo": // 清理演示账套数据
				ClearDemoData(response, htp1);
				break;
			case "totalwaresum": // 汇总当前库存
				TotalWareSum(response, htp1);
				break;
			case "totalcurr": // 汇总往来账款
				TotalCurr(response, htp1);
				break;
			case "totalaccsum": // 汇总指定账户数据
				TotalAccSum(response, htp1);
				break;
			case "totalwareout": // 汇总客户订货，采购订货，调货订货余额
				TotalWareout(response, htp1);
				break;
			case "totalcust": // 汇总客户库存及成本
				TotalCust(response, htp1);
				break;
			case "passday": // 每日登录
				Passday(response, htp1);
				break;
			case "totalacc": // 每日自动汇总所有账套数据
				Totalacc(response, htp1);
				break;

			case "getworkday": // 取当前工作日期
				GetWorkday(response);
				break;

			// 以上接口不需要签名校验
			// =================================
			case "totalfirstpage": // 我的首页角色功能统计
				TotalFirstpage(response, htp1);
				break;
			case "totalfirstpagexs": // 我的首页角色功能统计 销售
				TotalFirstpagexs(response, htp1);
				break;
			case "totalvippage": // 侧边菜单会员页功能统计
				TotalVippage(response, htp1);
				break;
			case "totalomorderpage": // 侧边菜单订货会页功能统计
				TotalOMorderpage(response, htp1);
				break;
			case "totalemplpage": // 侧边菜单员工管理页功能统计
				TotalEmplpage(response, htp1);
				break;
			// ====================================
			case "uploademployelogo": // 上传职员头像logo
				UploadEmployelogo(response, htp1);
				break;
			// ===========================================================================================

			case "setnoteremark": // 更改单据摘要
				setNoteRemark(response, htp1);
				break;

			case "waretypelist": // 选择商品类型列表
				GetWaretypeList(response, htp1);
				break;
			case "accwaretypelist": // 商品类型帮助
				GetAccwaretypeList(response, htp1);
				break;
			case "waretypeselectlist": // 返回已择中的商品类型，erp接口使用
				GetWaretypeselectList(response, htp1);
				break;
			case "writeaccwaretype": // 写账户商品类型表
				WriteAccwaretype(response, htp1);
				break;
			case "writeallaccwaretype": // 成批写账户商品类型表
				WriteAllaccwaretype(response, htp1);
				break;
			case "delwaretypebyid": // 删除指定商品类型id信息
				DelWaretypeByID(response, htp1);
				break;
			case "addwaretype": // 新增商品类型记录
				AddWaretypeRec(response, htp1);
				break;
			case "updatewaretypebyid": // 更新指定商品类型id信息
				UpdateWaretypeByID(response, htp1);
				break;
			// case "areacodelist": // 获取地区列表,未用
			// GetAreacodeList(response, htp1);
			// break;
			// //
			// ===========================================================================================
			case "housesalepricelist": // 获取商品店铺价格列表
				HousesalepriceList(response, htp1);
				break;
			case "housewarecodelist": // 获取店铺商品零售价列表
				HouseWarecodelist(response, htp1);
				break;
			case "selectwarecode": // 商品选择列表 看图开单
				SelectWarecode(response, htp1);
				break;
			case "gbbartobarcode": // 单款单色商品国标码转条形码
				GbbartoBarcode(response, htp1);
				break;

			case "warecodelist": // 获取商品列表
				GetWareCodeList(response, htp1);
				break;
			case "warecodelisthelp": // 获取商品列表 --帮助调用
				GetWareCodeListHelp(response, htp1);
				break;
			case "getwarecodebyid": // 获取指定商品id信息
				GetWarecodeByID(response, htp1);
				break;
			case "getwarecodebyno": // 根据商品编码获取指定商品信息
				GetWarecodeByNO(response, htp1);
				break;
			case "findwarecode": // 查找商品信息及库存
				FindWarecode(response, htp1);
				break;

			// case "getwarecodebyid1": // 获取指定商品id信息
			// GetWarecodeByID1(response, htp1);
			// break;
			case "delwarecodebyid": // 删除指定商品id信息
				DelWarecodeByID(response, htp1);
				break;
			case "updatewarecodebyid": // 更新指定商品id信息
				UpdateWarecodeByID(response, htp1);
				break;
			case "addwarecode": // 新增商品编码记录
				AddWarecodeRec(response, htp1);
				break;
			case "appendwarecode": // 根据货号增加或更新商品资料 ， 主要用于从excel中导入商品编码
				AppendWarecode(response, htp1);
				break;
			case "addwarecodepicture": // 增加商品编码主图(用于在商品档案中添加图片)
				AddWarecodepicture(response, htp1);
				break;

			case "appendbrand": // 主要用于从excel中导入品牌资料 java
				AppendBrand(response, htp1);
				break;
			case "appendarea": // 主要用于从excel中导入区域资料 java
				AppendArea(response, htp1);
				break;

			case "selectwaresize": // 选择商品可用尺码列表
				SelectWaresize(response, htp1);
				break;
			case "waresizeisused": // 判断商品尺码是否可以不用
				Waresizeisused(response, htp1);
				break;

			// ===========================================================================================

			case "addwarebarcode": // 新增商品条码记录
				AddWarebarcodeRec(response, htp1);
				break;
			case "autowarebarcode": // 自动产生条码
				AutoWarebarcodeRec(response, htp1);
				break;

			case "warebarcodelist": // 获取商品条码列表
				GetWareBarCodeList(response, htp1);
				break;
			case "warebarcodetotext": // 获取商品条码导出条码打印接口文件
				WareBarCodetotext(response, htp1);
				break;
			case "delselectwarebarcode": // 删除选中的条码
				DelSelectWarebarcode(response, htp1);
				break;

			// case "clearallwarebarcode": // 清空所有条码
			// ClearallWarebarcode(response, htp1);
			// break;
			case "appendwarebarcode": // 从excel表中新增条码记录
				AppendWarebarcode(response, htp1);
				break;
			case "getwarebarcodebyid": // 获取指定商品条码id信息
				GetWarebarcodeByID(response, htp1);
				break;
			case "getwarebarcodebyno": // 获取指定商品条码信息
				GetWarebarcodeByID(response, htp1);
				break;
			case "getwarebarcodebyno2": // 获取指定商品条码信息(客户配货专用)
				GetWarebarcodeByNo2(response, htp1);
				break;
			case "delwarebarcodebyid": // 删除指定商品条码id信息
				DelWarebarcodeByID(response, htp1);
				break;
			case "updatewarebarcodebyid": // 更新指定商品条码id信息
				UpdateWarebarcodeByID(response, htp1);
				break;
			case "syncwarebarcode": // 同步商品条码(erp->app)
				SyncWarebarcode(response, htp1);
				break;
			case "clearerrwarebarcode": // 清理异常商品条码(erp->app)
				ClearerrWarebarcode(response, htp1);
				break;

			case "writewaresize": // 写指定商品可用尺码 (可用，禁用)
				WriteWaresize(response, htp1);
				break;

			case "waresizelist": // 获取商品尺码列表(可用，禁用)
				GetWaresizeList(response, htp1);
				break;
			case "waresizecodelist": // 分页获取指定商品尺码列表
				GetWaresizecodeList(response, htp1);
				break;
			case "waresizehouselist": // 分页获取指定商品尺码库存列表
				GetWaresizehouseList(response, htp1);
				break;

			// case "waresizeandcolor": // 指定商品的尺码和颜色 未用
			// GetWaresizeandcolor(response, htp1);
			// break;
			case "waresizeandcolor2": // 指定商品的尺码和颜色(新)
				GetWaresizeandcolor2(response, htp1);
				break;
			// case "seasonlist": // 获取季节类型 未用
			// GetSeasonList(response, htp1);
			// break;

			// ===========================================================================================
			case "sizecodelist": // 分页获取尺码列表
				GetSizecodeList(response, htp1);
				break;
			case "getsizecodebyid": // 获取指定尺码id信息
				GetSizecodeByID(response, htp1);
				break;
			case "delsizecodebyid": // 删除指定尺码id信息
				DelSizecodeByID(response, htp1);
				break;
			case "updatesizecodebyid": // 更新指定尺码id信息
				UpdateSizecodeByID(response, htp1);
				break;
			case "addsizecode": // 新增尺码记录
				AddSizecodeRec(response, htp1);
				break;

			case "sizegrouplist": // 获取尺码组列表
				GetSizegroupList(response, htp1);
				break;
			case "sizegroupnamelist": // 获取尺码组名
				GetSizeGroupnameList(response, htp1);
				break;
			case "sizegroupsizelist": // 获取指定尺码组的尺码明细
				GetsizegroupsizeList(response, htp1);
				break;
			case "warecolornamelist": // 返回商品的颜色名称串
				GetWarecolornameList(response, htp1);
				break;
			case "warenoexists": // 判断商品编码是否存在
				WarenoExists(response, htp1);
				break;
			case "getwareinfo": // 增加商品时取默认颜色，默认尺码组，季节，尺码组列表
				GetWareinfo(response, htp1);
				break;

			case "findwarecodebyname": // 查找商品名称
				FindWarecodebyname(response, htp1);
				break;

			// ============================

			case "arealist": // 分页获取区位列表
				GetAreaList(response, htp1);
				break;
			case "getareabyid": // 获取指定区位id信息
				GetAreaByID(response, htp1);
				break;
			case "delareabyid": // 删除指定区位id信息
				DelAreaByID(response, htp1);
				break;
			case "updateareabyid": // 更新指定区位id信息
				UpdateAreaByID(response, htp1);
				break;
			case "addarea": // 新增区位记录
				AddAreaRec(response, htp1);
				break;

			// ============================
			case "addlabel": // 新增标签记录
				AddLabelRec(response, htp1);
				break;
			case "updatelabelbyid": // 更新指定标签id信息
				UpdateLabelByID(response, htp1);
				break;
			case "labellist": // 标签分页列表
				LabelList(response, htp1, 0);
				break;
			case "dellabelbyid": // 删除指定标签id信息
				DelLabelByID(response, htp1);
				break;

			case "listuserdevice": // 用户设备分页列表
				ListUserdevice(response, htp1);
				break;
			case "updateuserdevice": // 更新用户设备权限信息
				UpdateUserdevice(response, htp1);
				break;
			case "deleteuserdevice": // 删除用户设备权限信息
				DeleteUserdevice(response, htp1);
				break;

			// ============================
			// case "addaccregpay": // 新增企业账户支付信息表
			// AddAccregpayRec(response, htp1);
			// break;

			case "addsysprog": // 新增程序
				AddSysprogRec(response, htp1);
				break;
			case "updatesysprogbyid": // 更新指定程序id信息
				UpdateSysprogByID(response, htp1);
				break;

			case "delsysprogbyid": // 删除指定程序id信息
				DelSysprogByID(response, htp1);
				break;

			case "getsysprogbyid": // 获取程序信息
				GetSysprogByID(response, htp1);
				break;

			case "banklist": // 银行分页列表
				GetBankList(response, htp1);
				break;
			case "banklistx": // 银行分页列表
				GetBankList(response, htp1);
				break;
			case "addbrand": // 新增品牌记录
				AddBrandRec(response, htp1);
				break;
			case "updatebrandbyid": // 更新指定品牌id信息
				UpdateBrandByID(response, htp1);
				break;
			case "brandlist": // 品牌分页列表
				BrandList(response, htp1, 0);
				break;
			case "downbrand": // 下载品牌文件
				DownBrand(response, htp1);
				break;
			case "downsalecode": // 下载销售类型文件
				DownSalecode(response, htp1);
				break;
			case "downcustomer": // 下载客户文件
				DownCustomer(response, htp1);
				break;
			case "downprovide": // 下载供应商文件
				DownProvide(response, htp1);
				break;
			case "downchargescode": // 下载费用项目
				DownChargescode(response, htp1);
				break;
			case "downwarecode": // 下载商品文件
				DownWarecode(response, htp1);
				break;
			case "downwarehouse": // 下载店铺文件
				DownWarehouse(response, htp1);
				break;
			case "downemploye": // 下载职员文件
				DownEmploye(response, htp1);
				break;
			case "downdepartment": // 下载职员文件
				DownDepartment(response, htp1);
				break;
			case "downwaretype": // 下载职员文件
				DownWaretype(response, htp1);
				break;
			case "downsizecode": // 下载 尺码
				DownSizecode(response, htp1);
				break;
			case "downcolorcode": // 下载 颜色
				DownColorcode(response, htp1);
				break;
			case "downwarecolor": // 下载 颜色
				DownWarecolor(response, htp1);
				break;

			case "downguesttype": // 下载 会员类型
				DownGuesttype(response, htp1);
				break;
			case "downguestvip": // 下载会员资料
				DownGuestvip(response, htp1);
				break;
			case "downpayway": // 下载会员资料
				DownPayway(response, htp1);
				break;
			case "downwarebarcode": // 下载会员资料
				DownWarebarcode(response, htp1);
				break;
			// case "brand2xls": //
			// BrandList(response, htp1, 0);
			// break;

			case "brandhelplist": // 分页获取品牌列表,帮助调用
				BrandList(response, htp1, 1);
				break;

			case "getbrandbyid": // 获取指定品牌id信息
				GetBrandByID(response, htp1);
				break;
			case "delbrandbyid": // 删除指定品牌id信息
				DelBrandByID(response, htp1);
				break;
			// ===========================================================================================
			case "colorlist": // 分页获取颜色列表
				GetColorList(response, htp1);
				break;
			case "getcolorbyid": // 获取指定颜色id信息
				GetColorByID(response, htp1);
				break;
			case "delcolorbyid": // 删除指定颜色id信息
				DelColorByID(response, htp1);
				break;
			case "updatecolorbyid": // 更新指定颜色id信息
				UpdateColorByID(response, htp1);
				break;
			case "addcolor": // 新增颜色记录
				AddColorRec(response, htp1);
				break;
			case "appendcolor": // 从excel表中新增颜色记录
				AppendColor(response, htp1);
				break;
			// ===========================================================================================

			case "printsetlist": // 分页获取打印机列表
				GetPrintsetList(response, htp1);
				break;
			case "printsetlistx": // 分页获取打印机列表(后台打印用)
				GetPrintsetList(response, htp1);
				break;
			case "getprintsetbyid": // 获取指定打印机id信息
				GetPrintsetByID(response, htp1);
				break;
			case "delprintsetbyid": // 删除指定打印机id信息
				DelPrintsetByID(response, htp1);
				break;
			case "updateprintsetbyid": // 更新指定打印机id信息
				UpdatePrintsetByID(response, htp1);
				break;
			case "addprintset": // 新增打印机记录
				AddPrintsetRec(response, htp1);
				break;

			// ===========================================================================================
			case "chargeslist": // 分页获取费用列表
				GetChargesList(response, htp1);
				break;
			case "getchargesbyid": // 获取指定费用id信息
				GetChargesByID(response, htp1);
				break;
			case "delchargesbyid": // 删除指定费用id信息
				DelChargesByID(response, htp1);
				break;
			case "updatechargesbyid": // 更新指定费用id信息
				UpdateChargesByID(response, htp1);
				break;

			case "addcharges": // 新增费用记录
				AddChargesRec(response, htp1);
				break;

			// =================================

			case "createwarehouse": // 成批创建店铺 java
				CreateWarehouse(response, htp1);
				break;
			case "addwarehouse": // 新增店铺记录
				AddWarehouseRec(response, htp1);
				break;
			case "updatewarehousebyid": // 更新指定店铺id信息
				UpdateWarehouseByID(response, htp1);
				break;
			case "warehousehelplist": // 分页获取店铺列表--帮助调用
				GetWareHouseListHelp(response, htp1);
				break;
			case "warehouselistx": // 分页获取店铺列表，不需签名
				WarehouseList(response, htp1);
				break;
			case "warehouselist": // 店铺分页列表
				WarehouseList(response, htp1);
				break;
			case "getwarehousebyid": // 获取指定店铺id信息
				GetWarehouseByID(response, htp1);
				break;
			case "delwarehousebyid": // 删除指定店铺id信息
				DelWarehouseByID(response, htp1);
				break;
			case "houselocanolist": // 获取店铺分类列表
				GetHouselocanoList(response, htp1);
				break;
			// ===========================================================================================
			case "employelist": // 分页获取职员列表
				GetEmployeList(response, htp1);
				break;
			case "getemployebyid": // 获取指定职员id信息
				GetEmployeByID(response, htp1);
				break;
			case "getemployebyno": // 通过职员编号获取职员id信息
				GetEmployeByNo(response, htp1);
				break;
			case "delemployebyid": // 删除指定职员id信息
				DelEmployeByID(response, htp1);
				break;
			case "updateemployebyid": // 更新指定职员id信息
				UpdateEmployeByID(response, htp1);
				break;
			case "addemploye": // 新增职员记录
				AddEmployeRec(response, htp1);
				break;
			case "addemployex": // 新增职员记录 不签名
				AddEmployeRec(response, htp1);
				break;

			// =================================
			case "addprovide": // 新增供应商记录
				AddProvideRec(response, htp1);
				break;
			case "updateprovidebyid": // 更新指定供应商id信息
				UpdateProvideByID(response, htp1);
				break;
			case "providelist": // 供应商分页列表
				ProvideList(response, htp1);
				break;
			case "providelisthelp": // 分页获取供应商列表 java
				GetProvideListHelp(response, htp1);
				break;

			case "getprovidebyid": // 获取指定供应商id信息
				GetProvideByID(response, htp1);
				break;
			case "delprovidebyid": // 删除指定供应商id信息
				DelProvideByID(response, htp1);

				break;
			case "appendprovide": // 主要用于从excel中导入供应商资料
				AppendProvide(response, htp1);
				break;
			case "appendcustomer": // 主要用于从excel中导入客户资料 java
				AppendCustomer(response, htp1);
				break;
			case "appendemploye": // 主要用于从excel中导入职员资料 java
				AppendEmploye(response, htp1);
				break;

			case "findprovidebyname": // 查找供应商名称
				FindProvidebyname(response, htp1);
				break;

			// =================================
			case "custarealist": // 获取客户区域列表
				GetCustarealList(response, htp1);
				break;

			case "findcustomerbyname": // 查找客户名称
				FindCustomerbyname(response, htp1);
				break;

			case "addcustomer": // 新增客户记录
				AddCustomerRec(response, htp1);
				break;
			case "updatecustomerbyid": // 更新指定客户id信息
				UpdateCustomerByID(response, htp1);
				break;
			case "customerlist": // 客户分页列表
				CustomerList(response, htp1);
				break;
			case "customerlisthelp": // 分页获取客户列表 java
				GetCustomerListHelp(response, htp1);
				break;

			case "getcustomerbyid": // 获取指定客户id信息
				GetCustomerByID(response, htp1);
				break;
			case "delcustomerbyid": // 删除指定客户id信息
				DelCustomerByID(response, htp1);
				break;
			// case "appendguestcentorcurr": // 载入会员初始积分和储值余额
			// AppendGuestcentorcurr(response, htp1);
			// break;

			case "listcustbrand": // 客户品牌折扣列表
				ListCustbrand(response, htp1);
				break;
			case "writecustbrand": // 保存客户品牌折扣
				UpdateCustbrand(response, htp1);
				// WriteCustbrand(response, htp1);
				break;

			case "addcustbrand": // 新增客户品牌折扣
				AddCustbrand(response, htp1);
				break;
			case "updatecustbrand": // 修改客户品牌折扣
				UpdateCustbrand(response, htp1);
				break;
			case "delcustbrand": // 删除客户品牌折扣
				DelCustbrand(response, htp1);
				break;

			// =================================
			case "adddepartment": // 新增部门记录
				AddDepartmentRec(response, htp1);
				break;
			case "updatedepartmentbyid": // 更新指定部门id信息
				UpdateDepartmentByID(response, htp1);
				break;
			case "departmentlist": // 部门分页列表
				DepartmentList(response, htp1, 0);
				break;
			case "departmenthelplist": // 分页获取部门列表,帮助调用 java
				DepartmentList(response, htp1, 1);
				break;
			case "getdepartmentbyid": // 获取指定部门id信息
				GetDepartmentByID(response, htp1);
				break;
			case "deldepartmentbyid": // 删除指定部门id信息
				DelDepartmentByID(response, htp1);
				break;
			// =================================
			case "salecodelist": // 分页获取销售类型列表
				SalecodeList(response, htp1);
				break;
			case "getsalecodebyid": // 获取指定销售类型id信息
				GetSalecodeByID(response, htp1);
				break;
			case "delsalecodebyid": // 删除指定销售类型id信息
				DelSalecodeByID(response, htp1);
				break;
			case "updatesalecodebyid": // 更新指定销售类型id信息
				UpdateSalecodeByID(response, htp1);
				break;
			case "addsalecode": // 新增销售类型记录
				AddSalecodeRec(response, htp1);
				break;

			// =================================
			case "paywaylist": // 分页获取结算方式列表
				PaywayList(response, htp1);
				break;
			case "getpaywaybyid": // 获取指定结算方式id信息
				GetPaywayByID(response, htp1);
				break;
			case "getpaywaybyno": // 根据结算方式编码获取指定结算方式信息
				GetPaywayByNO(response, htp1);
				break;
			case "delpaywaybyid": // 删除指定结算方式id信息
				DelPaywayByID(response, htp1);
				break;
			case "updatepaywaybyid": // 更新指定结算方式id信息
				UpdatePaywayByID(response, htp1);
				break;
			case "addpayway": // 新增结算方式记录
				AddPaywayRec(response, htp1);
				break;
			case "paynolist": // 可用的结算方式代号
				GetPaynoList(response, htp1);
				break;

			case "totaljxctj": // 汇总进销存分析
				TotalJxctj(response, htp1);
				break;
			case "listjxctj": // 查询进销存分析
				ListJxctj(response, htp1);
				break;

			case "totalcxkczy": // 汇总当前库存
				TotalCxkczy(response, htp1);
				break;
			case "repcxkczy": // 分页显示库存资源
				repCxkczy(response, htp1);
				break;

			case "totalkhkczy": // 汇总客户当前库存
				TotalKhkczy(response, htp1);
				break;
			case "repkhkczy": // 分页显示客户库存资源
				repKhkczy(response, htp1);
				break;

			case "listwarn": // 查询库存商品报警明细数据
				ListWarn(response, htp1);
				break;

			case "totaljxcmx": // 汇总进销存明细数据
				TotalJxcmx(response, htp1);
				break;
			case "listjxcmx": // 查询进销存明细数据
				ListJxcmx(response, htp1);
				break;
			case "totaljxchz": // 汇总进销存汇总数据
				TotalJxchz(response, htp1);
				break;
			case "listjxchz": // 查询进销存汇总数据
				ListJxchz(response, htp1);
				break;

			case "totaljxckhhz": // 汇总进销存汇总数据
				TotalJxckhhz(response, htp1);
				break;
			case "listjxckhhz": // 查询进销存汇总数据
				ListJxckhhz(response, htp1);
				break;

			case "totaljxckhmx": // 汇总客户进销存明细数据
				TotalJxckhmx(response, htp1);
				break;
			case "listjxckhmx": // 查询客户进销存明细数据
				ListJxckhmx(response, htp1);
				break;

			//
			case "totalshopcost": // 汇总店铺利润表
				TotalShopcost(response, htp1);
				break;
			case "listshopcost": // 分页店铺利润表
				ListShopcost(response, htp1);
				break;
			case "totalszjyhz": // 汇总经营收支
				TotalSzjyhz(response, htp1);
				break;
			case "listszjyhz": // 查询经营收支
				ListSzjyhz(response, htp1);
				break;

			// case "listcxkczy1": //查询库存资源数据
			// ListCxkczy(response, htp1);
			// break;

			case "addprintdev": // 增加打印机设备
				AddPrintdevRec(response, htp1);
				break;
			case "updateprintdev": // 修改打印机设备
				UpdatePrintdev(response, htp1);
				break;
			case "findprintdev": // 查找打印机设备
				FindPrintdev(response, htp1);
				break;
			case "listprintdev": // 打印机设备列表
				ListPrintdev(response, htp1);
				break;
			// ====================================================

			case "salerangelist": // 获取售价范围
				GetSalerangeList(response, htp1);
				break;

			case "warewavelist": // 分页获取商品波次列表
				GetWarewaveList(response, htp1);
				break;
			case "getwarewavebyid": // 获取指定商品波次id信息
				GetWarewaveByID(response, htp1);
				break;
			case "delwarewavebyid": // 删除指定商品波次id信息
				DelWarewaveByID(response, htp1);
				break;
			case "updatewarewavebyid": // 更新指定商品波次id信息
				UpdateWarewaveByID(response, htp1);
				break;
			case "addwarewave": // 新增商品波次记录
				AddWarewaveRec(response, htp1);
				break;

			case "savepayparam": // 保存支付宝，微信,拉卡拉接口参数
				SavePayparam(response, htp1);
				break;
			case "loadpayparam": // 载入支付宝，微信,拉卡拉接口参数
				LoadPayparam(response, htp1);
				break;
			case "actualwarecheck": // 实时盘点,库存资源中输入实际库存，自动生成盘点单
				ActualWarecheck(response, htp1);
				break;
			case "warecheckcalc": // 刷新盘点单账面数 ,计算账面数
				CalcWarecheck(response, htp1);
				break;

			case "custcheckcalc": // 刷新客户盘点单账面数 ,计算账面数
				CalcCustcheck(response, htp1);
				break;
			case "custcheckload": // 客户盘点单载入库存数
				LoadCustcheck(response, htp1);
				break;

			case "warecheckload": // 盘点单载入库存数
				LoadWarecheck(response, htp1);
				break;
			case "addwarecheckh": // 新增库存盘点记录
				AddWarecheckhRec(response, htp1);
				break;
			case "warecheckhlist": // 分页获取商品盘点记录列表
				GetWarecheckhList(response, htp1);
				break;
			case "getwarecheckhbyid": // 获取指定商品盘点记录id信息
				GetWarecheckhByID(response, htp1);
				break;
			case "updatewarecheckhbyid": // 更新指定商品盘点记录id信息
				UpdateWarecheckhByID(response, htp1);
				break;
			case "delwarecheckhbyid": // 删除指定商品盘点记录id信息
				DelWarecheckhByID(response, htp1);
				break;
			// ============================
			case "addcustcheckh": // 新增客户库存盘点记录
				AddCustcheckhRec(response, htp1);
				break;
			case "custcheckhlist": // 分页获取客户商品盘点记录列表
				GetCustcheckhList(response, htp1);
				break;
			case "getcustcheckhbyid": // 获取指定客户商品盘点记录id信息
				GetCustcheckhByID(response, htp1);
				break;
			case "updatecustcheckhbyid": // 更新指定客户商品盘点记录id信息
				UpdateCustcheckhByID(response, htp1);
				break;
			case "delcustcheckhbyid": // 删除指定客户商品盘点记录id信息
				DelCustcheckhByID(response, htp1);
				break;

			// =================================
			case "savewarewarn": // 新增库存报警记录
				SaveWarewarn(response, htp1);
				break;
			case "loadwarewarn": // 新增库存报警记录
				LoadWarewarn(response, htp1);
				break;
			case "listwarewarn": // 分页获取商品报警记录列表
				ListWarewarn(response, htp1);
				break;
			case "addwarewarnxls": // 从excel导入商品报警记录
				AddWarewarnxls(response, htp1);
				break;

			//		case "addwareouthxls": // 从excel导入店铺零售单据
			//			AddWareouthxls(response, htp1);
			//			break;

			// case "getwarewarnhbyid": // 获取指定商品报警记录id信息
			// GetWarewarnhByID(response, htp1);
			// break;
			// case "updatewarewarn": // 更新指定商品报警记录id信息
			// UpdateWarewarn(response, htp1);
			// break;
			case "delwarewarn": // 删除指定商品报警记录id信息
				DelWarewarn(response, htp1);
				break;

			// ==========================================
			case "adddealrecord": // 增加支付宝微信交易记录
				AddDealrecord(response, htp1);
				break;
			case "updatedealrecord": // 更改支付宝微信交易记录
				UpdateDealrecord(response, htp1);
				break;
			case "getdealrecordbyno": // 获取支付交易记录状态
				GetDealrecordbyno(response, htp1);
				break;
			case "listdealrecord": // 分页显示支付交易记录
				ListDealrecord(response, htp1);
				break;
			case "listlogrecord": // 分页显示操作日志
				ListLogrecord(response, htp1);
				break;

			case "sendnotebartobackprint": // 传送指定单据商品条码到后台打印
				SendNotebartoBackprint(response, htp1);
				break;

			case "listsalehistory": // 查询销售历史
				ListSaleHistory(response, htp1);
				break;
			case "listbuyhistory": // 查询采购历史
				ListBuyHistory(response, htp1);
				break;
			case "listallothistory": // 查询调出历史
				ListAllotHistory(response, htp1);
				break;
			// =====================================================
			case "employecustlist": // 获取职员客户授权列表
				GetEmployecustList(response, htp1);
				break;
			case "employecustexistslist": // 获取职员已有客户授权列表
				GetEmployecustexistsList(response, htp1);
				break;
			case "writeemployecust": // 写职员客户授权记录
				WriteEmployecust(response, htp1);
				break;
			case "writeallemployecust": // 成批写职员客户授权记录
				WriteAllemployecust(response, htp1);
				break;
			// =====================================================
			case "employeprovlist": // 获取职员供应商授权列表
				GetEmployeprovList(response, htp1);
				break;
			case "employeprovexistslist": // 获取职员已有供应商授权列表
				GetEmployeprovexistsList(response, htp1);
				break;
			case "writeemployeprov": // 写职员供应商授权记录
				WriteEmployeprov(response, htp1);
				break;
			case "writeallemployeprov": // 成批写职员供应商授权记录
				WriteAllemployeprov(response, htp1);
				break;

			case "addbackprint": // 将单据转入后台打印服务
				AddBackprint(response, htp1);
				break;
			// =================================

			case "addfirstpaycurrxls": // 从excel中新增期初应付款
				AddFirstpaycurrxls(response, htp1);
				break;
			case "addfirstincomecurrxls": // 从excel中新增期初应付款
				AddFirstIncomecurrxls(response, htp1);
				break;

			case "addtempcheckmxls": // 从excel中新增临时盘点单
				AddTempcheckmxls(response, htp1);
				break;

			case "changeaccbegindate": // 重设建账日期，之前数据删除
				ChangeAccbegindate(response, htp1);
				break;
			case "sysnoticelist": // 获取系统公告记录
				GetSysnoticeList(response, htp1);
				break;
			case "getsysnoticebyid": // 获取指定系统公告id信息
				GetSysnoticeByID(response, htp1);
				break;
			case "addsysnotice": // 增加系统公告记录
				AddSysnoticeRec(response, htp1);
				break;
			case "updatesysnotice": // 更改系统公告记录
				UpdateSysnoticeRec(response, htp1);
				break;
			case "writesysnotice": // 写阅读系统公告标记
				WriteSysnotice(response, htp1);
				break;
			case "changesysnotice": // 更改系统公告状态
				ChangeSysnotice(response, htp1);
				break;

			// ===========================================================================================

			case "listaccmoney": // 分页显示充值记录(管理平台用)
				ListAccmoney(response, htp1);
				break;

			case "listuseronline": // 分页显示在线用户
				ListUseronline(response, htp1);
				break;
			case "deletenoteno": // 删除单据 erp接口专用
				DeleteNoteno(response, htp1);
				break;
			case "deletenotenox": // 删除单据 erp接口专用
				DeleteNoteno(response, htp1);
				break;

			case "erpnote2App":// "myexecsql": // 执行sql 接收ERP采购入库单,返回单据号
				ErpNote2App(response, htp1);
				// MyExecsql(response, htp1);
				break;
			// case "removesubmit": // 撤单
			// Removesubmit(response, htp1);
			// break;
			case "backprintlist": // 取后台打印服务队列
				GetBackprintlist(response, htp1);
				break;
			case "overbackprint": // 后台打印服务完成
				OverBackprint(response, htp1);
				break;
			// ======================================
			case "getallotorderhbyid": // 获取指定调拨订货记录id信息
				GetAllotorderhByID(response, htp1);
				break;
			case "getallotorderhbyidx": // 获取指定调拨订货记录id信息 后台打印用
				GetAllotorderhByID(response, htp1);
				break;
			case "addallotorderh": // 新增调拨订货记录
				AddAllotorderhRec(response, htp1);
				break;

			case "allotorderhlist": // 分页显示调拨订单列表
				GetAllotorderhList(response, htp1);
				break;
			case "delallotorderhbyid": // 删除指定调拨订单记录id信息
				DelAllotorderhByID(response, htp1);
				break;

			case "allotorderhnotover": // 调拨出库中分页显示当前可以载入的调拨订单列表
				GetAllotorderhNotOver(response, htp1);
				break;

			case "allotordertoout": // 载入指定调拨订单明细记录到调拨出库
				AllotOrderToOut(response, htp1);
				break;

			case "allotouthcancel": // 调拨出库单撤单
				AllotouthCancel(response, htp1);
				break;
			case "allotorderhcancel": // 调拨订单撤单
				AllotorderhCancel(response, htp1);
				break;
			case "setallotorderhover": // 设置调拨订单完成标志
				SetAllotorderhover(response, htp1);
				break;
			case "allotinhcancel": // 调拨入库单撤单
				AllotinhCancel(response, htp1);
				break;
			case "updateallotorderhbyid": // 更新指定调拨订货记录id信息
				UpdateAllotorderhByID(response, htp1);
				break;

			case "tempcheckhcancel": // 临时盘点撤单
				TempcheckhCancel(response, htp1);
				break;

			case "custcheckhcancel": // 客户盘点撤单
				CustcheckhCancel(response, htp1);
				break;

			case "warecheckhcancel": // 商品盘点撤单
				WarecheckhCancel(response, htp1);
				break;
			case "warepeihcancel": // 配货单撤单
				WarepeihCancel(response, htp1);
				break;

			case "wareadjusthcancel": // 调价单撤单
				WareadjusthCancel(response, htp1);
				break;
			// ======================================
			case "listwareoutcash": // 分页获取销售单收银台记录列表 AAAA
				ListWareoutcash(response, htp1);
				break;

			case "changeshopsalemdisc": // 更改商场销售开票折扣
				ChangeShopsalemdisc(response, htp1);
				break;
			case "changeshopsalemzp": // 更改商场销售开票商品赠品状态
				ChangeShopsalemzp(response, htp1);
				break;
			case "changecustsalemdisc": // 更改客户销售折扣
				ChangeCustsalemdisc(response, htp1);
				break;

			case "changeprovordermdisc": // 更改采购订货折扣
				ChangeProvordermdisc(response, htp1);
				break;
			case "changecustordermdisc": // 更改客户订货折扣
				ChangeCustordermdisc(response, htp1);
				break;

			case "changewareinmdisc": // 更改采购入库折扣
				ChangeWareinmdisc(response, htp1);
				break;
			case "changewareoutmdisc": // 更改销售出库折扣
				ChangeWareoutmdisc(response, htp1);
				break;

			case "changerefundaskmdisc": // 更改客户退货申请折扣
				ChangeRefundaskmdisc(response, htp1);
				break;

			case "getwareoutnearsale": // 取最近售价
				GetWareoutnearsale(response, htp1);
				break;

			case "getwareoutmsaleid": // 取商品销售类型
				GetWareoutmsaleid(response, htp1);
				break;
			case "getwareoutprice": // 取批发商品售价
				GetWareoutprice(response, htp1);
				break;
			case "getsaleoutprice": // 取零售商品售价
				GetSaleoutprice(response, htp1);
				break;

			// ======================================
			case "firsthousehcancel": //  期初入库撤单
				FirsthousehCancel(response, htp1);
				break;
			case "firstcusthcancel": //  期初客户入库撤单
				FirstcusthCancel(response, htp1);
				break;
			case "custsalehcancel": //  客户销售撤单
				CustsalehCancel(response, htp1);
				break;
			case "shopsalehcancel": //  商场零售撤单
				ShopsalehCancel(response, htp1);
				break;
			case "wareinhcancel": //  采购入库，采购退货撤单
				WareinhCancel(response, htp1);
				break;
			case "wareouthcancel": //  零售出库，批发出库，批发退库撤单
				WareouthCancel(response, htp1);
				break;
			case "getwareincheck": // 获取采购结算信息
				GetWareincheck(response, htp1);
				break;
			case "getwareinpaye":
				GetWareinpaye(response, htp1); // 采购入库单付款记录及应付余额
				break;
			case "getwareinpay":
				GetWareinpay(response, htp1); // 取采购入库单付款记录
				break;
			case "getwareinpayx":
				GetWareinpay(response, htp1); // 取采购入库单收款记录(后台打印专用)
				break;

			// ======================================
			case "custorderhnotover": // 分页显示当前可以载入的客户订单列表 （批发出库中调用）
				GetCustorderhNotOver(response, htp1);
				break;
			case "custorderhcancel": // 客户订单撤单
				CustorderhCancel(response, htp1);
				break;
			case "refundaskhcancel": // 退货申请撤单
				RefundaskhCancel(response, htp1);
				break;
			case "setcustorderhover": // 设置客户订单完成标志
				SetCustorderhover(response, htp1);
				break;
			case "custordertoout": // 载入指定客户订单明细记录到批发出库
				CustOrderToOut(response, htp1);
				break;

			case "custorderhnotpei": // 分页显示当前可以载入的客户订单列表 （配货单中调用）
				GetCustorderhNotPei(response, htp1);
				break;

			case "custordertopei": // 载入指定客户订单明细记录到配货单
				CustOrderToPei(response, htp1);
				break;

			case "getcustorderhbyid": // 获取指定客户订单记录id信息
				GetCustorderhByID(response, htp1);
				break;
			case "getcustorderhbyidx": // 获取指定客户订单记录id信息(打印专用)
				GetCustorderhByID(response, htp1);
				break;

			// ===================================
			case "loadbuyerorder": // 载入经销商的采购订单(我的买家订单) 经销商的采购订单转客户订单
				LoadBuyerOrder(response, htp1);
				break;
			case "buyerwareretinhlist": // 经销商采购退货列表
				BuyerWareretinhlist(response, htp1);
				break;

			case "loadbuyerwareretin": // 载入经销商的采购退货单(我的买家的采购退货单),经销商的采购退货单转批发退库单
				LoadBuyerWareretin(response, htp1);
				break;

			case "sellerwareouthlist": // 供应商发货单列表
				SellerWareouthlist(response, htp1);
				break;
			case "loadsellerwareout": // 载入供应商发货单(我的卖家发货单),生成采购入库单，供应商的批发出库转采购入库
				LoadSellerWareout(response, htp1);
				break;

			// =================================

			case "rephousecost": // 查询店铺费用
				repHousecost(response, htp1);
				break;

			case "repcxcgrk": // 查询采购入库
				repCxcgrk(response, htp1);
				break;

			case "repcxskhz": // 查询收款汇总
				repCxskhz(response, htp1);
				break;

			// case "repcxcgrksize": // 查询采购入库(尺码横向展开)
			// repCxcgrksize(response, htp1);
			// break;
			case "repcxkhxs": // 查询客户销售
				repCxkhxs(response, htp1);
				break;

			case "repcxpfck": // 查询批发出库
				repCxpfck(response, htp1);
				break;

			case "repcxlsck": // 查询零售出库
				repCxlsck(response, htp1);
				break;
			case "repcxlsck0": // 查询零售出库(新)
				repCxlsck0(response, htp1);
				break;

			case "repcxxsck": // 查询销售出库(零售+批发+客户销售)
				repCxxsck(response, htp1);
				break;

			case "repcxcgdh": // 查询采购订货
				repCxcgdh(response, htp1);
				break;

			case "repcxkhdh": // 查询客户订货
				repCxkhdh(response, htp1);
				break;
			case "repcxkhph": // 查询客户配货
				repCxkhph(response, htp1);
				break;

			case "repcxdbdh": // 查询调拨订货
				repCxdbdh(response, htp1);
				break;
			case "repcxdbrk": // 查询调拨入库
				repCxdbrk(response, htp1);
				break;
			case "repcxdbck": // 查询调拨出库
				repCxdbck(response, htp1, 0);
				break;

			case "repcxdbzt": // 查询调拨在途
				repCxdbck(response, htp1, 1);
				break;

			case "repcxlspd": // 查询临时盘点
				repCxlspd(response, htp1);
				break;
			case "repcxkcpd": // 查询库存盘点
				repCxkcpd(response, htp1);
				break;

			case "notetwobarcode": // 根据销售单号生成二维码
				NoteTwobarcode(response, htp1);
				break;
			case "doexecsql": // 执行sql
				DoExecsql(response, htp1);
				break;
			// case "getsalebytwobarcode": //扫二维码获取销售单信息。拉卡拉
			// GetSalebyTwobarcode(GetSalebyTwobarcode);
			// break;

			case "getparameter": // 获取参数信息
				GetParameter(response, htp1);
				break;
			case "writeparameter": // 保存参数信息
				WriteParameter(response, htp1);
				break;

			case "getparameterx": // 获取参数信息
				GetParameterX(response, htp1);
				break;
			case "writeparameterx": // 保存参数信息
				WriteParameterX(response, htp1);
				break;

			// ====================
			// ver2新角色授权
			case "sysrolelist": // 分页获取系统角色列表 v2
				GetSysroleList(response, htp1, 0);
				break;
			case "sysrolelistx": // 分页获取系统角色列表(不需签名)
				GetSysroleList(response, htp1, 1);
				break;
			// ========================================
			case "writeroleprog": // 写角色功能授权记录 用户调用
				WriteRoleprog(response, htp1);
				break;
			case "writeallroleprog": // 成批写角色功能授权记录 用户调用
				WriteAllRoleprog(response, htp1);
				break;

			case "writeprogrole": // v2.0写角色功能授权记录 ok
				WriteProgrole(response, htp1);
				break;
			case "selectprogrole": // v2.0选择角色功能 ok
				SelectProgrole(response, htp1);
				break;
			case "selectprogrole1": // v2.0选择角色功能 ok new
				SelectProgrole1(response, htp1);
				break;
			case "userrolelist": // 分页获取角色列表
				GetUserroleList(response, htp1);
				break;
			case "getuserrolebyid": // 获取指定角色id信息
				GetUserroleByID(response, htp1);
				break;
			case "deluserrolebyid": // 删除指定角色id信息
				DelUserroleByID(response, htp1);
				break;
			case "updateuserrolebyid": // 更新指定角色id信息
				UpdateUserroleByID(response, htp1);
				break;
			case "adduserrole": // 新增角色记录
				AddUserroleRec(response, htp1);
				break;
			case "listsysrole": // 取系统约定角色，在用户自定义角色中继承使用
				GetListSysrole(response, htp1);
				break;
			case "selectroleprog": // 选择角色功能
				SelectRoleprog(response, htp1);
				break;
			case "selectroleprog2": // 选择角色功能 v2版用
				SelectRoleprog2(response, htp1);
				break;
			case "getwareoutcheck": // 获取零售，批发，退货结算信息
				GetWareoutcheck(response, htp1);
				break;

			case "getwareoutpaye":
				GetWareoutpaye(response, htp1, 0); // 取批发出库单收款记录
				break;
			case "getwareoutpayex":
				GetWareoutpaye(response, htp1, 0); // 取批发出库单收款记录(后台打印专用)
				break;
			case "getrefundoutpaye":
				GetWareoutpaye(response, htp1, 1); // 取批发出库单收款记录
				break;
			case "getrefundoutpayex":
				GetWareoutpaye(response, htp1, 1); // 取批发退库单收款记录(后台打印专用)
				break;
			// case "syncwarebarcode": //同步商品条码(erp->app)
			// SyncWarebarcode(response, htp1);
			// break;
			// =================================
			case "houseworklist": // 查询店铺交班记录
				HouseWorkList(response, htp1);
				break;
			case "houseworkexists": // 店铺班次是否存在
				HouseWorkExists(response, htp1);
				break;
			case "houseworkopen": // 店铺收银开班
				HouseWorkopen(response, htp1);
				break;
			case "houseworkcancel": // 取消当前店铺班次
				HouseWorkCancel(response, htp1);
				break;
			case "houseworktotal": // 收银交班表
				HouseWorktotal(response, htp1);
				break;
			case "houseworktotalx": // 收银交班表--后台打印无需签名
				HouseWorktotal(response, htp1);
				break;
			case "houseworkclose": // 店铺交班
				HouseWorkClose(response, htp1);
				break;
			// ==========================
			case "totalprovorderwc": // 汇总采购订货完成数据
				TotalProvorderwc(response, htp1);
				break;
			case "listprovorderwc": // 查询采购订货完成数据
				ListProvorderwc(response, htp1);
				break;
			// case "listprovorderwc1": //查询采购订货完成数据
			// ListProvorderwc1(response, htp1);
			// break;
			case "totalcustorderwc": // 汇总客户订货完成数据
				TotalCustorderwc(response, htp1);
				break;
			case "listcustorderwc": // 查询客户订货完成数据
				ListCustorderwc(response, htp1);
				break;
			// case "listcustorderwc1": //查询客户订货完成数据
			// ListCustorderwc1(response, htp1);
			// break;
			case "totalallotorderwc": // 汇总调拨订货完成数据
				TotalAllotorderwc(response, htp1);
				break;
			case "listallotorderwc": // 查询调拨订货完成数据
				ListAllotorderwc(response, htp1);
				break;

			case "totalkcjgfx": // 汇总库存结构分析数据
				TotalKcjgfx(response, htp1);
				break;
			case "listkcjgfx": // 查询库存结构分析数据
				ListKcjgfx(response, htp1);
				break;
			case "totalwaresalesy": // 汇总前台零售结账日报
				TotalWaresalesy(response, htp1);
				break;

			case "listwaresalesy": // 查询前台零售结账分析数据
				ListWaresalesy(response, htp1);
				break;
			case "totalgxbalance": // 汇总供需平衡数据
				TotalGxbalance(response, htp1);
				break;
			case "listgxbalance": // 查询供需平衡数据
				ListGxbalance(response, htp1);
				break;

			case "totalxszbfx": // 汇总销售占比分析数据（未用）
				TotalXszbfx(response, htp1);
				break;
			case "listxszbfx": // 查询销售占比分析数据（未用）
				ListXszbfx(response, htp1);
				break;
			case "totalxszkfx": // 汇总销售折扣分析数据 （未用）
				TotalXszkfx(response, htp1);
				break;
			case "listxszkfx": // 查询销售折扣分析数据 （未用）
				ListXszkfx(response, htp1);
				break;
			case "totalxstimefx": // 汇总销售时点分析数据（未用）
				TotalXstimefx(response, htp1);
				break;
			case "listxstimefx": // 查询销售时点分析数据（未用）
				ListXstimefx(response, htp1);
				break;
			case "totalxsyjtj": // 汇总销售业绩统计
				TotalXsyjtj(response, htp1);
				break;
			case "listxsyjtj": // 查询销售业绩统计数据
				ListXsyjtj(response, htp1);
				break;

			case "totalxstbfx": // 汇总销售同比数据
				TotalXstbfx(response, htp1);
				break;
			case "listxstbfx": // 查询销售同比数据
				ListXstbfx(response, htp1);
				break;
			case "totalwareoutcheck": // 批发商品对账表
				TotalWareoutcheck(response, htp1);
				break;
			case "listwareoutcheck": // 查询批发商品对账表
				ListWareoutcheck(response, htp1);
				break;

			case "totalxsqsfx": // 汇总销售趋势数据
				TotalXsqsfx(response, htp1);
				break;
			case "listxsqsfx": // 查询销售趋势分析数据
				ListXsqsfx(response, htp1);
				break;
			case "totalxshzfx2": // 汇总销售数据 new
				TotalXshzfx2(response, htp1);
				break;
			case "listxshzfx2": // 查询销售出库汇总数据
				ListXshzfx2(response, htp1);
				break;
			case "listxshzfx21": // 查询销售出库汇总数据
				ListXshzfx21(response, htp1);
				break;

			case "totalxshzfx3": // 汇总销售数据 new （零售，批发，客户销售）
				TotalXshzfx3(response, htp1);
				break;

			case "listxshzfx3": // 查询销售出库汇总数据（ 零售，批发，客户销售）
				ListXshzfx3(response, htp1);
				break;

			case "totalbuyerwarefx": // 汇总经销商进销存明细 java
				TotalBuyerwarefx(response, htp1);
				break;
			case "listbuyerwarefx": // 查询经销商进销存明细 java
				ListBuyerwarefx(response, htp1);
				break;

			case "totalwarebuyerfx": // 汇总经销商进销存汇总
				TotalWarebuyerfx(response, htp1);
				break;
			case "listwarebuyerfx": // 查询经销商进销存汇总
				ListWarebuyerfx(response, htp1);
				break;

			case "totaljxcmxbuyer": // 汇总经销商进销存明细
				TotalJxcmxbuyer(response, htp1);
				break;
			case "listjxcmxbuyer": // 查询经销商进销存明细
				ListJxcmxbuyer(response, htp1);
				break;

			case "totalsalewhere": // 汇总批发客户销售分布
				TotalSalewhere(response, htp1);
				break;
			case "listsalewhere": // 分页显示总批发客户销售分布
				ListSalewhere(response, htp1);
				break;
			case "totalcxwhere": // 汇总商品库存分布明细 1
				TotalCxwhere(response, htp1);
				break;
			case "listcxwhere": // 查询商品库存分布明细 3
				ListCxwhere(response, htp1);
				break;

			case "totalwareandcolor": // 汇总指定商品+颜色 的店铺库存
				TotalWareandcolor(response, htp1);
				break;
			case "listwareandcolor": // 分页显示指定商品+颜色 的店铺库存
				ListWareandcolor(response, htp1);
				break;
			case "totalspfbmx": // 汇总店铺及客户商品分布明细
				TotalSpfbmx(response, htp1);
				break;
			case "listspfbmx": // 查询店铺及客户商品分布明细
				ListSpfbmx(response, htp1);
				break;
			case "listspfbmx1": // 查询店铺及客户商品分布明细1
				ListSpfbmx1(response, htp1);
				break;
			case "warespfbmx": // 查询店铺及客户商品分布明细--商品尺码信息
				WareSpfbmx(response, htp1);
				break;

			case "totalxskczy": // 汇总店铺销售及库存分布 1
				TotalXskczy(response, htp1);
				break;
			case "listxskczy": // 查询销售及库存分布明细 3
				ListXskczy(response, htp1);
				break;
			case "totalcustcheck": // 汇总客户销售对账数据
				TotalCustcheck(response, htp1);
				break;
			case "listcustcheckhz": // 查询客户销售对账汇总数据
				ListCustcheckhz(response, htp1);
				break;
			case "listcustcheckmx": // 查询客户销售对账明细数据
				ListCustcheckmx(response, htp1);
				break;
			case "totalprovcheck": // 汇总供应商采购对账数据
				TotalProvcheck(response, htp1);
				break;
			case "listprovcheckhz": // 查询供应商采购对账汇总数据
				ListProvcheckhz(response, htp1);
				break;
			case "listprovcheckmx": // 查询供应商采购对账明细数据
				ListProvcheckmx(response, htp1);
				break;
			case "totalxsthhz": // 汇总销售及退货分析
				TotalXsthhz(response, htp1);
				break;
			case "listxsthhz": // 查询销售及退货分析
				ListXsthhz(response, htp1);
				break;
			case "totalcgthhz": // 汇总采购及退货分析
				TotalCgthhz(response, htp1);
				break;
			case "listcgthhz": // 查询采购及退货分析
				ListCgthhz(response, htp1);
				break;

			// =================================

			case "sharewarecode": // 商品资料分享
				ShareWarecode(response, htp1);
				break;

			case "sharewareout": // 销售分享
				ShareWareout(response, htp1);
				break;

			case "sharecustorder": // 客户订单分享
				ShareCustorder(response, htp1);
				break;

			case "shareprovorder": // 采购订单分享
				ShareProvorder(response, htp1);
				break;
			// ===========================================================================================
			case "mybuyerlist": // 分页获取我的加盟商(买家)列表
				GetMybuyerList(response, htp1);
				break;
			case "mybuyerbyid": // 根据id获取取我的买家记录
				GetMybuyerbyid(response, htp1);
				break;
			case "addmybuyeracclink": // 用户向 加盟商买家申请连接
				AddMybuyeracclinkRec(response, htp1);
				break;
			case "mybuyeracclinklist": // 分页获取我的买家申请记录列表
				GetMybuyeracclinkList(response, htp1);
				break;
			case "mybuyeracclinkbyid": // 根据id获取我的买家申请记录
				GetMybuyeracclinkbyid(response, htp1);
				break;
			case "addmybuyer": // 新增我的买家记录/买家申请回复)
				AddMybuyerRec(response, htp1);
				break;
			case "delmybuyerbyid": // 删除我的买家记录
				DelMybuyerByID(response, htp1);
				break;
			case "updatemybuyerbyid": // 更改我的买家记录
				UpdateMybuyerByID(response, htp1);
				break;

			// ===========================================================================================
			case "mysellerlist": // 分页获取我的卖家列表(我的供应商)
				GetMysellerList(response, htp1);
				break;
			case "mysellerbyid": // 根据id获取取我的卖家记录
				GetMysellerbyid(response, htp1);
				break;
			case "addmyselleracclink": // 用户向 供应商 申请连接记录 向供应商发送申请信息
				AddMyselleracclinkRec(response, htp1);
				break;
			case "myselleracclinklist": // 分页获取我的卖家申请记录列表
				GetMyselleracclinkList(response, htp1);
				break;
			case "myselleracclinkbyid": // 根据id获取我的卖家申请记录
				GetMyselleracclinkbyid(response, htp1);
				break;
			case "addmyseller": // 新增我的卖家记录/卖家申请回复)
				AddMysellerRec(response, htp1);
				break;
			case "delmysellerbyid": // 删除我的卖家记录
				DelMysellerByID(response, htp1);
				break;
			case "updatemysellerbyid": // 更改我的卖家记录
				UpdateMysellerByID(response, htp1);
				break;
			case "downsellerparams":
				DownSellerparams(response, htp1); // 同步下载卖家（供应商）的基础资料
				break;
			case "jxswareout2custsale":
				JxsWareout2custsale(response, htp1); // 同步我的经销商的销售数据到客户销售中
				break;
			case "writeaccconnect": // 保存的商家关联信息
				WriteAccconnect(response, htp1);
				break;
			// ===============================================
			case "getdefaultcust":
				GetDefaultcust(response, htp1); // 取批发默认客户
				break;
			case "writedefaultcust":
				WriteDefaultcust(response, htp1); // 写批发默认客户
				break;

			case "writedefaultcolor":
				WriteDefaultcolor(response, htp1); // 写商品默认颜色
				break;

			case "writedefaultsize":
				WriteDefaultsize(response, htp1); // 写商品默认尺码
				break;

			case "getqxpublic":
				GetQxpublic(response, htp1); // 取权限参数
				break;

			case "getallqxpublic":
				GetQxallpublic(response, htp1); // 取所有系统参数
				break;

			case "writeqxpublic":
				WriteQxpublic(response, htp1); // 写权限参数
				break;

			case "getprintcs": // 获取打印参数信息
				GetPrintcs(response, htp1, 0);
				break;

			case "getprintcs1": // 获取打印参数信息(电脑端专用)
				GetPrintcs(response, htp1, 1);
				break;

			case "getprintcsx": // 获取打印参数信息(后台专用)
				GetPrintcs(response, htp1, 0);
				break;
			case "writeprintcs": // 保存打印参数信息
				WritePrintcs(response, htp1);
				break;
			// ==============================
			case "getincomebal": // 取客户的应收款余额(累计当天)
				GetIncomebal(response, htp1);
				break;
			case "getincomebaltime": // 取客户的应收款余额(按时间)
				GetIncomebaltime(response, htp1);
				break;
			case "getincomebaltimex": // 取客户的应收款余额(按时间)(后台打印专用)
				GetIncomebaltime(response, htp1);
				break;
			case "getincomebalnoteno": // 取客户的应收款余额(按单据时间)
				GetIncomebalnoteno(response, htp1);
				break;
			case "getincomebalnotenox": // 取客户的应收款余额(按单据时间)(后台打印专用)
				GetIncomebalnoteno(response, htp1);
				break;
			case "getpaybal": // 取供应商的应付款余额
				GetPaybal(response, htp1);
				break;
			case "getpaybaltime": // 取供应商的应付款余额(按指定时间)
				GetPaybaltime(response, htp1);
				break;
			case "getpaybaltimex": // 取供应商的应付款余额(按指定时间) 后台打印专用
				GetPaybaltime(response, htp1);
				break;
			case "getpaybalnoteno": // 取供应商的应付款余额(按单据时间)
				GetPaybalnoteno(response, htp1);
				break;
			case "getpaybalnotenox": // 取供应商的应付款余额(按单据时间)
				GetPaybalnoteno(response, htp1);
				break;

			case "getwaresalepay":
				GetWaresalepay(response, htp1); // 取前台零售单结算记录
				break;
			case "getwaresalepayx":
				GetWaresalepay(response, htp1); // 取前台零售单结算记录(后台打印专用)
				break;
			case "getwaresalepaye":
				GetWaresalepaye(response, htp1); // 取前台零售单结算记录
				break;

			// =================================

			case "custemployelist": // 获取客户职员授权列表
				GetCustemployeList(response, htp1);
				break;
			case "provemployelist": // 获取供应商职员授权列表
				GetProvemployeList(response, htp1);
				break;

			case "brandemployelist": // 获取品牌职员授权列表
				GetBrandemployeList(response, htp1);
				break;

			case "employebrandlist": // 获取职员品牌授权列表
				GetEmployebrandList(response, htp1);
				break;
			case "employebrandexistslist": // 获取职员已有品牌授权列表
				GetEmployebrandexistsList(response, htp1);
				break;
			case "writeemployebrand": // 写职员品牌授权记录
				WriteEmployebrand(response, htp1);
				break;
			case "writeallemployebrand": // 成批写职员品牌授权记录
				WriteAllemployebrand(response, htp1);
				break;

			case "writeallbrandemploye": // 成批写品牌职员授权记录
				WriteAllbrandemploye(response, htp1);
				break;

			case "writeallcustemploye": // 成批写客户职员授权记录
				WriteAllcustemploye(response, htp1);
				break;
			case "writeallprovemploye": // 成批写供应商职员授权记录
				WriteAllprovemploye(response, htp1);
				break;

			// ===========================================================================================
			case "employehouselist": // 获取职员店铺授权列表
				GetEmployehouseList(response, htp1);
				break;
			case "employehouseexistslist": // 获取职员已有店铺授权列表
				GetEmployehouseexistsList(response, htp1);
				break;
			case "writeemployehouse": // 写职员店铺授权记录
				WriteEmployehouse(response, htp1);
				break;
			case "writeallemployehouse": // 成批写职员店铺授权记录
				WriteAllemployehouse(response, htp1);
				break;

			// ===========================================================================================
			case "employehouseinlist": // 获取职员店铺入库授权列表
				GetEmployehouseinList(response, htp1);
				break;
			case "employehouseinexistslist": // 获取职员已有入库店铺授权列表
				GetEmployehouseinexistsList(response, htp1);
				break;
			case "writeemployehousein": // 写职员入库店铺授权记录
				WriteEmployehousein(response, htp1);
				break;
			case "writeallemployehousein": // 成批写职员入库店铺授权记录
				WriteAllemployehousein(response, htp1);
				break;

			// ===========================================================================================
			case "employehouseoutlist": // 获取职员店铺出库授权列表
				GetEmployehouseoutList(response, htp1);
				break;
			case "employehouseoutexistslist": // 获取职员已有出库店铺授权列表
				GetEmployehouseoutexistsList(response, htp1);
				break;
			case "writeemployehouseout": // 写职员出库店铺授权记录
				WriteEmployehouseout(response, htp1);
				break;
			case "writeallemployehouseout": // 成批写职员出库店铺授权记录
				WriteAllemployehouseout(response, htp1);
				break;

			// ===========================================================================================
			case "buyerbrandlist": // 获取买家品牌授权列表
				GetBuyerbrandList(response, htp1);
				break;
			case "writebuyerbrand": // 写买家品牌授权记录
				WriteBuyerbrand(response, htp1);
				break;
			case "writeallbuyerbrand": // 成批写买家品牌授权记录
				WriteAllbuyerbrand(response, htp1);
				break;
			case "getbuyerbrandname": // 取买家品牌名称串
				GetBuyerbrandname(response, htp1);
				break;
			// ===========================================================================================
			case "warecolorlist": // 获取商品颜色列表
				GetWarecolorList(response, htp1);
				break;
			case "warecolorexistslist": // 获取商品已有的颜色列表
				GetWarecolorexistsList(response, htp1);
				break;
			case "writewarecolor": // 写商品颜色记录
				WriteWarecolor(response, htp1);
				break;
			case "updatewarecolor": // 修改商品颜色可用状态
				UpdateWarecolor(response, htp1);
				break;
			case "writewarecolorbatch": // 成批写商品颜色记录
				WriteWarecolorbatch(response, htp1);
				break;
			case "clearwarecolor": // 清除商品的颜色记录 erp接口专用
				ClearWarecolor(response, htp1);
				break;
			case "warecoloralllist": // 获取所有商品颜色列表 app->erp专用
				GetWarecolorAllList(response, htp1);
				break;
			case "addwarecolor": // 增加商品颜色(excel导入商品颜色表)
				AddWarecolorRec(response, htp1);
				break;
			// ===========================================================================================

			case "listwareoutcost": // 显示批发出库费用明细
				ListWareoutcost(response, htp1);
				break;
			case "savewareoutcost": // 保存批发出库费用明细
				SaveWareoutcost(response, htp1);
				break;

			case "listwareincost": // 显示采购入库费用明细
				ListWareincost(response, htp1);
				break;
			case "savewareincost": // 保存采购入库费用明细
				SaveWareincost(response, htp1);
				break;

			case "wareoutcostlist": // 批发出库费用明细列表
				GetWareoutcostList(response, htp1);
				break;
			case "addwareoutcost": // 新增批发出库费用明细
				AddWareoutcostRec(response, htp1);
				break;
			case "delwareoutcostbyid": // 删除指定批发出库费用明细id信息
				DelWareoutcostByID(response, htp1);
				break;

			case "wareincostlist": // 采购入库费用明细列表
				GetWareincostList(response, htp1);
				break;
			case "addwareincost": // 新增采购入库费用明细
				AddWareincostRec(response, htp1);
				break;
			case "delwareincostbyid": // 删除指定采购入库费用明细id信息
				DelWareincostByID(response, htp1);
				break;

			// ===========================================================================================

			case "incomecurrlist": // 分页获取收款记录列表
				GetIncomecurrList(response, htp1);
				break;
			case "getincomecurrbyid": // 获取指定收款记录id信息
				GetIncomecurrByID(response, htp1);
				break;
			case "getincomecurrbyidx": // 获取指定收款记录id信息(后台打印)
				GetIncomecurrByID(response, htp1);
				break;
			case "delincomecurrbyid": // 删除指定收款记录id信息
				DelIncomecurrByID(response, htp1);
				break;
			case "updateincomecurrbyid": // 更新指定收款记录id信息
				UpdateIncomecurrByID(response, htp1);
				break;
			case "addincomecurr": // 新增收款记录
				AddIncomecurrRec(response, htp1);
				break;
			// ===========================================================================================

			case "custcurrlist": // 分页获取客户缴款记录列表
				GetCustcurrList(response, htp1);
				break;
			case "getcustcurrbyid": // 获取指定客户缴款记录id信息
				GetCustcurrByID(response, htp1);
				break;
			case "getcustcurrbyidx": // 获取指定客户缴款记录id信息(后台打印)
				GetCustcurrByID(response, htp1);
				break;
			case "delcustcurrbyid": // 删除指定客户缴款记录id信息
				DelCustcurrByID(response, htp1);
				break;
			case "updatecustcurrbyid": // 更新指定客户缴款记录id信息
				UpdateCustcurrByID(response, htp1);
				break;
			case "addcustcurr": // 新增客户缴款记录
				AddCustcurrRec(response, htp1);
				break;

			// //===========================================================================================
			case "incomedisclist": // 分页获取收款折让记录列表
				GetIncomediscList(response, htp1);
				break;
			case "getincomediscbyid": // 获取指定收款折让记录id信息
				GetIncomediscByID(response, htp1);
				break;
			case "delincomediscbyid": // 删除指定收款折让记录id信息
				DelIncomediscByID(response, htp1);
				break;
			case "updateincomediscbyid": // 更新指定收款折让记录id信息
				UpdateIncomediscByID(response, htp1);
				break;
			case "addincomedisc": // 新增收款折让记录
				AddIncomediscRec(response, htp1);
				break;
			// ===========================================================================================
			case "firstincomecurrlist": // 分页获取初始应收记录列表
				GetFirstIncomecurrList(response, htp1);
				break;
			case "getfirstincomecurrbyid": // 获取指定初始应收记录id信息
				GetFirstIncomecurrByID(response, htp1);
				break;
			case "delfirstincomecurrbyid": // 删除指定初始应收记录id信息
				DelFirstIncomecurrByID(response, htp1);
				break;
			case "updatefirstincomecurrbyid": // 更新指定初始应收记录id信息
				UpdateFirstIncomecurrByID(response, htp1);
				break;
			case "addfirstincomecurr": // 新增初始应收记录
				AddFirstIncomecurrRec(response, htp1);
				break;
			// ===========================================================================================
			case "incomecostlist": // 分页获取应收费用记录列表
				GetIncomecostList(response, htp1);
				break;
			case "getincomecostbyid": // 获取指定应收费用记录id信息
				GetIncomecostByID(response, htp1);
				break;
			case "getincomecostbyidx": // 获取指定应收费用记录id信息(后台打印)
				GetIncomecostByID(response, htp1);
				break;
			case "delincomecostbyid": // 删除指定应收费用记录id信息
				DelIncomecostByID(response, htp1);
				break;
			case "updateincomecostbyid": // 更新指定应收费用记录id信息
				UpdateIncomecostByID(response, htp1);
				break;
			case "addincomecost": // 新增应收费用记录
				AddIncomecostRec(response, htp1);
				break;
			//
			// //===========================================================================================
			case "paycurrlist": // 分页获取付款记录列表
				GetPaycurrList(response, htp1);
				break;
			case "getpaycurrbyid": // 获取指定付款记录id信息
				GetPaycurrByID(response, htp1);
				break;
			case "getpaycurrbyidx": // 获取指定付款记录id信息(后台打印用)
				GetPaycurrByID(response, htp1);
				break;
			case "delpaycurrbyid": // 删除指定付款记录id信息
				DelPaycurrByID(response, htp1);
				break;
			case "updatepaycurrbyid": // 更新指定付款记录id信息
				UpdatePaycurrByID(response, htp1);
				break;
			case "addpaycurr": // 新增付款记录
				AddPaycurrRec(response, htp1);
				break;

			// ===========================================================================================
			case "paydisclist": // 分页获取付款折让记录列表
				GetPaydiscList(response, htp1);
				break;
			case "getpaydiscbyid": // 获取指定付款折让记录id信息
				GetPaydiscByID(response, htp1);
				break;
			case "delpaydiscbyid": // 删除指定付款折让记录id信息
				DelPaydiscByID(response, htp1);
				break;
			case "updatepaydiscbyid": // 更新指定付款折让记录id信息
				UpdatePaydiscByID(response, htp1);
				break;
			case "addpaydisc": // 新增付款折让记录
				AddPaydiscRec(response, htp1);
				break;
			// ===========================================================================================
			case "firstpaycurrlist": // 分页获取初始应付款记录列表
				GetFirstPaycurrList(response, htp1);
				break;
			case "getfirstpaycurrbyid": // 获取指定初始应付款记录id信息
				GetFirstPaycurrByID(response, htp1);
				break;
			case "delfirstpaycurrbyid": // 删除指定初始应付款记录id信息
				DelFirstPaycurrByID(response, htp1);
				break;
			case "updatefirstpaycurrbyid": // 更新指定初始应付款记录id信息
				UpdateFirstPaycurrByID(response, htp1);
				break;
			case "addfirstpaycurr": // 新增初始应付款记录
				AddFirstPaycurrRec(response, htp1);
				break;

			// ===========================================================================================
			case "paycostlist": // 分页获取采购费用记录列表
				GetPaycostList(response, htp1);
				break;
			case "getpaycostbyid": // 获取指定采购费用记录id信息
				GetPaycostByID(response, htp1);
				break;
			case "getpaycostbyidx": // 获取指定采购费用记录id信息(后台打印)
				GetPaycostByID(response, htp1);
				break;
			case "delpaycostbyid": // 删除指定采购费用记录id信息
				DelPaycostByID(response, htp1);
				break;
			case "updatepaycostbyid": // 更新指定采购费用记录id信息
				UpdatePaycostByID(response, htp1);
				break;
			case "addpaycost": // 新增采购费用款记录
				AddPaycostRec(response, htp1);
				break;
			// //===========================================================================================
			case "housecostlist": // 分页获取店铺费用记录列表
				GetHousecostList(response, htp1);
				break;
			case "gethousecostbyid": // 获取指定店铺费用记录id信息
				GetHousecostByID(response, htp1);
				break;
			case "delhousecostbyid": // 删除指定店铺费用记录id信息
				DelHousecostByID(response, htp1);
				break;
			case "updatehousecostbyid": // 更新指定店铺费用记录id信息
				UpdateHousecostByID(response, htp1);
				break;
			case "addhousecost": // 新增店铺费用记录
				AddHousecostRec(response, htp1);
				break;
			case "housecostcancel": // 店铺费用撤单
				HousecostCancel(response, htp1);
				break;

			case "incomecurrcancel": // 销售收款撤单
				IncomecurrCancel(response, htp1);
				break;
			case "custcurrcancel": // 客户缴款撤单
				CustcurrCancel(response, htp1);
				break;

			case "incomecostcancel": // 销售费用撤单
				IncomecostCancel(response, htp1);
				break;
			case "firstincomecurrcancel": // 期初应收款撤单
				FirstIncomecurrCancel(response, htp1);
				break;

			case "paycurrcancel": // 采购付款撤单
				PaycurrCancel(response, htp1);
				break;
			case "paycostcancel": // 采购费用撤单
				PaycostCancel(response, htp1);
				break;
			case "firstpaycurrcancel": // 期初应付款撤单
				FirstPaycurrCancel(response, htp1);
				break;

			case "wareoutincomecurrlist":
				WareoutIncomecurrList(response, htp1); // 销售单收款记录
				break;

			case "warepeiincomecurrlist":
				WarepeiIncomecurrList(response, htp1); // 配货单收款记录
				break;

			case "incomecurrlink":
				IncomecurrLink(response, htp1); // 应收款勾兑记录
				break;

			case "incomecurrcheck":
				IncomecurrCheck(response, htp1); // 应收款勾单
				break;

			case "paycurrlink":
				PaycurrLink(response, htp1); // 应付款勾兑记录
				break;
			case "wareinpaycurrlist":
				WareinPaycurrList(response, htp1); // 采购单付款记录
				break;
			case "paycurrcheck":
				PaycurrCheck(response, htp1); // 应付款勾单
				break;

			// =============================================
			case "addcallback": // 新增回访记录
				AddCallbackRec(response, htp1);
				break;
			case "listcallback": // 回访记录列表
				ListCallbackRec(response, htp1);
				break;
			// //===========================================================================================
			case "userbacklist": // 分页获取用户反馈信息
				GetUserbackList(response, htp1);
				break;
			case "adduserback": // 新增用户反馈记录
				AddUserbackRec(response, htp1);
				break;
			case "updateuserbackbyid": // 更新指定用户反馈记录id
				UpdateUserbackByID(response, htp1);
				break;
			case "getuserbackbyid": // 获取指定用户反馈记录id
				GetUserbackByID(response, htp1);
				break;
			case "readuserbackbyid": // 置用户反馈记录id读标志
				ReadUserbackByID(response, htp1);
				break;
			// //
			// ===========================================================================================
			// case "getaccbalcurrbyid": // 返回账户当前余额
			// GetAccbalcurrbyid(response, htp1);
			// break;
			case "accregextendlist": // 分页获取推广的账户列表
				GetAccregextendList(response, htp1);
				break;
			// //
			// ===========================================================================================
			case "addcheckwork": // 增加考勤记录
				AddCheckworkRec(response, htp1);
				break;
			case "addcheckwork1": // 增加店长考勤记录
				AddCheckworkRec1(response, htp1);
				break;
			case "checkworklist": // 分页获取本店人员考勤记录
				GetCheckworkList(response, htp1);
				break;
			case "checkwork":
				GetCheckwork(response, htp1); // 获取考勤时间
				break;
			case "getcheckworkbyid":
				GetCheckworkbyid(response, htp1); // 根据id取考勤记录
				break;

			case "checkworklistmx": // 查询员工考勤明细
				GetCheckworkListmx(response, htp1);
				break;

			case "checkworklisthz": // 查询员工考勤汇总
				GetCheckworkListhz(response, htp1);
				break;
			case "totalcheckworkhz": // 汇总员工考勤记录
				TotalCheckworkhz(response, htp1);
				break;

			// ===========================================================================================

			case "notecheckbarcode": // 捡货条码扫入
				Notecheckbarcode(response, htp1);
				break;

			case "notecheckdiff": // 捡货条码验货差异明细
				Notecheckdiff(response, htp1);
				break;

			case "notechecklist": // 分页捡货商品明细列表
				Notechecklist(response, htp1);
				break;
			case "notecheckclear": // 清空捡货记录
				Notecheckclear(response, htp1);
				break;

			case "notecheckover": // 捡货完成
				Notecheckover(response, htp1);
				break;
			case "addallotoutmxls": // 从excel中新增调拨出库明细
				AddAllotoutmxls(response, htp1);
				break;

			case "addallotoutmbatch": // 成批新增调拨出库明细
				AddAllotoutmbatch(response, htp1);
				break;
			case "addwareoutmbatch": // 成批增加经销明细
				AddWareoutmbatch(response, htp1);
				break;
			case "addcustordermxls": // 从excel中新增客户订单明细
				AddCustordermxls(response, htp1);
				break;
			case "addprovordermxls": // 从excel中新增采购订单明细
				AddProvordermxls(response, htp1);
				break;
			case "addcustsalemxls": // 从excel中新增客户销售明细
				AddCustsalemxls(response, htp1);
				break;

			case "addcustordermbatch": // 成批新增客户订单明细
				AddCustordermbatch(response, htp1);
				break;
			case "addprovordermbatch": // 成批新增供应商订单明细
				AddProvordermbatch(response, htp1);
				break;
			case "addwareinmbatch": // 成批增加经销明细
				AddWareinmbatch(response, htp1);
				break;
			case "addallotordermbatch": // 成批新增调拨订货明细
				AddAllotordermbatch(response, htp1);
				break;
			case "addtempcheckmbatch": // 成批新增临时盘点明细
				AddTempcheckmbatch(response, htp1);
				break;
			case "addwarecheckmbatch": // 成批新增商品盘点明细
				AddWarecheckmbatch(response, htp1);
				break;

			case "addcustcheckmbatch": // 成批新增客户商品盘点明细
				AddCustcheckmbatch(response, htp1);
				break;

			case "addrefundaskmbatch": // 成批增加退货申请明细
				AddRefundaskmbatch(response, htp1);
				break;

			// case "addwarewarnmbatch": // 成批新增商品库存报警明细
			// AddWarewarnmbatch(response, htp1);
			// break;

			case "wareinbarcode": // 采购入库条码扫入
				Wareinbarcode(response, htp1);
				break;
			case "wareoutbarcode": // 销售出库条码扫入
				Wareoutbarcode(response, htp1);
				break;
			case "shopsalebarcode": // 商场销售条码扫入
				Shopsalebarcode(response, htp1);
				break;
			case "warepeibarcode": // 配货条码扫入
				Warepeibarcode(response, htp1);
				break;
			case "warepeicheckbarcode": // 配货捡货条码扫入
				Warepeicheckbarcode(response, htp1);
				break;
			case "refundaskbarcode": // 退货申请条码扫入
				Refundaskbarcode(response, htp1);
				break;
			case "firsthousebarcode": // 期初入库条码扫入
				Firsthousebarcode(response, htp1);
				break;
			case "custsalebarcode": // 客户销售条码扫入
				Custsalebarcode(response, htp1);
				break;

			case "tempcheckbarcode": // 临时盘点条码扫入
				Tempcheckbarcode(response, htp1);
				break;
			case "allotinbarcode": // 调拨入库条码扫入
				Allotinbarcode(response, htp1);
				break;
			case "allotoutbarcode": // 调拨出库条码扫入
				Allotoutbarcode(response, htp1);
				break;
			case "warecheckbarcode": // 库存盘点条码扫入
				Warecheckbarcode(response, htp1);
				break;
			case "provorderbarcode": // 采购订货条码扫入
				Provorderbarcode(response, htp1);
				break;
			case "custorderbarcode": // 客户订货条码扫入
				Custorderbarcode(response, htp1);
				break;
			case "allotorderbarcode": // 调拨订货条码扫入
				Allotorderbarcode(response, htp1);
				break;
			// ===========================================================================================
			case "mergecustorder": // 把客户订单合并生成采购订单
				MergeCustorder(response, htp1);
				break;

			case "custordermerge": // 合并客户订单
				CustorderMerge(response, htp1);
				break;
			case "provordermerge": // 合并采购订单
				ProvorderMerge(response, htp1);
				break;
			case "allotordermerge": // 合并调拨订单
				AllotorderMerge(response, htp1);
				break;

			case "getprovorderhbyid": // 获取指定采购订单记录id信息
				GetProvorderhByID(response, htp1);
				break;
			case "getprovorderhbyidx": // 获取指定采购订单记录id信息 后台打印
				GetProvorderhByID(response, htp1);
				break;
			case "updateprovorderhbyid": // 更新指定采购订单记录id信息
				UpdateProvorderhByID(response, htp1);
				break;
			case "updatecustorderhbyid": // 更新指定客户订单记录id信息
				UpdateCustorderhByID(response, htp1);
				break;

			case "addprovorderh": // 新增采购订单记录
				AddProvorderhRec(response, htp1);
				break;
			case "provorderhlist": // 分页获取采购订单记录列表
				GetProvorderhList(response, htp1);
				break;
			case "provorderhlist1": // 合并订单-分页获取采购订单记录列表
				GetProvorderhList1(response, htp1);
				break;
			case "delprovorderhbyid": // 删除指定采购订单记录id信息
				DelProvorderhByID(response, htp1);
				break;
			case "provorderhnotover": // 采购入库中分页显示当前可以载入的采购订单列表
				GetProvorderhNotOver(response, htp1);
				break;
			case "provorderhcancel": // 供应商订单撤单
				ProvorderhCancel(response, htp1);
				break;
			case "provordertoin": // 载入指定采购订单明细记录到采购入库，载入采购订单
				ProvOrderToIn(response, htp1);
				break;

			case "setprovorderhover": // 设置采购订单完成标志
				SetProvorderhover(response, htp1);
				break;

			case "loadrefundaskm": // 载入退货申请单明细记录到批发退库
				LoadRefundaskm(response, htp1);
				break;
			case "loadwarepeim": // 批发出库载入配货单明细记录
				LoadWarepeim(response, htp1);
				break;
			case "getrefundaskmsum": // 获取退货申请商品颜色尺码明细 ok
				GetRefundaskmsum(response, htp1);
				break;

			// ===========================================================================================
			// case "getprovordermbyid": // 获取指定采购订单明细id信息
			// GetProvordermByID(response, htp1);
			// break;
			// case "updateprovordermbyid": // 更新指定采购订单明细id信息
			// UpdateProvordermByID(response, htp1);
			// break;
			// case "delprovordermbyid": // 删除指定采购订单明细id信息
			// DelProvordermByID(response, htp1);
			// break;
			// case "addprovorderm": // 新增采购订单明细
			// AddProvordermRec(response, htp1);
			// break;
			//
			// ==================================

			case "addshopsaleh": // 新增商场开票记录
				AddShopsalehRec(response, htp1);
				break;
			case "shopsalehlist": // 分页获取商场开票记录列表
				GetShopsalehList(response, htp1);
				break;
			case "getshopsalehbyid": // 获取指定商场开票记录id信息
				GetShopsalehByID(response, htp1);
				break;
			case "getshopsalehbyidx": // 获取指定商场开票记录id信息(后台打印用)
				GetShopsalehByID(response, htp1);
				break;
			case "delshopsalehbyno": // 删除指定商场开票记录id信息(商场前台开票取消上传调用)
				// DelShopsalehByno(response, htp1);
				DelShopsalehByID(response, htp1);
				break;

			case "delshopsalehbyid": // 删除指定商场开票记录id信息
				DelShopsalehByID(response, htp1);
				break;
			case "updateshopsalehbyid": // 更新指定商场开票记录id信息
				UpdateShopsalehByID(response, htp1);
				break;
			case "getshopsalepay":
				GetShopsalepay(response, htp1); // 取商场零售单结算记录
				break;

			case "addshopsalem": // 新增商场开票明细
				AddShopsalemRec(response, htp1);
				break;
			case "shopsalemlist": // 获取商场开票明细列表
				GetShopsalemList(response, htp1);
				break;
			case "getshopsalembyid": // 获取指定商场开票明细id信息
				GetShopsalemByID(response, htp1);
				break;
			case "updateshopsalembyid": // 更新指定商场开票明细id信息
				UpdateShopsalemByID(response, htp1);
				break;
			case "delshopsalembyid": // 删除指定商场开票明细id信息
				DelShopsalemByID(response, htp1);
				break;

			// ===============================================

			case "offline2wareout": // 离线开票上传销售单
				Offline2Wareout(response, htp1);
				break;
			case "offline2shopsale": // 离线开票上传商场零售单
				Offline2Shopsale(response, htp1);
				break;

			case "excel2wareout": // excel转店铺零售单
				Excel2Wareout(response, htp1);
				break;

			case "json2firsthouse": // json格式转商品期初入库,erp转期初入库
				Json2Firsthouse(response, htp1);
				break;
			case "json2warein": // json格式转采购入库,erp转采购入库
				Json2Warein(response, htp1);
				break;
			case "json2provorder": // json格式转采购订单,erp转采购订单
				Json2Provorder(response, htp1);
				break;
			case "json2custorder": // json格式转客户订单,erp转客户订单
				Json2Custorder(response, htp1);
				break;
			case "json2allotorder": // json格式转调拨订单,erp转调拨订单
				Json2Allotorder(response, htp1);
				break;
			case "json2allotout": // json格式转调拨出库,erp转调拨出库
				Json2Allotout(response, htp1);
				break;
			case "json2allotin": // json格式转调拨入库,erp转调拨入库
				Json2Allotin(response, htp1);
				break;
			case "json2tempcheck": // json格式转临时盘点单,erp转临时盘点
				Json2Tempcheck(response, htp1);
				break;
			case "json2warecheck": // json格式转库存盘点单,erp转库存盘点
				Json2Warecheck(response, htp1);
				break;

			case "json2wareout": // json格式转销售出库,erp转销售出库
				Json2Wareout(response, htp1);
				break;

			case "addrefundouth": // 新增经销退库记录
				AddWareouthRec(response, htp1, 2);
				break;
			case "addwareouth": // 新增批发出库记录
				AddWareouthRec(response, htp1, 1);
				break;
			case "addwaresaleh": // 新增前台销售记录
				AddWareouthRec(response, htp1, 0);
				break;

			case "delwaresalembyid": // 删除指定前台销售明细id信息
				DelWareoutmByID(response, htp1);
				break;
			case "updatewareoutmbyid": // 更新指定批发出库明细id信息
				UpdateWareoutmByID(response, htp1, 1);
				break;
			case "updatewaresalembyid": // 更新指定前台销售明细id信息
				UpdateWareoutmByID(response, htp1, 0);
				break;

			case "delwareouthbyid": // 删除指定批发出库记录id信息
				DelWareouthByID(response, htp1);
				break;
			case "delwaresalehbyid": // 删除指定前台销售记录id信息
				DelWareouthByID(response, htp1);
				break;
			case "updatewareouthbyid": // 更新指定批发出库记录id信息
				UpdateWareouthByID(response, htp1);
				break;
			case "updatewaresalehbyid": // 更新指定前台销售记录id信息
				UpdateWaresalehByID(response, htp1);
				break;
			case "setwareoutfhtag": // 设置批发出库发货
				SetWareoutfhtag(response, htp1);
				break;
			// case "setwareoutpaylist": // 重新设置结算单结算方式
			// SetWareoutpaylist(response, htp1);
			// break;
			case "submitwareouth": // 提交销售台至收银台
				SubmitWareouth(response, htp1);
				break;
			case "getcustsalemsum": // 获取客户销售商品颜色尺码明细 ok
				GetCustsalemsum(response, htp1);
				break;
			case "addcustsalembatch": // 成批增加期初入库明细
				AddCustsalembatch(response, htp1);
				break;

			case "getwareoutmsum": // 获取销售出库商品颜色尺码明细 ok
				GetWareoutmsum(response, htp1);
				break;
			case "writewareoutmsum": // 保存销售出库商品颜色尺码明细 ok
				WriteWareoutmsum(response, htp1);
				break;
			case "wareoutmcolorsumlist": // 获取销售出库、退货明细汇总列表，按货号+颜色汇总 ok
				GetWareoutmcolorsumList(response, htp1);
				break;

			case "shopsalemcolorsumlist": // 获取商场零售明细汇总列表，按货号+颜色汇总 ok
				GetShopsalemcolorsumList(response, htp1);
				break;

			case "refundaskmcolorsumlist": // 获取退货申请汇总列表，按货号+颜色汇总 ok
				GetRefundaskmcolorsumList(response, htp1);
				break;

			case "writerefundaskmsum": // 保存退货申请商品颜色尺码明细 ok
				WriteRefundaskmsum(response, htp1);
				break;

			case "wareoutmlist": // 获取批发出库明细列表
				GetWareoutmList(response, htp1, 1);
				break;
			case "allotoutmlist": // 获取批发出库明细列表
				GetAllotoutmList(response, htp1, 1);
				break;
			case "allotinmlist": // 获取批发出库明细列表
				GetAllotinmList(response, htp1, 1);
				break;
			case "firsthousemlist": // 获取初始入库明细列表
				GetFirsthousemList(response, htp1);
				break;
			case "firstcustmlist": // 获取客户初始入库明细列表
				GetFirstcustmList(response, htp1);
				break;

			case "tempcheckmlist": // 获取临时盘点明细列表
				GetTempcheckmList(response, htp1, 1);
				break;

			case "custordermlist": // 获取客户订单明细列表
				GetCustordermList(response, htp1, 1);
				break;
			case "provordermlist": // 获取采购订单明细列表
				GetProvordermList(response, htp1, 1);
				break;
			case "wareinmlist": // 获取采购明细列表
				GetWareinmList(response, htp1, 1);
				break;

			case "writewaresaleman": // 写前台零售销售员
				WriteWaresaleman(response, htp1);
				break;

			case "waresalemanlist": // 列出当前店铺所有销售员,
				GetWaresalemanlist(response, htp1);
				break;
			case "getwaresalemanname": // 取前台零售单销售 员姓名列表
				GetWaresalemanname(response, htp1);
				break;
			case "getwaresalemannamex": // 取前台零售单销售 员姓名列表(后台打印专用)
				GetWaresalemanname(response, htp1);
				break;

			case "waresalemlist": // 获取前台销售列表
				GetWareoutmList(response, htp1, 0);
				break;
			case "getwareoutmbyid": // 获取指定批发出库明细id信息
				GetWareoutmByID(response, htp1, 1);
				break;
			case "getwaresalembyid": // 获取指定前台销售明细id信息
				GetWareoutmByID(response, htp1, 0);
				break;

			case "delwareoutmsum": // 删除销售出库的商品及颜色 ok
				DelWareoutmsum(response, htp1);
				break;
			case "wareouthlist": // 分页获取批发出库记录列表
				GetWareouthList(response, htp1, 1);
				break;
			case "waresalehlist": // 分页获取前台销售记录列表
				GetWareouthList(response, htp1, 0);
				break;
			case "refundouthlist": // 分页获取经销退库记录列表
				GetWareouthList(response, htp1, 2);
				break;

			case "delrefundaskmsum": // 删除销售出库的商品及颜色 ok
				DelRefundaskmsum(response, htp1);
				break;

			// ===============================================
			case "addfirsthouseh": // 分页获取期初入库记录列表
				AddFirsthousehRec(response, htp1);
				break;
			case "updatefirsthousehbyid": // 更新指定初始入库记录id信息
				UpdateFirsthousehByID(response, htp1);
				break;

			case "firsthousehlist": // 分页获取期初入库记录列表
				GetFirsthousehList(response, htp1);
				break;
			case "delfirsthousehbyid": // 删除指定期初入库记录id信息
				DelFirsthousehByID(response, htp1);
				break;

			case "getfirsthousehbyid": // 获取指定采购入库记录id信息
				GetFirsthousehByID(response, htp1);
				break;
			// ===============================================
			case "addfirstcusth": // 分页获取客户初始入库记录列表
				AddFirstcusthRec(response, htp1);
				break;
			case "updatefirstcusthbyid": // 更新指定初始入库记录id信息
				UpdateFirstcusthByID(response, htp1);
				break;

			case "firstcusthlist": // 分页获取客户初始入库记录列表
				GetFirstcusthList(response, htp1);
				break;
			case "delfirstcusthbyid": // 删除指定客户初始入库记录id信息
				DelFirstcusthByID(response, htp1);
				break;

			case "getfirstcusthbyid": // 获取指定客户初始入库记录id信息
				GetFirstcusthByID(response, htp1);
				break;
			// ===============================================
			case "addcustsaleh": // 分页获取客户销售记录列表
				AddCustsalehRec(response, htp1);
				break;
			case "updatecustsalehbyid": // 更新指定客户销售记录id信息
				UpdateCustsalehByID(response, htp1);
				break;

			case "custsalehlist": // 分页获取客户销售记录列表
				GetCustsalehList(response, htp1);
				break;
			case "delcustsalehbyid": // 删除指定客户销售记录id信息
				DelCustsalehByID(response, htp1);
				break;

			case "getcustsalehbyid": // 获取指定客户销售记录id信息
				GetCustsalehByID(response, htp1);
				break;

			// =================================================
			case "allotouthlist": // 分页获取调拨出库记录列表
				GetAllotouthList(response, htp1, 0);
				break;
			case "allotouthonlist": // 分页获取在途调拨出库记录列表（调拨入库收货时选择）
				GetAllotouthonList(response, htp1);
				break;

			case "delallotouthbyid": // 删除指定调拨出库记录id信息
				DelAllotouthByID(response, htp1);
				break;
			case "updateallotouthbyid": // 更新指定调拨出库记录id信息
				UpdateAllotouthByID(response, htp1);
				break;

			case "getallotouthbyid": // 获取指定调拨出库记录id信息
				GetAllotouthByID(response, htp1);
				break;
			case "getallotouthbyidx": // 获取指定调拨出库记录id信息(后台打印用) java
				GetAllotouthByID(response, htp1);
				break;
			// =================================================
			case "updateallotinhbyid": // 更新指定调拨入库记录id信息
				UpdateAllotinhByID(response, htp1);
				break;

			case "addallotinh": // 新增调拨入库记录，载入调拨出库
				AddAllotinhRec(response, htp1);
				break;

			case "allotinhlist": // 分页获取调拨入库记录列表
				GetAllotinhList(response, htp1, 0);
				break;
			case "delallotinhbyid": // 删除指定调拨入库记录id信息
				DelAllotinhByID(response, htp1);
				break;
			case "getallotinhbyid": // 获取指定调拨入库记录id信息
				GetAllotinhByID(response, htp1);
				break;
			case "getallotinhbyidx": // 获取指定调拨出库记录id信息(后台打印用) java
				GetAllotinhByID(response, htp1);
				break;
			// =================================================

			case "checkallotorderhbyid": // 审核/取消审核所有调拨订单记录id信息
				CheckAllotorderhByID(response, htp1);
				break;
			case "checkallotinhbyid": // 审核/取消审核所有调入记录id信息
				CheckAllotinhByID(response, htp1);
				break;
			case "checkallotouthbyid": // 审核/取消审核所有调出记录id信息
				CheckAllotouthByID(response, htp1);
				break;
			case "checktempcheckhbyid": // 审核/取消审核所有临时盘点id信息
				CheckTempcheckhByID(response, htp1);
				break;
			case "checkwarecheckhbyid": // 审核/取消审核所有库存盘点id信息
				CheckWarecheckhByID(response, htp1);
				break;
			case "checkfirsthousehbyid": // 审核/取消审核所有库存盘点id信息
				CheckFirsthousehByID(response, htp1);
				break;
			case "checkprovorderhbyid": // 审核/取消审核所有采购订单记录id信息
				CheckProvorderhByID(response, htp1);
				break;
			case "checkcustorderhbyid": // 审核/取消审核所有客户订单记录id信息
				CheckCustorderhByID(response, htp1);
				break;
			case "checkwarepeihbyid": // 审核/取消审核所有配送单记录id信息
				CheckWarepeihByID(response, htp1);
				break;

			case "checkwareinhbyid": // 审核/取消审核所有采购记录id信息
				CheckWareinhByID(response, htp1);
				break;
			case "checkpaycurrbyid": // 审核/取消审核所有采购付款记录id信息
				CheckPaycurrByID(response, htp1);
				break;
			case "checkpaydiscbyid": // 审核/取消审核所有采购折让记录id信息
				CheckPaycurrByID(response, htp1);
				break;
			case "checkincomecurrbyid": // 审核/取消审核所有销售收款记录id信息
				CheckIncomecurrByID(response, htp1);
				break;
			case "checkcustcurrbyid": // 审核/取消审核所有客户缴款记录id信息
				CheckCustcurrByID(response, htp1);
				break;
			case "checkincomediscbyid": // 审核/取消审核所有销售折让记录id信息
				CheckIncomecurrByID(response, htp1);
				break;
			case "checkfirstpaycurrbyid": // 审核/取消审核所有采购付款记录id信息
				CheckFirstPaycurrByID(response, htp1);
				break;
			case "checkfirstincomecurrbyid": // 审核/取消审核所有销售收款记录id信息
				CheckFirstIncomecurrByID(response, htp1);
				break;
			case "checkpaycostbyid": // 审核/取消审核所有采购费用记录id信息
				CheckPaycostByID(response, htp1);
				break;
			case "checkincomecostbyid": // 审核/取消审核所有销售费用记录id信息
				CheckIncomecostByID(response, htp1);
				break;
			case "checkhousecostbyid": // 审核/取消审核所有店铺费用记录id信息
				CheckHousecostByID(response, htp1);
				break;
			case "checkwareouthbyid": // 审核/取消审核所有销售记录id信息
				CheckWareouthByID(response, htp1);
				break;
			case "custorderhlist": // 分页获取客户订单记录列表
				GetCustorderhList(response, htp1);
				break;
			case "custorderhlist1": // 合并订单分页获取客户订单记录列表
				GetCustorderhList1(response, htp1);
				break;
			case "allotorderhlist1": // 合并订单分页获取调拨订单记录列表
				GetAllotorderhList1(response, htp1);
				break;

			case "delcustorderhbyid": // 删除指定客户订单记录id信息
				DelCustorderhByID(response, htp1);
				break;
			case "addcustorderh": // 新增客户订单记录
				AddCustorderhRec(response, htp1);
				break;
			case "refundaskhlist": // 分页退货申请单记录列表
				GetRefundaskhList(response, htp1, 0);
				break;

			case "refundaskhload": // 批发退库载入退货申请单记录列表
				GetRefundaskhList(response, htp1, 1);
				break;
			case "getrefundaskhbyid": // 获取指定客户退货申请单记录id信息
				GetRefundaskhByID(response, htp1);
				break;
			case "getrefundaskhbyidx": // 获取指定客户退货申请单记录id信息
				GetRefundaskhByID(response, htp1);
				break;
			case "updaterefundaskhbyid": // 更新指定客户退货申请单记录id信息
				UpdateRefundaskhByID(response, htp1);
				break;
			case "delrefundaskhbyid": // 删除指定客户退货申请单记录id信息
				DelRefundaskhByID(response, htp1);
				break;
			case "addrefundaskh": // 新增客户退货申请单记录
				AddRefundaskhRec(response, htp1);
				break;

			// =================================================
			case "getwareouthbyid": // 获取指定批发出库记录id信息 java
				GetWareouthByID(response, htp1, 1);
				break;
			case "getwareouthbyidx": // 获取指定批发出库记录id信息 java
				GetWareouthByID(response, htp1, 1);
				break;

			case "getwaresalehbyid": // 获取指定前台销售记录id信息 java
				GetWareouthByID(response, htp1, 0);
				break;
			case "getwaresalehbyidx": // 获取指定前台销售记录id信息(后台打印专用)
				GetWareouthByID(response, htp1, 0);
				break;

			case "getwareinhbyid": // 获取指定采购入库记录id信息
				GetWareinhByID(response, htp1);
				break;
			case "getwareinhbyidx": // 获取指定采购入库记录id信息(后台打印专用)
				GetWareinhByID(response, htp1);
				break;
			case "updatewareinhbyid": // 更新指定采购入库记录id信息
				UpdateWareinhByID(response, htp1);
				break;
			case "delwareinhbyid": // 删除指定采购入库记录id信息
				DelWareinhByID(response, htp1);
				break;
			case "wareinhlist": // 分页获取采购入库记录列表
				GetWareinhList(response, htp1, 0);
				break;
			case "refundinhlist": // 分页获取采购退库记录列表
				GetWareinhList(response, htp1, 1);
				break;

			case "addwareinh": // 新增采购入库记录
				AddWareinhRec(response, htp1, 0);
				break;
			case "addrefundinh": // 新增采购退库记录
				AddWareinhRec(response, htp1, 1);
				break;

			case "gettempcheckmsum": // 获取临时盘点商品颜色尺码明细 ok
				GetTempcheckmsum(response, htp1);
				break;
			case "getwarecheckmsum": // 获取商品盘点商品颜色尺码明细 ok
				GetWarecheckmsum(response, htp1);
				break;
			case "getcustcheckmsum": // 获取客户商品盘点商品颜色尺码明细 ok
				GetCustcheckmsum(response, htp1);
				break;

			case "custcheckbarcode": // 库存盘点条码扫入
				Custcheckbarcode(response, htp1);
				break;

			case "getwareinmsum": // 获取采购入库商品颜色尺码明细 ok
				GetWareinmsum(response, htp1);
				break;
			case "writewareinmsum": // 保存采购入库商品颜色尺码明细 ok
				WriteWareinmsum(response, htp1);
				break;
			case "wareinmcolorsumlist": // 获取采购入库、退货明细汇总列表，按货号+颜色汇总 ok
				GetWareinmcolorsumList(response, htp1);
				break;

			case "tempcheckmcolorsumlist": // 获取临时盘点明细汇总列表，按货号+颜色汇总 ok
				GetTempcheckmcolorsumList(response, htp1);
				break;

			case "warecheckmcolorsumlist": // 获取商品盘点汇总列表，按货号+颜色汇总
				GetWarecheckmcolorsumList(response, htp1);
				break;
			case "custcheckmcolorsumlist": // 获取客户商品盘点汇总列表，按货号+颜色汇总
				GetCustcheckmcolorsumList(response, htp1);
				break;

			// case "warewarnmcolorsumlist": // 获取商品库存报警汇总列表，按货号+颜色汇总
			// GetWarewarnmcolorsumList(response, htp1);
			// break;

			case "delwareinmsum": // 删除采购入库的商品及颜色 ok
				DelWareinmsum(response, htp1);
				break;

			case "getfirsthousemsum": // 获取期初入库商品颜色尺码明细 ok
				GetFirsthousemsum(response, htp1);
				break;

			case "getfirstcustmsum": // 获取期初客户入库商品颜色尺码明细 ok
				GetFirstcustmsum(response, htp1);
				break;

			case "getallotordermsum": // 获取调拨订单商品颜色尺码明细 ok
				GetAllotordermsum(response, htp1);
				break;
			case "getcustordermsum": // 获取客户订货商品颜色尺码明细 ok
				GetCustordermsum(response, htp1);
				break;
			case "getprovordermsum": // 获取采购订货商品颜色尺码明细 ok
				GetProvordermsum(response, htp1);
				break;

			case "writefirsthousemsum": // 保存期初入库商品颜色尺码明细 ok
				WriteFirsthousemsum(response, htp1);
				break;
			case "firsthousemcolorsumlist": // 获取期初入库汇总列表，按货号+颜色汇总 ok
				GetFirsthousemcolorsumList(response, htp1);
				break;
			case "delfirsthousemsum": // 删除期初入库的商品及颜色 ok
				DelFirsthousemsum(response, htp1);
				break;

			case "writefirstcustmsum": // 保存客户期初入库商品颜色尺码明细 ok
				WriteFirstcustmsum(response, htp1);
				break;
			case "firstcustmcolorsumlist": // 获取客户期初入库汇总列表，按货号+颜色汇总 ok
				GetFirstcustmcolorsumList(response, htp1);
				break;
			case "delfirstcustmsum": // 删除客户期初入库的商品及颜色 ok
				DelFirstcustmsum(response, htp1);
				break;

			case "writecustsalemsum": // 保存客户销售商品颜色尺码明细 ok
				WriteCustsalemsum(response, htp1);
				break;
			case "custsalemcolorsumlist": // 获取客户销售汇总列表，按货号+颜色汇总 ok
				GetCustsalemcolorsumList(response, htp1);
				break;
			case "delcustsalemsum": // 删除客户销售的商品及颜色 ok
				DelCustsalemsum(response, htp1);
				break;

			case "delprovordermsum": // 删除采购订货的商品及颜色 ok
				DelProvordermsum(response, htp1);
				break;

			case "delcustordermsum": // 删除客户订货的商品及颜色 ok
				DelCustordermsum(response, htp1);
				break;

			case "delallotordermsum": // 删除调拨订货的商品及颜色 ok
				DelAllotordermsum(response, htp1);
				break;
			case "deltempcheckmsum": // 删除临时盘点的商品及颜色 ok
				DelTempcheckmsum(response, htp1);
				break;
			case "delwarecheckmsum": // 删除商品盘点的商品及颜色 ok
				DelWarecheckmsum(response, htp1);
				break;

			case "delcustcheckmsum": // 删除客户商品盘点的商品及颜色 ok
				DelCustcheckmsum(response, htp1);
				break;

			// case "delwarewarnmsum": // 删除商品库存报警商品及颜色 ok
			// DelWarewarnmsum(response, htp1);
			// break;

			case "addfirsthousembatch": // 成批增加期初入库明细
				AddFirsthousembatch(response, htp1);
				break;

			// ===============================================
			case "addtempcheckh": // 新增临时盘点记录
				AddTempcheckhRec(response, htp1);
				break;

			case "tempcheckhlist": // 分页获取临时盘点记录列表
				GetTempcheckhList(response, htp1);
				break;
			case "gettempcheckhbyid": // 获取指定临时盘点记录id信息
				GetTempcheckhByID(response, htp1);
				break;
			case "gettempcheckhbyidx": // 获取指定临时盘点记录id信息(后台打印)
				GetTempcheckhByID(response, htp1);
				break;
			case "updatetempcheckhbyid": // 更新指定临时盘点记录id信息
				UpdateTempcheckhByID(response, htp1);
				break;
			case "deltempcheckhbyid": // 删除指定临时盘点记录id信息
				DelTempcheckhByID(response, htp1);
				break;

			case "tempcheckmerge": // 店铺盘点单合并临时盘点单
				MergeTempcheck(response, htp1);
				break;
			case "tempcheckmerge1": // 客户盘点单合并临时盘点单
				MergeTempcheck1(response, htp1);
				break;

			// ===============================================
			case "addallotouth": // 新增调拨出库记录
				AddAllotouthRec(response, htp1);
				break;
			case "getallotinmsum": // 获取调拨出库商品颜色尺码明细 ok
				GetAllotinmsum(response, htp1);
				break;

			case "getallotoutmsum": // 获取调拨出库商品颜色尺码明细 ok
				GetAllotoutmsum(response, htp1);
				break;
			case "writeallotoutmsum": // 保存调拨出库商品颜色尺码明细 ok
				WriteAllotoutmsum(response, htp1);
				break;

			case "writeallotordermsum": // 保存调拨订货商品颜色尺码明细 ok
				WriteAllotordermsum(response, htp1);
				break;
			case "writecustordermsum": // 保存客户订货商品颜色尺码明细 ok
				WriteCustordermsum(response, htp1);
				break;

			case "writeprovordermsum": // 保存采购订货商品颜色尺码明细 ok
				WriteProvordermsum(response, htp1);
				break;
			case "writetempcheckmsum": // 保存临时盘点商品颜色尺码明细 ok
				WriteTempcheckmsum(response, htp1);
				break;
			case "writewarecheckmsum": // 保存商品盘点商品颜色尺码明细 ok
				WriteWarecheckmsum(response, htp1);
				break;
			case "writecustcheckmsum": // 保存客户商品盘点商品颜色尺码明细 ok
				WriteCustcheckmsum(response, htp1);
				break;

			case "allotoutmcolorsumlist": // 获取调拨出库明细汇总列表，按货号+颜色汇总 ok
				GetAllotoutmcolorsumList(response, htp1);
				break;
			case "delallotoutmsum": // 删除调拨出库的商品及颜色 ok
				DelAllotoutmsum(response, htp1);
				break;

			case "allotinmcolorsumlist": // 获取调拨入库明细汇总列表，按货号+颜色汇总 ok
				GetAllotinmcolorsumList(response, htp1);
				break;

			case "allotordermcolorsumlist": // 获取调拨订货明细汇总列表，按货号+颜色汇总 ok
				GetAllotordermcolorsumList(response, htp1);
				break;

			case "custordermcolorsumlist": // 获取客户订货明细汇总列表，按货号+颜色汇总 ok
				GetCustordermcolorsumList(response, htp1);
				break;
			case "provordermcolorsumlist": // 获取采购订货明细汇总列表，按货号+颜色汇总 ok
				GetProvordermcolorsumList(response, htp1);
				break;

			// ===============================================

			case "writewareinmhand": // 保存采购入库商品颜色尺码明细 (整手输入) ok
				WriteWareinmhand(response, htp1);
				break;
			case "writewareoutmhand": // 保存零售批发出库商品颜色尺码明细 (整手输入) ok
				WriteWareoutmhand(response, htp1);
				break;
			case "writewarepeimhand": // 保存配货商品颜色尺码明细 (整手输入) ok
				WriteWarepeimhand(response, htp1);
				break;
			case "writerefundaskmhand": // 保存退货申请商品颜色尺码明细 (整手输入) ok
				WriteRefundaskmhand(response, htp1);
				break;
			case "writeprovordermhand": // 保存采购订货商品颜色尺码明细 (整手输入) ok
				WriteProvordermhand(response, htp1);
				break;
			case "writecustordermhand": // 保存客户订货商品颜色尺码明细 (整手输入) ok
				WriteCustordermhand(response, htp1);
				break;
			case "writeallotoutmhand": // 保存调拨出库商品颜色尺码明细 (整手输入) ok
				WriteAllotoutmhand(response, htp1);
				break;
			case "writeallotordermhand": // 保存调拨订货商品颜色尺码明细 (整手输入) ok
				WriteAllotordermhand(response, htp1);
				break;
			case "writetempcheckmhand": // 保存临时盘点商品颜色尺码明细 (整手输入) ok
				WriteTempcheckmhand(response, htp1);
				break;
			case "writefirsthousemhand": // 保存期初入库商品颜色尺码明细 (整手输入) ok
				WriteFirsthousemhand(response, htp1);
				break;
			case "writewarecheckmhand": // 保存商品盘点商品颜色尺码明细 (整手输入) ok
				WriteWarecheckmhand(response, htp1);
				break;
			case "writecustcheckmhand": // 保存客户商品盘点商品颜色尺码明细 (整手输入) ok
				WriteCustcheckmhand(response, htp1);
				break;
			case "writecustsalemhand": // 保存客户销售商品颜色尺码明细 (整手输入) ok
				WriteCustsalemhand(response, htp1);
				break;
			// =======================================
			case "warebarprintsumlist": // 获取商品条码打印列表 ok
				GetWarebarprintsumList(response, htp1);
				break;
			case "getwarebarprintsum": // 获取商品条码打印颜色尺码明细 ok
				GetWarebarprintsum(response, htp1);
				break;
			case "writewarebarprintsum": // 保存商品条码打印颜色尺码明细 ok
				WriteWarebarprintsum(response, htp1);
				break;
			case "delwarebarprintsum": // 删除商品条码打印商品及颜色 ok
				DelWarebarprintsum(response, htp1);
				break;
			case "warebarprintlist": // 获取商品条码打印列表 (后台打印用)
				GetWarebarprintList(response, htp1);
				break;
			case "clearwarebarprintsum": // 清空所有商品条码打印商品及颜色 ok
				ClearWarebarprintsum(response, htp1);
				break;
			case "changewarebarprintprice": // 更改商品条码打印商品的吊牌价ok
				ChangeWarebarprintprice(response, htp1);
				break;
			case "warebarprintloadkc": // 商品条码打印载入库存数
				LoadWarebarprintkc(response, htp1);
				break;

			case "wareoutloadnosendkc": // 批发出库载入未发货商品
				WareoutLoadnosendkc(response, htp1);
				break;
			case "warepeiloadnosendkc": // 配货单载入未发货商品
				WarepeiLoadnosendkc(response, htp1);
				break;

			case "loadwarebarprint": // 获取商品条码打印列表 (导出条码打印文件skydwarebar.txt专用)
				LoadWarebarprint(response, htp1);
				break;
			case "listwarebarprintnote": // 列取可以导入条码打印的单据记录表（采购入库，期初入库，临时盘点，调 拨入库）
				ListWarebarprintNote(response, htp1);
				break;
			case "loadwarebarprintnote": // 商品条码打印载入指定单据
				LoadWarebarprintnote(response, htp1);
				break;
			// ===========================================
			case "loadprintnoteno": // 载入单据打印明细
				LoadPrintNoteno(response, htp1);
				break;
			case "loadprintnotenox": // 载入单据打印明细(后台打印专用)
				LoadPrintNoteno(response, htp1);
				break;
			case "loadprintnotenoh": // 载入单据尺码模向打印明细(后台打印专用)
				LoadPrintNotenoh(response, htp1);
				break;
			// ==============================
			// case "listpeiuseware":
			// ListPhuseWare(response, htp1); //配货商品占用明细
			// break;

			case "warepeihlist": // 分页商品配货记录列表 fs=0
				GetWarepeihList(response, htp1);
				break;
			case "warepeihlist1": // 分页商品配货记录列表--捡货 fs=1
				GetWarepeihList1(response, htp1);
				break;
			case "warepeihlistpc": // 分页商品配货记录列表pc版商品配货单专用 fs=2
				GetWarepeihListpc(response, htp1);
				break;

			case "warepeihload": // pc版批发出库载入配货记录列表专用 fs=3
				GetWarepeihLoad(response, htp1);
				break;

			case "getwarepeihbyid": // 获取指定商品配货记录id信息
				GetWarepeihByID(response, htp1);
				break;
			case "getwarepeihbyidx": // 获取指定商品配货记录id信息(打印专用)
				GetWarepeihByID(response, htp1);
				break;
			case "updatewarepeihbyid": // 更新指定商品配货记录id信息
				UpdateWarepeihByID(response, htp1);
				break;
			case "delwarepeihbyid": // 删除指定商品配货记录id信息
				DelWarepeihByID(response, htp1);
				break;
			case "addwarepeih": // 新增商品配货记录
				AddWarepeihRec(response, htp1);
				break;

			case "changewarepeihbyid": // 更改商品配货记录状态
				ChangeWarepeihByID(response, htp1);
				break;

			case "warepei2wareout": // 配货单转批发出库单
				Warepei2Wareout(response, htp1);
				break;
			//
			// //===========================================================================================
			case "warepeimlist": // 获取商品已配货明细列表
				GetWarepeimList(response, htp1);
				break;
			case "warepeimsumlist": // 获取商品已配货汇总列表
				GetWarepeimsumList(response, htp1);
				break;
			case "warepeimlistwp": // 获取商品未配货明细列表
				GetWarepeimListwp(response, htp1);
				break;
			case "getwarepeimbyid": // 获取指定商品配货明细id信息
				GetWarepeimByID(response, htp1);
				break;
			case "updatewarepeimbyid": // 更新指定商品配货明细id信息
				UpdateWarepeimByID(response, htp1);
				break;
			case "delwarepeimbyid": // 删除指定商品配货明细id信息
				DelWarepeimByID(response, htp1);
				break;
			case "addwarepeim": // 新增商品配货明细
				AddWarepeimRec(response, htp1);
				break;

			case "warepeimchecksumlist": // 获取配货商品捡货尺码明细列表
				GetWarepeimchecksumList(response, htp1);
				break;

			case "getwarepeimchecksum": // 获取配货商品颜色捡货尺码明细
				GetWarepeimchecksum(response, htp1);
				break;
			case "writewarepeimchecksum": // 保存配货商品颜色捡货尺码明细
				WriteWarepeimchecksum(response, htp1);
				break;

			case "getwarepeimsum": // 显示指定商品配货明细
				GetWarepeimsum(response, htp1);
				break;
			case "writewarepeimsum": // 保存配货单商品
				WriteWarepeimsum(response, htp1);
				break;
			case "addwarepeimbatch": // 成批新增商品配货明细
				AddWarepeimbatch(response, htp1);
				break;
			case "changewarepeimdisc": // 更改商品配货折扣
				ChangeWarepeimdisc(response, htp1);
				break;
			case "delwarepeimsum": // 删除客户配货 ok
				DelWarepeimsum(response, htp1);
				break;
			case "ordertowarepeim": // 按未完订单自动配货
				OrdertoWarepeim(response, htp1);
				break;
			case "sizetowarepeim": // 按尺码自动配货
				SizetoWarepeim(response, htp1);
				break;
			// ===============================================
			case "clearwareinm": // 清除采购入库明细记录
				ClearWareinm(response, htp1);
				break;
			case "clearwareoutm": // 清除批发出库明细记录
				ClearWareoutm(response, htp1);
				break;

			case "addfirsthousemxls": // 从excel中新增初始入库明细
				AddFirsthousemxls(response, htp1);
				break;
			case "addwareinmxls": // 从excel中新增采购入库明细
				AddWareinmxls(response, htp1);
				break;
			case "listsysprogsys": // 取用户使用的系统名称 
				ListSysprogsys(response, htp1);
				break;

			case "listsysnamebyuserid": // 取用户使用的系统名称 ipad专用  未用
				ListSysnamebyuserid(response, htp1);
				break;
			case "listprognamebyuserid": // 取用户使用的程序名称 ipad专用 未用
				ListProgsnamebyuserid(response, htp1, 0);
				break;

			case "listsysnamebyuseridipd": // 取用户使用的系统名称 ipad专用 （新）
				ListSysnamebyuseridipd(response, htp1);
				break;
			case "listprognamebyuseridipd": // 取用户使用的程序名称 ipad专用（新）
				ListProgsnamebyuseridipd(response, htp1);
				break;

			case "listsysnamebyuseridpc": // 取用户使用的系统名称pc专用
				ListSysnamebyuseridpc(response, htp1);
				break;

			case "listprognamebyuseridpc": // 取用户使用的程序名称 pc专用
				ListProgsnamebyuserid(response, htp1, 1);
				break;

			case "listwaretocolorandsize": // 返回汇总表商品颜色尺码二维表格式
				ListWaretocolorandsize(response, htp1);
				break;

			case "copynote": // 载入单据记录(复制单据)
				CopyNote(response, htp1);
				break;
			case "clearnote": // 冲单
				ClearNote(response, htp1);
				break;

			case "listwareincheck": // 查询采购明细数据(核价)
				ListWareincheck(response, htp1);
				break;

			case "changewareincheck": // 更新采购明细价格(核价，按商品编码中的价格更新)
				ChangeWareincheck(response, htp1);
				break;
			case "updatewareincheck": // 按指定价格更新采购记录价格
				UpdateWareincheck(response, htp1);
				break;

			case "addhouseareaimg": // 新增店铺区位图片
				AddHouseareaImg(response, htp1);
				break;
			case "listhouseareaimg": // 显示店铺区位图片
				ListHouseareaImg(response, htp1);
				break;
			case "delhouseareaimg": // 删除店铺区位图片
				DelHouseareaImg(response, htp1);
				break;
			// ===================
			case "selectwareadjusthouse": // 全选或清除调价单店铺
				SelectWareadjusthouse(response, htp1);
				break;

			case "wareadjusthlist": // 分页获取商品调价记录列表
				GetWareadjusthList(response, htp1);
				break;
			case "getwareadjusthbyid": // 获取指定商品调价记录id信息
				GetWareadjusthByID(response, htp1);
				break;
			case "updatewareadjusthbyid": // 更新指定商品调价记录id信息
				UpdateWareadjusthByID(response, htp1);
				break;

			case "checkwareadjusth": // 调价单审核及取消
				CheckWareadjusth(response, htp1);
				break;

			case "delwareadjusthbyid": // 删除指定商品调价记录id信息
				DelWareadjusthByID(response, htp1);
				break;
			case "addwareadjusth": // 新增商品调价记录
				AddWareadjusthRec(response, htp1);
				break;

			case "wareadjustdetaillist": // 获取商品调价明细列表(pc端同步用)
				GetWareadjustdetailList(response, htp1);
				break;
			case "wareadjusthouselist": // 获取商品调价店铺列表(pc端同步用)
				GetWareadjusthouseList(response, htp1);
				break;

			case "wareadjustmlist": // 获取商品调价明细列表
				GetWareadjustmList(response, htp1);
				break;
			case "getwareadjustmbyid": // 获取指定商品调价明细id信息
				GetWareadjustmByID(response, htp1);
				break;
			case "updatewareadjustmbyid": // 更新指定商品调价明细id信息
				UpdateWareadjustmByID(response, htp1);
				break;
			case "delwareadjustmbyid": // 删除指定商品调价明细id信息
				DelWareadjustmByID(response, htp1);
				break;
			case "addwareadjustm": // 新增商品调价明细
				AddWareadjustmRec(response, htp1);
				break;
			case "addwareadjustmxls": // 从excel中新增商品调价单
				AddWareadjustmxls(response, htp1);
				break;

			case "wareadjustclist": // 获取商品调价明细适用店铺列表
				GetWareadjustcList(response, htp1);
				break;
			case "writewareadjustc": // 保存商品调价明细适用店铺列表
				WriteWareadjustc(response, htp1);
				break;
			case "changewareadjustmprice": // 成批调整商品调价单明细价格
				ChangeWareadjustmPrice(response, htp1);
				break;
			case "loadtowareadjustm": // 商品调价单成批载入商品
				LoadtoWareadjustm(response, htp1);
				break;
			// tools=================================
			case "testsaveimage": // 测试保存图片
				TestSaveimage(response, htp1);
				break;

			case "table2java":// 生成表class
				Table2Java(response, htp1);
				break;

			default:
				//				if (htp1.getAuthor().compareTo("yw3.8.15") == 0) {//getwareoutmsum
				//					JSONObject jsonObject1 = JSONObject.fromObject(htp1.getDatajson());
				//					if (jsonObject1.has("rows")) {
				//						htp1.setAction("writewareoutmsum");
				//						WriteWareoutmsum(response, htp1);
				//					} else {
				//						htp1.setAction("getwareoutmsum");
				//						GetWareoutmsum(response, htp1);
				//					}
				//				} else
				WriteResult(response, 0, "ERP接口未定义:" + action + "!");
				break;
			}
		} catch (IOException e) {
			//			e.printStackTrace();
			System.out.println(e.getMessage());
			WriteResult(response, 0, "网络异常，稍候请重试!");
		}
	}

	// 生成推荐注册二维码
	protected void Twobarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		Employe dal = new Employe();
		dal.setEpid(htp.getUserid());
		dal.doTwobarcode();
		WriteResult(response, dal.doTwobarcode(), dal.getErrmess());
	}

	// 获取消息记录数
	protected void GetMessstate(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long accid = htp.getMaccid();
		long userid = htp.getUserid();
		long levelid = htp.getLevelid();
		String qry = "select ";
		qry += "(select count(*) as num from sysnotice a where a.statetag=1 and not exists (select 1 from sysreadnotice b where b.epid=" + userid + " and a.ggid=b.ggid)) as messnum"; // --新公告
		qry += ",(select count(*) as num FROM acclink a where a.sellaccid=" + accid + " and a.tag=0 and a.accid<>" + accid + ") as buyernum";// --未处理的买家申请";
		qry += ",(select count(*) as num FROM acclink a where a.buyaccid=" + accid + " and a.tag=0 and a.accid<>" + accid + ") as sellernum"; // --未处理的卖家申请";
		qry += ",(select balcurr as balcurr from accreg where accid=" + accid + ") as balcurr"; // 枫杨果余额

		qry += ",(select count(*) as num from provorderh a join accconnect b on a.accid=b.buyaccid and a.provid=b.buyprovid where a.bj=0 and a.notedate>b.firstdate and b.sellcustid>0 and a.statetag=1 and b.sellaccid="
				+ accid + ") as jxsordnum"; // 当前账户的经销商订单数
		qry += ",(select count(*) as num from wareinh a join accconnect b on a.accid=b.buyaccid and a.provid=b.buyprovid where a.ntid=1 and a.bj=0 and a.notedate>b.firstdate and b.sellcustid>0 and a.statetag=1 and b.sellaccid="
				+ accid + ") as jxsthnum"; // 当前账户的经销商的采购退货单数
		qry += ",(select count(*) as num from wareouth a join accconnect b on a.accid=b.sellaccid and a.custid=b.sellcustid where a.bj=0 and a.notedate>b.firstdate and b.buyprovid>0 and a.statetag=1 and a.ntid=1 and b.buyaccid="
				+ accid + ") as gysfhdnum"; // 当前账户的供应商的发货单数

		qry += ",(select count(*) as num from allotouth a where a.statetag=1 and a.ywly=0 and a.cleartag=0 and (a.noteno1='' or a.noteno1 is null) and a.accid=" + accid;
		if (levelid != 0 && levelid != 4 && levelid != 5) // 系统管理员,经理,老板
																// 允许看所有的在途调拨单
			qry += " and exists (select 1 from employe b where a.tohouseid=b.houseid and b.epid=" + userid + ")";
		qry += ") as ztdcdnum"; // 在途调拨出库单数

		qry += ",(select count(*) as num from guestvip a  where a.accid=" + accid + " and a.vtid=0 and a.lytag=1) as vipnum"; // 新vip客人申请
		qry += " from dual";
		Table tb = new Table();
		// WriteResult("0", qry);
		tb = DbHelperSQL.Query(qry).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// v2版显示各页 fs=1云壹
	protected void ListProgPage(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int pageid = jsonObject.has("pageid") ? Integer.parseInt(jsonObject.getString("pageid")) : 0;
		int hytag = jsonObject.has("hytag") ? Integer.parseInt(jsonObject.getString("hytag")) : 2;

		int vertag = htp.getVertag();// jsonObject.has("hytag") ? Integer.parseInt(jsonObject.getString("hytag")) : 2;
		//0=零售，1=批发，2=零售+批发，3=迷你
		String devicetype = htp.getDevicetype();// jsonObject.has("devicetype") ? jsonObject.getString("devicetype") : "???";
		//devicetype:APH=安桌手机，IPH=苹果手机,IPD=苹果IPD,WIN=pc
		// long levelid = htp.getLevelid();

		//		System.out.println(devicetype);
		boolean syt = htp.getSalecashenabled() == 1 || htp.getPfcashenabled() == 1;
		long userid = htp.getUserid();
		String fieldlist = "a.progid,b.progname,b.progno,'' as sysname ,substr(b.grpname,2,20) as grpname ";
		//sysprog->csxxx
		//XXXXXXXXXXX
		//||||    |||__10迷你
		//||||    ||___9批发
		//||||    |____8零售
		//||||_________4PC
		//|||__________3IPAD
		//||___________2苹果
		//|____________1安卓

		String strwhere = " b.noused=0 and a.epid=" + userid + " and a.pageid=" + pageid;
		strwhere += "\n and exists (select 1 from employe a1 join roleprog b1 on a1.levelid=b1.levelid where a1.epid=" + userid + " and b1.fs=0 and a.progid=b1.progid) ";
		// sysprog->htag:程序属性0=通用(蓝窗),1=云壹，10=上下衣
		// sysprog->ptag:运行设备
		// 0=手机+pc端+ipad，1=pc端专用,2=手机，3=ipad,4=手机+pc,5=手机+ipad，6=pc+ipad
		//		strwhere += "\n and (b.ptag=0 or b.ptag=2 or b.ptag=4 or b.ptag=5) and b.htag<10 ";
		//		sysprog->tag:行业标志0=零售  1=批发  2=批零
		//		if (hytag == 0)//零售
		//			strwhere += " and (b.tag=0 or b.tag=2)";
		//		else if (hytag == 1)//批发
		//			strwhere += " and (b.tag=1 or b.tag=2)";

		if (!syt)
			strwhere += " and a.progid<>1207";  // (1207,'cash','收银台
		// if (pageid > 0)
		// qry += " and b.groupid=" + pageid;
		strwhere += " and b.grpid=" + pageid;
		if (vertag == 0)
			strwhere += " and substr(b.csxxx,8,1)='1' ";
		else if (vertag == 1)
			strwhere += " and substr(b.csxxx,9,1)='1' ";
		else if (vertag == 2)
			strwhere += " and (substr(b.csxxx,8,1)='1' or substr(b.csxxx,9,1)='1')";
		else if (vertag == 3)
			strwhere += " and substr(b.csxxx,10,1)='1' ";

		if (devicetype.equals("APH"))
			strwhere += " and substr(b.csxxx,1,1)='1' ";
		else if (devicetype.equals("IPH"))
			strwhere += " and substr(b.csxxx,2,1)='1' ";
		else if (devicetype.equals("IPD"))
			strwhere += " and substr(b.csxxx,3,1)='1' ";
		else if (devicetype.equals("WIN"))
			strwhere += " and substr(b.csxxx,4,1)='1' ";

		String order = "b.grpname,b.ordid,a.progid "; // and rownum<=23

		Sysfirstprog1 dal = new Sysfirstprog1();
		dal.setPageid(pageid);
		dal.setEpid(htp.getUserid());
		Table tb = new Table();
		tb = dal.GetTable(strwhere, fieldlist, order, hytag, vertag, devicetype);
		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 选择功能页的程序
	protected void SelectProgPage(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int pageid = jsonObject.has("pageid") ? Integer.parseInt(jsonObject.getString("pageid")) : 0;
		int hytag = jsonObject.has("hytag") ? Integer.parseInt(jsonObject.getString("hytag")) : 2;
		int vertag = htp.getVertag();// jsonObject.has("hytag") ? Integer.parseInt(jsonObject.getString("hytag")) : 2;
		//0=零售，1=批发，2=零售+批发，3=迷你
		String devicetype = htp.getDevicetype();// jsonObject.has("devicetype") ? jsonObject.getString("devicetype") : "???";
		//devicetype:APH=安桌手机，IPH=苹果手机,IPD=苹果IPD,WIN=pc

		long userid = htp.getUserid();
		boolean syt = htp.getSalecashenabled() == 1 || htp.getPfcashenabled() == 1;
		Sysfirstprog1 dal = new Sysfirstprog1();
		Table tb = new Table();
		dal.setPageid(pageid);
		dal.setEpid(userid);
		tb = dal.GetTable(hytag, syt, vertag, devicetype);// DbHelperSQL.GetTable(qry);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 保存我的首页功能(保存功能页)
	protected void SaveFirstPage(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int pageid = jsonObject.has("pageid") ? Integer.parseInt(jsonObject.getString("pageid")) : 0;
		// pageid:0=首页 1=销售 2=库存 3=账务 4=分析 5=基础
		Sysfirstprog1 dal = new Sysfirstprog1();
		dal.setPageid(pageid);
		dal.setEpid(htp.getUserid());
		WriteResult(response, dal.Append(jsonObject), dal.getErrmess());
	}

	// 获取指定账号id信息
	protected void GetAccregByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {

		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		if (accid == 0)
			accid = htp.getMaccid();
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "";
		String strwhere = " accid= " + accid;
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "ACCID,ACCNAME,REGDATE,MOBILE,COMPANY,LINKMAN,ADDRESS,EMAIL,TEL,PASSKEY,PASSWORD,NOUSED,TAG,LASTDATE,BALCURR,EPID,BEGINDATE ";
		fieldlist += ",to_char(REGDATE,'yyyy-mm-dd') as REGDATE0,to_char(beginDATE,'yyyy-mm-dd') as beginDATE0,to_char(calcdate,'yyyy-mm-dd') as calcdate0";
		fieldlist += ",decode(succtag,2,decode(lytag,0,'充值','买断'),'试用')||decode(usernum,0,'',usernum||'用户') as remark";

		Table tb = new Table();
		Accreg dal = new Accreg();
		tb = dal.GetList1(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 通过账号名称获取账号id accid
	protected void GetAccregbyname(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {

		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "";
		String accname = jsonObject.has("accname") ? jsonObject.getString("accname") : "";
		int all = jsonObject.has("all") ? Integer.parseInt(jsonObject.getString("all")) : 0;
		int qybj = jsonObject.has("qybj") ? Integer.parseInt(jsonObject.getString("qybj")) : 0;
		// qybj:0=枫杨，1=原创，2=上下衣
		accname = accname.toUpperCase().trim();

		// if (!Func.isNumAndEnCh(accname)) {
		// WriteResult(response, 0, "企业账号异常！");
		// return;
		// }
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "ACCID,ACCNAME,REGDATE,MOBILE,COMPANY,LINKMAN,ADDRESS,EMAIL,TEL,PASSKEY,PASSWORD,NOUSED,TAG,LASTDATE,BALCURR,EPID ";
		String strwhere = " accname= '" + accname + "'";
		// if (qybj >= 0)
		if (all == 0)
			strwhere += " and qybj=" + qybj;
		// if (all == 0)
		// strwhere += " and (lytag=0 or lytag=1)";// and lytag=0";

		Table tb = new Table();
		Accreg dal = new Accreg();
		tb = dal.GetList1(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 职员登录
	// protected void EmployeLogin()
	protected void EmployeLogin(HttpServletResponse response, HttpInfo htp, int fs) throws ServletException, IOException {
		Employe dal = new Employe();
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String epno = jsonObject.has("epno") ? jsonObject.getString("epno") : "";
		String deviceno = jsonObject.has("deviceno") ? jsonObject.getString("deviceno") : "";
		String devicetype = jsonObject.has("devicetype") ? jsonObject.getString("devicetype") : "???";
		String password = jsonObject.has("password") ? jsonObject.getString("password") : "";
		int qybj = jsonObject.has("qybj") ? Integer.parseInt(jsonObject.getString("qybj")) : 0;
		// qybj:0=枫杨，1=原创，2=上下衣
		int all = jsonObject.has("all") ? Integer.parseInt(jsonObject.getString("all")) : 0;
		// all:1=所有企业，0=qybj指定企业
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		dal.setAccid(accid);
		dal.setEpno(epno.toUpperCase().trim());
		dal.setPassword(password.toUpperCase());
		int ret = dal.Login(deviceno.toUpperCase(), devicetype, all, fs, qybj, htp.getIpaddress());
		if (ret == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, ret, dal.getErrmess());
	}

	// 经营汇总统计
	protected void TotalJyhztj(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		// String qxpublic = htp.getQxpublic();
		// String rolepublic = htp.getRolepublic();
		// * XXXXXXXXXXXXXXXXXXXXXXXXXXX
		// * 32 1=分店铺算成本
		// * ||||| |________________9 采购入库自动更新进价
		// * |||||___________________5-8 积分抵扣比例（4位）
		// * ||||____________________4 单价小数位数(0,1,2)
		// * |||_____________________3 启用最近售价
		// * ||______________________2 允许负数出库
		// * |_______________________1 启用权限控制
		int housecostbj = htp.getHousecostbj();
		// if (Func.subString(htp.getAccpublic(), 2, 1).equals("1"))
		// housecostbj = 1;
		String accbegindate = htp.getAccdate();// 账套开始使用日期
		int maxday = htp.getMaxday();
		// try {
		// maxday = Integer.parseInt(Func.subString(rolepublic, 4, 3));
		// } catch (Exception e) {
		// maxday = 0;
		// }
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, accbegindate, maxday);
		mindate = mdv.getMindate();
		// String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		vTotaljyhztj dal = new vTotaljyhztj();
		dal.setAccid(htp.getMaccid());
		dal.setNowdatetime(htp.getNowdatetime());
		dal.setMindate(mindate);
		dal.setMaxdate(maxdate);
		dal.setHouseid(houseid);
		dal.setAccdate(htp.getAccdate());
		if (dal.doTotal(housecostbj) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 生成表类
	protected void Table2Java(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// {"flyang":"20150107","rows":10,"page":1,"fieldlist":"brandid,brandname","sort":"brandid","order":"asc"}
		String tablename = jsonObject.has("tablename") ? jsonObject.getString("tablename") : "";
		// String path = jsonObject.has("path") ? jsonObject.getString("path") :
		// "";

		if (tablename.equals("")) {
			WriteResult(response, 0, "表名参数无效！");
			return;
		}
		if (JavaBeanUtils.Table2Java(tablename) == 1) {
			WriteResult(response, 1, "生成" + tablename + "成功！");

		} else {
			WriteResult(response, 0, "生成失败！");
		}
	}

	// 是在注册时判断企业账号是否可用
	protected void Accnamevalid(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String accname = jsonObject.has("accname") ? jsonObject.getString("accname") : "";
		Accreg dal = new Accreg();
		dal.setAccname(accname.toUpperCase());
		WriteResult(response, dal.doValid(), dal.getErrmess());
	}

	protected void AddAccregRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Accreg dal = new Accreg();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		if (dal.Append(0) == 0) {
			WriteResult(response, 0, dal.getErrmess());
			return;
		}
		WriteResult(response, 1, dal.getAccid().toString());
	}

	//获取最近登录的程序
	protected void GetNearloginlist(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String qry = "select a.progid,b.progname from (";
		qry += "\n select  progid,max(logindate) as logindate from";
		qry += "\n PROGLOGIN  where epid=" + htp.getUserid();
		qry += "\n group by progid";
		qry += "\n order by logindate desc";
		qry += "\n) a join sysprog b on a.progid=b.progid";
		qry += "\n where substr(b.csxxx,4,1)='1' and b.NOUSED=0 and rownum<=" + pagesize;

		Proglogin dal = new Proglogin();
		Table tb = new Table();
		tb = dal.GetTable(qry);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取最近注册用户
	protected void GetAccregnearlist(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// int page = jsonObject.has("page") ?
		// Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String qry = "select accname,company,regdate from (select accname,company,regdate from accreg order by regdate desc )  where rownum<=" + pagesize;
		Accreg dal = new Accreg();
		Table tb = new Table();
		tb = dal.GetTable(qry);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 取注册账户数和当前用户数
	protected void GetAccregcount1(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : htp.getNowdate();
		Accreg dal = new Accreg();
		Write(response, dal.doAccregcount1(nowdate));
	}

	// 取注册账户数和当前用户数
	protected void GetAccregcount1x(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : htp.getNowdate();
		Accreg dal = new Accreg();
		Write(response, dal.doAccregcount1x(nowdate));
	}

	// 取本期注册账户数及当前登录用户数
	protected void GetAccregcount2(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int yearid = jsonObject.has("yearid") ? Integer.parseInt(jsonObject.getString("yearid")) : 2016;
		int monthid = jsonObject.has("monthid") ? Integer.parseInt(jsonObject.getString("monthid")) : 0;
		// String mindate = yearid + "-01-01 00:00:00";
		// String maxdate = yearid + "-12-31 23:59:59";
		Accreg dal = new Accreg();
		dal.setNowdatetime(htp.getNowdatetime());
		Write(response, dal.doAccregcount2(yearid, monthid));
	}

	// 取本期注册账户数及当前登录用户数
	protected void GetAccregcount2x(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());  //yyyy-mm
		int yearid = jsonObject.has("yearid") ? Integer.parseInt(jsonObject.getString("yearid")) : Integer.parseInt(Func.subString(htp.getNowdate(), 1, 4));
		int monthid = jsonObject.has("monthid") ? Integer.parseInt(jsonObject.getString("monthid")) : Integer.parseInt(Func.subString(htp.getNowdate(), 6, 2));

		// String mindate = yearid + "-01-01 00:00:00";
		// String maxdate = yearid + "-12-31 23:59:59";
		Accreg dal = new Accreg();
		dal.setNowdatetime(htp.getNowdatetime());
		Write(response, dal.doAccregcount2x(yearid, monthid));
	}

	// 更改企业账号
	protected void UpdateAccregByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		// if (htp.getMaccid() == 1000 && htp.getUsername().equals("演示")) {
		// WriteResult(response, 0, "这是演示套账，不允许更改记录！");
		// return;
		// }

		Accreg dal = new Accreg();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		WriteResult(response, dal.Update(), dal.getErrmess());

	}

	// 充值记录文件
	protected void AddPaymoneyRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Paymoney dal = new Paymoney();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setZt(0);
		dal.setOrderno("");
		WriteResult(response, dal.Append(), dal.getErrmess());

	}

	// 上传操作日志。苹果跟踪错误用
	protected void UploadLogmess(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String messstr = jsonObject.has("messstr") ? jsonObject.getString("messstr") : "";
		// String title = jsonObject.has("title") ?
		// jsonObject.getString("title") : "";
		if (messstr.length() > 0) {
			LogUtils.LogWrite(htp.getUsername() + "accid=" + htp.getMaccid(), messstr, "run");
			//				WriteResult(response, 0, "操作异常！");
			//			else
			WriteResult(response, 1, "操作成功！");
		}
	}

	// 更新充值记录
	protected void UpdatePaymoneyByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		int zt = jsonObject.has("zt") ? Integer.parseInt(jsonObject.getString("zt")) : 1;
		String orderno = jsonObject.has("orderno") ? jsonObject.getString("orderno") : "";
		Paymoney dal = new Paymoney();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setZt(zt);
		dal.setId(id);
		dal.setOrderno(orderno);
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 加站点
	protected void AddAccuserbynameRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int num = jsonObject.has("num") ? Integer.parseInt(jsonObject.getString("num")) : 0;
		Accmoney dal = new Accmoney();
		String accname = jsonObject.has("accname") ? jsonObject.getString("accname") : "";
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		// dal.setUserid(htp.getUserid());
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		WriteResult(response, dal.Adduser(accname, num), dal.getErrmess());
	}

	// 按企业名称充值（后台充值专用）
	protected void AddAccmoneybynameRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int lytag = jsonObject.has("lytag") ? Integer.parseInt(jsonObject.getString("lytag")) : 0;
		Accmoney dal = new Accmoney();
		String accname = jsonObject.has("accname") ? jsonObject.getString("accname") : "";
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		// dal.setUserid(htp.getUserid());
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		WriteResult(response, dal.Recharge(accname, lytag, htp.getLevelid()), dal.getErrmess());
	}

	// 分页获取账户充值及扣费记录
	protected void GetAccmoneyList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String sort = " notedate desc,id";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (!findbox.equals(""))
			strwhere += " and a.REMARK like '%" + findbox + "%'";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.FS,a.NOTEDATE,a.HANDNO,a.CURR,a.PAYCURR,a.REMARK,a.LASTOP,a.LASTDATE,a.LY";
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Accmoney dal = new Accmoney();
		tb = dal.GetTable1(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 枫杨果余额转账
	protected void MoveAccmoneyRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String toaccname = jsonObject.has("toaccname") ? jsonObject.getString("toaccname") : "";
		float curr = jsonObject.has("curr") ? Float.parseFloat(jsonObject.getString("curr")) : 0;
		Accmoney dal = new Accmoney();
		dal.setAccid(htp.getMaccid());
		dal.setCurr(curr);
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Move(toaccname.toUpperCase()), dal.getErrmess());

	}

	// 校验当前用户设备号有效性,是否授权使用
	protected void Devicevalid(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String deviceno = jsonObject.has("deviceno") ?
		// jsonObject.getString("deviceno") : "";
		long progid = jsonObject.has("progid") ? Long.parseLong(jsonObject.getString("progid")) : 0;
		//		boolean syt = htp.getSalecashenabled() == 1 || htp.getPfcashenabled() == 1;

		if (progid == 1207 && htp.getSalecashenabled() != 1 && htp.getPfcashenabled() != 1) {//1207,'cash','收银台'
			WriteResult(response, 0, "收银台功能未启用！");
			return;
		} else if (progid == 1810 && htp.getOrdmeetenabled() != 1) { //发布订货会
			WriteResult(response, 0, "订货会功能未授权，请联系开发商！");
			return;
		}
		Proglogin dal = new Proglogin();

		dal.setEpid(htp.getUserid());
		dal.setProgid(progid);

		WriteResult(response, dal.Append(htp.getMaccid()), dal.getErrmess());

	}

	// 重设企业账户及系统管理员密码
	protected void ResetAccnamepwd(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		long accid = htp.getMaccid();

		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		if (accid0 > 0)
			accid = accid0;
		String pwd = jsonObject.has("pwd") ? jsonObject.getString("pwd") : "";
		String oldpwd = jsonObject.has("oldpwd") ? jsonObject.getString("oldpwd") : "";
		Accreg dal = new Accreg();
		dal.setAccid(accid);
		dal.setPassword(pwd.toUpperCase());
		WriteResult(response, dal.doReset(oldpwd.toUpperCase()), dal.getErrmess());

	}

	// 更改账户使用状态,系统全部禁用
	protected void ChangeAccregUsetag(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int usetag = jsonObject.has("usetag") ? Integer.parseInt(jsonObject.getString("usetag")) : 0;
		// usetag:0=在用 1=禁用
		Accreg dal = new Accreg();
		dal.setAccid(htp.getMaccid());
		dal.setNoused(usetag);
		WriteResult(response, dal.Update(), dal.getErrmess());

	}

	// 通过手机号查找注册账号及密码
	protected void GetAccnamebymobile(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String mobile = jsonObject.has("mobile") ? jsonObject.getString("mobile") : "";
		String smspwd = jsonObject.has("smspwd") ? jsonObject.getString("smspwd") : "";
		int qybj = jsonObject.has("qybj") ? Integer.parseInt(jsonObject.getString("qybj")) : 0;
		// qybj:0=枫杨，1=原创，2=上下衣
		Accreg dal = new Accreg();
		dal.setMobile(mobile);
		dal.setSmspwd(smspwd);
		dal.setQybj(qybj);

		if (dal.doFindbymobile() == 0) {
			WriteResult(response, 0, dal.getErrmess());

		} else {
			WriteResultJson(response, 1, dal.getErrmess());

		}
	}

	// 分页获取推广账户信息列表
	protected void GetAccregextendList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long epid = jsonObject.has("epid") ?
		// Long.parseLong(jsonObject.getString("wareid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String sort = " regdate desc,accid";// +order;
		long accid = htp.getMaccid();
		String strwhere = " b.accid=" + accid + " and a.accid<>" + accid;
		// if (epid > 0)
		strwhere += " and a.epid=" + htp.getUserid();
		if (!findbox.equals(""))
			strwhere += " and ( a.ACCNAME like '%" + findbox.toUpperCase() + "%' or a.COMPANY like '%" + findbox + "%'  or a.mobile like '%" + findbox + "%'  )";
		// if (company != "")
		// strwhere += " and a.COMPANY like '%" + company + "%'";
		// if (mobile != "")
		// strwhere += " and a.MOBILE like '%" + mobile + "%'";

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "A.ACCID,A.ACCNAME,A.REGDATE,A.MOBILE,A.COMPANY,A.LINKMAN,A.ADDRESS,A.EMAIL,A.TEL,A.NOUSED,A.TAG,A.BALCURR,A.EPID,B.EPNAME";
		fieldlist += ",decode(a.succtag,2,decode(a.lytag,0,'充值','买断')||a.usernum||'用户','试用') as remark";

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Accreg dal = new Accreg();

		tb = dal.GetTable1(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 统计各省份注册数
	protected void TotalAccregbyprovince(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		Accreg dal = new Accreg();

		Table tb = new Table();

		tb = dal.doTotalAccregbyprovince();

		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 企业账号分页列表
	protected void GetAccregList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int succtag = jsonObject.has("succtag") ? Integer.parseInt(jsonObject.getString("succtag")) : 4;
		// succtag:0=未回访，1=跟踪回访，2=成功，3=失败,4=所有
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : " regdate ";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " desc ";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		// String sort = " accname,accid ";
		sort += " " + order + ",accid";

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ACCID,a.ACCNAME,a.PASSWORD,a.NOUSED,a.TAG,a.BALCURR,a.regdate,a.linkman,a.mobile,a.company,b.epname,d.province,d.city,a.succtag";
		fieldlist += ",case a.qybj when 2 then '上下衣' when 1 then '原创' else decode(a.succtag,2,decode(a.lytag,0,'充值','买断')||a.usernum||'用户','') end as remark";

		// fieldlist += ",decode(a.lytag,0,'充值','买断')||a.usernum||'用户' as
		// remark0";
		String strwhere = " a.accid>0 ";
		// String strwhere = "accid=" + htp.getMaccid() + " and statetag=1";
		// succtag:0=未回访，1=跟踪回访，2=成功，3=失败,4=所有
		if (succtag < 4)
			strwhere += " and a.succtag=" + succtag;
		// levelid:
		// 0=系统管理员,1=店员（代理业务员）,2=店长（代理业务主管）,3=财务,4=经理,5=老板,6=督导（公司主管）,7=收银员（公司业务）,8=AD客服,9=库管(程序员)
		long levelid = htp.getLevelid();
		long userid = htp.getUserid();
		if (levelid == 1 || levelid == 7) // 业务员只允许查看自已的注册用户
		{
			strwhere += " and a.handmanid=" + userid;
		} else if (levelid == 2 || levelid == 6) // 业务主管可以查看本店铺所有业务员的注册用户
		{
			strwhere += " and exists (select 1 from employe a1 where a1.houseid=e.houseid and a1.epid=" + userid + ")";
		}
		if (findbox != null && !findbox.equals("")) {
			strwhere += "  and (a.accname like '%" + findbox.toUpperCase() + "%' or a.linkman like '%" + findbox + "%' or a.company like '%" + findbox + "%' or a.mobile like '%" + findbox + "%'";
			if (findbox.length() >= 3 && findbox.length() <= 6 && Func.isNumber(findbox))
				strwhere += " or a.accid=" + findbox;
			strwhere += ")";
		}
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// qp.setPageIndex(page);
		// qp.setPageSize(pagesize);
		// qp.setSortString(sort);

		Accreg dal = new Accreg();
		if (page < 0) {// 导出excel
			// String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			String retcs = dal.GetTable2Excel(qp, strwhere, fieldlist, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Table tb = new Table();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// ====================
	// 新增店长考勤记录
	protected void AddCheckworkRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int workid = jsonObject.has("workid") ? Integer.parseInt(jsonObject.getString("workid")) : 0;
		// classid班次 0=早班 1=中班 2=晚班
		// workid 0=上班 1=下班

		Checkwork dal = new Checkwork();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setLastop(htp.getUsername());
		// dal.setEpid(htp.getUserid());
		WriteResult(response, dal.Append(workid, htp.getPictjson()), dal.getErrmess());

	}

	// 新增店长考勤记录
	protected void AddCheckworkRec1(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int workid = jsonObject.has("workid") ? Integer.parseInt(jsonObject.getString("workid")) : 0;
		Checkwork dal = new Checkwork();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setLastop(htp.getUsername());
		// dal.setEpid(htp.getUserid());
		WriteResult(response, dal.Append(workid), dal.getErrmess());

	}

	// 获取考勤时间
	protected void GetCheckwork(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// int classid = jsonObject.has("classid") ?
		// Integer.parseInt(jsonObject.getString("classid")) : 0;
		// classid:0=早班 1=中班 2=晚班
		Checkwork dal = new Checkwork();
		// dal.setClassid(classid);
		dal.setEpid(htp.getUserid());
		if (dal.doGetcheckwork() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 根据id取考勤工记录
	protected void GetCheckworkbyid(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";

		String strwhere = " a.ID=" + id;
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "A.ID,A.EPID,B.EPNAME,A.CLASSDAY,A.CLASSID,A.CHECKID,A.UPTAG0,A.CHECKTIME0,A.IMAGENAME0,A.UPTAG1,A.CHECKTIME1,A.IMAGENAME1";
		Checkwork dal = new Checkwork();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 汇总员工考勤记录
	protected void TotalCheckworkhz(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vCheckworkhz dal = new vCheckworkhz();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setUserid(htp.getUserid());
		dal.setAccbegindate(htp.getAccdate());
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.doTotal(), dal.getErrmess());

	}

	// 查询员工考勤汇总
	protected void GetCheckworkListhz(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		vCheckworkhz dal = new vCheckworkhz();
		QueryParam qp = new QueryParam(page, pagesize, " houseid,epid ");

		Table tb = new Table();

		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 查询员工考勤明细
	protected void GetCheckworkListmx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String classday = jsonObject.has("classday") ? jsonObject.getString("classday") : "";
		// String fieldlist = jsonObject.has("fieldlist") ?
		// jsonObject.getString("fieldlist") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "*";

		String sort = " houseid,classid ";
		String fieldlist = " b.houseid,c.housename,a.classid,a.epid,b.epname,a.uptag0,a.checktime0,a.remark0,a.cdztbj0,a.uptag1,a.checktime1,a.remark1,a.cdztbj1,a.id ";
		// qry += " from checkwork a join employe b on a.epid=b.epid";
		// qry += " join warehouse c on b.houseid=c.houseid";
		String strwhere = " a.classday='" + classday + "' and c.accid=" + htp.getMaccid();
		if (houseid > 0)
			strwhere += " and b.houseid=" + houseid;
		if (!findbox.equals(""))
			strwhere += " and b.epname like '%" + findbox + "%' ";
		Checkwork dal = new Checkwork();
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 分页获取考勤本店铺记录列表
	protected void GetCheckworkList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String classday = jsonObject.has("classday") ? jsonObject.getString("classday") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "*";
		int classid = jsonObject.has("classid") ? Integer.parseInt(jsonObject.getString("classid")) : 0;
		String sort = " epid ";
		String strwhere = " a.statetag=1 and  exists (select 1 from employe c where a.houseid=c.houseid and c.epid=" + htp.getUserid() + ") ";
		// qry += " and b.classid=" + classid;
		if (!findbox.equals(""))
			strwhere += " and a.epname like '%" + findbox + "%' ";

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.epid,a.epname,b.uptag0,b.checktime0,b.remark0,b.uptag1,b.checktime1,b.remark1,b.id,b.checkid,b.days";

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Checkwork dal = new Checkwork();
		dal.setClassday(classday);
		dal.setClassid(classid);

		Table tb = new Table();

		tb = dal.GetTable1(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// ==============================
	// 我的首页角色功能统计
	protected void TotalFirstpage(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int dateid = jsonObject.has("dateid") ? Integer.parseInt(jsonObject.getString("dateid")) : 0;
		// dateid:0=本日，1=昨日，2=本周，3=本月
		int housecostbj = htp.getHousecostbj();
		// if (Func.subString(htp.getAccpublic(), 2, 1).equals("1"))
		// housecostbj = 1;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));

		int qxbj = htp.getQxbj(); // 首页不控制权限
		// if (Func.subString(qxpublic, 1, 1) == "1")
		// qxbj = 1;
		// Date nowday = Func.StrToDate(htp.getNowdate());

		vPagetotal dal = new vPagetotal();
		dal.setUserid(htp.getUserid());
		dal.setAccid(htp.getMaccid());
		dal.setLevelid(htp.getLevelid());
		dal.setPriceprec(priceprec);
		dal.setHousecostbj(housecostbj);
		dal.setQxbj(qxbj);
		dal.setDateid(dateid);
		dal.setCurrdatetimestr(htp.getNowdatetime());
		dal.setNowday(Func.StrToDate(htp.getNowdate()));
		dal.setCalcdate(htp.getCalcdate());
		dal.doTotalFirstpage();
		WriteResultJson(response, 1, dal.getErrmess());

	}

	// 我的首页角色功能统计 统计销售
	protected void TotalFirstpagexs(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int dateid = jsonObject.has("dateid") ? Integer.parseInt(jsonObject.getString("dateid")) : 0;
		// dateid:0=本日，1=昨日，2=本周，3=本月
		int housecostbj = htp.getHousecostbj();
		// if (Func.subString(htp.getAccpublic(), 2, 1).equals("1"))
		// housecostbj = 1;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));

		int qxbj = htp.getQxbj(); // 首页不控制权限
		// if (Func.subString(qxpublic, 1, 1) == "1")
		// qxbj = 1;
		// Date nowday = Func.StrToDate(htp.getNowdate());

		vPagetotal dal = new vPagetotal();
		dal.setUserid(htp.getUserid());
		dal.setAccid(htp.getMaccid());
		dal.setLevelid(htp.getLevelid());
		dal.setPriceprec(priceprec);
		dal.setHousecostbj(housecostbj);
		dal.setQxbj(qxbj);
		dal.setDateid(dateid);
		dal.setCurrdatetimestr(htp.getNowdatetime());
		dal.setNowday(Func.StrToDate(htp.getNowdate()));
		dal.setCalcdate(htp.getCalcdate());
		Table tb = new Table();

		tb = dal.GetTablexs();

		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 侧边菜单侧边菜单会员页功能统计
	protected void TotalVippage(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vPagetotal dal = new vPagetotal();
		// System.out.println("aaa:" + htp.getNowdate());
		dal.setUserid(htp.getUserid());
		dal.setAccid(htp.getMaccid());
		dal.setLevelid(htp.getLevelid());
		dal.setCurrdatetimestr(htp.getNowdatetime());
		dal.setNowday(Func.StrToDate(htp.getNowdate()));

		dal.doTotalVippage();
		WriteResultJson(response, 1, dal.getErrmess());
	}

	// 侧边菜单订货会功能统计
	protected void TotalOMorderpage(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		vPagetotal dal = new vPagetotal();
		System.out.println("aaa:" + htp.getNowdate());
		dal.setUserid(htp.getUserid());
		dal.setAccid(htp.getMaccid());
		dal.setLevelid(htp.getLevelid());
		dal.setCurrdatetimestr(htp.getNowdatetime());
		dal.setNowday(Func.StrToDate(htp.getNowdate()));

		dal.doTotalOMorderpage();
		WriteResultJson(response, 1, dal.getErrmess());
	}

	// 侧边菜单员工管理功能统计
	protected void TotalEmplpage(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int dateid = jsonObject.has("dateid") ? Integer.parseInt(jsonObject.getString("dateid")) : 0;
		// dateid:0=本日，1=昨日，2=本周，3=本月
		vPagetotal dal = new vPagetotal();
		//		System.out.println("aaa:" + htp.getNowdate());
		dal.setUserid(htp.getUserid());
		dal.setAccid(htp.getMaccid());
		dal.setLevelid(htp.getLevelid());
		dal.setCurrdatetimestr(htp.getNowdatetime());
		dal.setNowday(Func.StrToDate(htp.getNowdate()));
		dal.setDateid(dateid);
		dal.doTotalEmplpage();
		WriteResultJson(response, 1, dal.getErrmess());
	}

	// 上传职员头像logo
	protected void UploadEmployelogo(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		if (htp.getMaccid() == 1000 && htp.getUsername().equals("演示")) {
			WriteResult(response, 0, "这是演示套账，不允许更改头像！");
			return;
		}

		Employe dal = new Employe();
		dal.setEpid(htp.getUserid());
		WriteResult(response, dal.Uploadlogo(htp.getPictjson()), dal.getErrmess());
	}

	// ====================================================
	// 获取尺码分组名
	protected void GetSizeGroupnameList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String qry = " select distinct groupno from sizecode where accid=" + htp.getMaccid() + " and accid1=0 and sizeid1=0  order by groupno";
		Sizecode dal = new Sizecode();
		Table tb = new Table();
		tb = dal.GetTable(qry);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 写商品可用尺码
	protected void WriteWaresize(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		Warenosize dal = new Warenosize();
		dal.setWareid(wareid);

		WriteResult(response, dal.Append(jsonObject), dal.getErrmess());

	}

	// 获取商品尺码列表
	protected void GetWaresizeList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		Warenosize dal = new Warenosize();
		dal.setWareid(wareid);
		Table tb = new Table();
		tb = dal.GetTable(htp.MAX_SIZE);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取商品尺码库存
	protected void GetWaresizehouseList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long userid = htp.getUserid();
		vTotalCxkczy dal = new vTotalCxkczy();
		dal.setUserid(userid);
		dal.setAccid(htp.getMaccid());
		dal.setAccbegindate(htp.getAccdate());
		dal.setCxdatetime(htp.getNowdate());
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setHouseid(houseid);
		dal.doCxkczy();
		Table tb = new Table();
		String qry = " select a.sizeid,a.sizename,a.sizeno,nvl(b.amount,0) as amount,rownum as ROWNUMBER ";
		qry += "\n from sizecode a ";
		qry += "\n join warecode c on a.accid=c.accid and a.groupno=c.sizegroupno ";
		qry += "\n left outer join v_cxkczy_data b on a.sizeid=b.sizeid and  b.epid=" + userid;
		qry += "\n where a.accid=" + htp.getMaccid() + "  and a.statetag=1 and a.noused=0 and c.wareid=" + wareid;
		qry += "\n order by a.sizeno,a.sizeid";
		tb = dal.GetTable(qry);

		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 获取商品尺码类型列表
	protected void GetWaresizecodeList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = "a.sizeid,a.sizename,a.sizeno";
		String strwhere = " a.accid=" + htp.getMaccid() + " and a.STATETAG=1  and a.noused=0 and b.wareid=" + wareid;
		strwhere += " and not exists (select 1 from warenosize a1 where b.wareid=a1.wareid and a.sizeid=a1.sizeid)";
		String sort = "sizeno,sizename";

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Sizecode dal = new Sizecode();

		tb = dal.GetTable1(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取指定商品的颜色和尺码及库存
	// protected void GetWaresizeandcolor(HttpServletResponse response, HttpInfo
	// htp) throws ServletException, IOException {
	// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
	// long wareid = jsonObject.has("wareid") ?
	// Long.parseLong(jsonObject.getString("wareid")) : 0;
	//
	// }
	// 获取指定商品的颜色和尺码及库存(新)
	protected void GetWaresizeandcolor2(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;

		int nearsaleok = htp.getNearsale();
		int priceprec = htp.getPriceprec();
		int qxbj = htp.getQxbj();
		Warecolor dal = new Warecolor();
		// dal.setWareid(wareid);
		dal.setAccid(accid);
		dal.setUserid(htp.getUserid());
		dal.setCalcdate(htp.getCalcdate());
		if (dal.doGetWaresizeandcolor2(jsonObject, priceprec, nearsaleok, qxbj) == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 新增尺码类型记录
	protected void AddSizecodeRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// System.out.println("AddSizecodeRec 11111");
		Sizecode dal = new Sizecode();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccbegindate(htp.getAccdate());
		dal.setLastop(htp.getUsername());
		dal.setAccid(htp.getMaccid());
		dal.setStatetag(1);
		dal.setNoused(0);
		// dal.setAccbegindate(htp.getAccdate());
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 更新指定尺码id信息
	protected void UpdateSizecodeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		if (htp.getMaccid() == 1000 && htp.getUsername().equals("演示")) {
			WriteResult(response, 0, "这是演示套账，不允许更改记录！");
			return;
		}
		// long sizeid = jsonObject.has("sizeid") ?
		// Long.parseLong(jsonObject.getString("sizeid")) : 0;

		Sizecode dal = new Sizecode();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccbegindate(htp.getAccdate());
		// dal.setSizeid(sizeid);
		dal.setLastop(htp.getUsername());
		dal.setAccid(htp.getMaccid());
		// dal.setAccbegindate(htp.getAccdate());
		if (dal.Update() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 删除指定尺码
	protected void DelSizecodeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		if (htp.getMaccid() == 1000 && htp.getUsername().equals("演示")) {
			WriteResult(response, 0, "这是演示套账，不允许删除记录！");
			return;
		}
		long sizeid = jsonObject.has("sizeid") ? Long.parseLong(jsonObject.getString("sizeid")) : 0;

		Sizecode dal = new Sizecode();
		dal.setAccbegindate(htp.getAccdate());
		dal.setSizeid(sizeid);
		dal.setLastop(htp.getUsername());
		dal.setAccid(htp.getMaccid());
		// dal.setAccbegindate(htp.getAccdate());
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取指定尺码id信息
	protected void GetSizecodeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long sizeid = jsonObject.has("sizeid") ? Long.parseLong(jsonObject.getString("sizeid")) : 0;

		String strwhere = " sizeid=" + sizeid;
		strwhere += " and accid=" + htp.getMaccid();
		if (fieldlist.length() <= 0 || fieldlist.equals("*"))
			fieldlist = "SIZEID,SIZENAME,GROUPNO,SIZENO,ACCID,NOUSED,STATETAG,LASTOP,LYFS,ACCID1,SIZEID1,LASTDATE";
		fieldlist += ",f_sizeisused(sizeid,usedbj) as bj";

		Sizecode dal = new Sizecode();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取尺码类型列表
	protected void GetSizecodeList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int downbj = jsonObject.has("downbj") ? Integer.parseInt(jsonObject.getString("downbj")) : 0;
		int pctbbj = jsonObject.has("pctbbj") ? Integer.parseInt(jsonObject.getString("pctbbj")) : 0;
		int noused = jsonObject.has("noused") ? Integer.parseInt(jsonObject.getString("noused")) : 0;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String sizename = jsonObject.has("sizename") ? jsonObject.getString("sizename") : "";
		String sizeno = jsonObject.has("sizeno") ? jsonObject.getString("sizeno") : "";
		String groupno = jsonObject.has("groupno") ? jsonObject.getString("groupno") : "";

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		String sort = " groupno,sizeno,sizename,sizeid";
		String strwhere = " ACCID=" + htp.getMaccid();
		if (pctbbj == 0)
			strwhere += " and accid1=0";
		if (downbj == 0)
			strwhere += " and STATETAG=1";
		// if (noused == null || noused == "" || int.Parse(noused) > 2) noused =
		// "0";
		if (noused < 2)
			strwhere += " and NOUSED=" + noused;
		if (!Func.isNull(findbox))
			strwhere += " and ( SIZENAME like '%" + findbox + "%' or sizeno like '%" + findbox.toUpperCase() + "%')";

		if (!sizename.equals(""))
			strwhere += " and SIZENAME = '" + sizename + "'";
		if (!sizeno.equals(""))
			strwhere += " and SIZENO = '" + sizeno.toUpperCase() + "'";
		if (!groupno.equals(""))
			strwhere += " and GROUPNO = '" + groupno.toUpperCase() + "'";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "SIZEID,SIZENAME,GROUPNO,SIZENO,ACCID,NOUSED,STATETAG,LASTOP,LYFS,ACCID1,SIZEID1,LASTDATE";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Sizecode dal = new Sizecode();
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取尺码组列表
	protected void GetSizegroupList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String qry = "SELECT groupno, TRANSLATE (LTRIM (text, '~'), '*~', '*,') sizelist";
		qry += " FROM (SELECT ROW_NUMBER () OVER (PARTITION BY groupno ORDER BY groupno,lvl DESC) rn,groupno, text";
		qry += " FROM (SELECT groupno, LEVEL lvl, SYS_CONNECT_BY_PATH (sizename,'~') text";
		qry += " FROM (SELECT groupno, sizename,sizeno, ROW_NUMBER () OVER (PARTITION BY groupno ORDER BY groupno,sizeno,sizeid) x";
		qry += " FROM sizecode where accid=" + htp.getMaccid() + " and noused=0 and statetag=1 and accid1=0 ORDER BY groupno) a";
		qry += " CONNECT BY groupno = PRIOR groupno AND x - 1 = PRIOR x))";
		qry += " WHERE rn = 1";
		qry += " ORDER BY groupno";
		Sizecode dal = new Sizecode();
		Table tb = new Table();
		tb = dal.GetTable(qry);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取指定尺码码尺码列表
	protected void GetsizegroupsizeList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sizegroupno = jsonObject.has("sizegroupno") ? jsonObject.getString("sizegroupno") : "";
		Sizecode dal = new Sizecode();
		String fieldlist = " A.SIZEID,A.SIZENAME,A.SIZENO ";

		String strwhere = " a.statetag=1 and a.noused=0 and A.ACCID=" + htp.getMaccid() + " and a.groupno='" + sizegroupno + "'";
		String sort = " a.sizeno,a.sziename";
		Table tb = new Table();
		tb = dal.GetTable(strwhere, fieldlist, sort);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 取商品的颜色名称串
	protected void GetWarecolornameList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;

		Warecolor dal = new Warecolor();
		Table tb = new Table();
		dal.setWareid(wareid);
		tb = dal.GetTable();
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 判断商品编码是否存在
	protected void WarenoExists(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";

		Warecode dal = new Warecode();
		dal.setAccid(htp.getMaccid());
		dal.setWareno(wareno);
		dal.setWareid(wareid);
		WriteResult(response, dal.doWarenoExists(), dal.getErrmess());

	}

	// 增加商品时取默认颜色，默认尺码组，季节，尺码组列表
	protected void GetWareinfo(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		int fs = jsonObject.has("fs") ? Integer.parseInt(jsonObject.getString("fs")) : 0;
		Warecode dal = new Warecode();
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		Write(response, dal.doGetWareinfo(fs));

	}

	// 查询商品名称是否重复
	protected void FindWarecodebyname(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String warename = jsonObject.has("warename") ? jsonObject.getString("warename") : "";
		String qry = " select wareid from warecode ";
		qry += " where warename='" + warename + "' and statetag=1 and ACCID=" + htp.getMaccid();
		if (wareid > 0)
			qry += " and wareid<>" + wareid;
		if (DbHelperSQL.Exists(qry)) {
			WriteResult(response, 0, "商品名称:" + warename + " 已存在！");
		} else {
			WriteResult(response, 1, "商品名称:" + warename + " 可用！");
		}

	}

	// 判断商品尺码是否可以不用
	protected void Waresizeisused(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long sizeid = jsonObject.has("sizeid") ? Long.parseLong(jsonObject.getString("sizeid")) : 0;
		Sizecode dal = new Sizecode();
		dal.setSizeid(sizeid);
		WriteResult(response, dal.Isused(wareid), dal.getErrmess());

	}

	// 选择商品可用尺码
	protected void SelectWaresize(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String sizegroupno = jsonObject.has("sizegroupno") ? jsonObject.getString("sizegroupno") : "";
		String qry = "";

		if (wareid == 0) {
			qry = "select a.sizeid,a.sizename,a.sizeno, 1 as selbj,0 as lockbj from sizecode a where accid=" + htp.getMaccid() + " and groupno='" + sizegroupno + "'";
			qry += "  and a.statetag=1 and a.noused=0 and rownum<=" + htp.MAX_SIZE;

		} else {
			qry = "select a.sizeid,a.sizename,a.sizeno, 1 as selbj,f_waresizeisused(" + wareid + ",a.sizeid ) as lockbj";
			qry += " from sizecode a ";
			qry += "  join warecode b on a.accid=b.accid and a.groupno=b.sizegroupno";
			qry += "  where b.wareid=" + wareid + " and a.statetag=1 and a.noused=0 and a.accid=" + htp.getMaccid();
			qry += "  and not exists (select 1 from warenosize c where b.wareid=c.wareid and a.sizeid=c.sizeid)";
			qry += "  union all";
			qry += "  select a.sizeid,a.sizename,a.sizeno, 0 as selbj,0 as lockbj from sizecode a ";
			qry += "  join warecode b on a.accid=b.accid and a.groupno=b.sizegroupno";
			qry += "  where b.wareid=" + wareid + " and a.statetag=1 and a.noused=0 and a.accid=" + htp.getMaccid();
			qry += "  and  exists (select 1 from warenosize c where b.wareid=c.wareid and a.sizeid=c.sizeid)";
			qry += "  order by sizeno,sizeid";
		}
		Sizecode dal = new Sizecode();
		Table tb = new Table();
		tb = dal.GetTable(qry);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// ============================================
	// 新增商品条码记录
	protected void AddWarebarcodeRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Warebarcode dal = new Warebarcode();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setStatetag(1);
		WriteResult(response, dal.Append(), dal.getErrmess());

	}

	// 清除异常商品条码(erp->app)
	protected void ClearerrWarebarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		//		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Warebarcode dal = new Warebarcode();
		//		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.Clearerr(), dal.getErrmess());
	}

	// 同步商品条码(erp->app)
	protected void SyncWarebarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Warebarcode dal = new Warebarcode();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.Sync(), dal.getErrmess());
	}

	// 更新指定商品条码id信息
	protected void UpdateWarebarcodeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Warebarcode dal = new Warebarcode();
		dal.setAccid(htp.getMaccid());
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 删除指定商品条码id信息
	protected void DelWarebarcodeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String fieldlist = jsonObject.has("fieldlist") ?
		// jsonObject.getString("fieldlist") : "*";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		Double id = jsonObject.has("id") ? Double.parseDouble(jsonObject.getString("id")) : 0;
		Warebarcode dal = new Warebarcode();
		dal.setAccid(htp.getMaccid());
		dal.setBarcode(barcode);
		dal.setId(id);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 获取指定商品条码信息(配货用)
	protected void GetWarebarcodeByNo2(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String fieldlist = jsonObject.has("fieldlist") ?
		// jsonObject.getString("fieldlist") : "*";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Warebarcode dal = new Warebarcode();
		dal.setAccid(htp.getMaccid());
		dal.setBarcode(barcode);
		if (dal.doBarcode(noteno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取指定商品条码id信息
	protected void GetWarebarcodeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		Float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;

		Warebarcode dal = new Warebarcode();
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (barcode.length() > 0)
			strwhere += " and a.BARCODE='" + barcode + "'";
		if (id > 0)
			strwhere += " and a.id=" + id;
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.BARCODE,A.WAREID,B.WARENO,B.WARENAME,B.UNITS,A.COLORID,C.COLORNAME,A.SIZEID,D.SIZENAME,B.BRANDID,E.BRANDNAME,B.ENTERSALE,B.RETAILSALE,B.SALE1,B.SALE2,B.SALE3,B.SALE4,B.SALE5";
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 用于从excel中导入商品条码
	protected void AppendWarebarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Warebarcode dal = new Warebarcode();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.LoadFromXLS(), dal.getErrmess());
	}

	// 删除选定的商品条码
	protected void DelSelectWarebarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Warebarcode dal = new Warebarcode();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.DelSelect(jsonObject), dal.getErrmess());

	}

	// 获取商品条码导出打印格式文件 生成打印条码文件
	protected void WareBarCodetotext(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long brandid = jsonObject.has("brandid") ? Long.parseLong(jsonObject.getString("brandid")) : -1;
		long typeid = jsonObject.has("typeid") ? Long.parseLong(jsonObject.getString("typeid")) : -1;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		// String lastdate = jsonObject.has("lastdate") ?
		// jsonObject.getString("lastdate") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		String prodyear = jsonObject.has("prodyear") ? jsonObject.getString("prodyear") : "";
		String seasonname = jsonObject.has("seasonname") ? jsonObject.getString("seasonname") : "";
		String sizegroupno = jsonObject.has("sizegroupno") ? jsonObject.getString("sizegroupno") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : "";
		// String fieldlist = jsonObject.has("fieldlist") ?
		// jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = "a.barcode,b.warename,b.wareno,b.prodno,f.typename,e.brandname,c.colorname,d.sizename,b.retailsale,b.sale1,b.sale2,b.sale3,b.sale4,b.sale5";
		fieldlist += "  ,b.useritem1,b.useritem2,b.useritem3,b.useritem4,b.useritem5,b.zxbz,b.xdsm,b.gbbar";
		// qry += " from warebarcode a";
		// qry += " join warecode b on a.wareid=b.wareid";
		// qry += " join colorcode c on a.colorid=c.colorid";
		// qry += " join sizecode d on a.sizeid=d.sizeid";
		// qry += " join brand e on b.brandid=e.brandid";
		// qry += " join waretype f on b.typeid=f.typeid";

		String strwhere = " a.ACCID=" + htp.getMaccid();// +" and statetag=1";
		if (findbox.length() > 0)
			strwhere += " and (b.warename like '%" + findbox + "%' or b.wareno like '%" + findbox.toUpperCase() + "%' or a.BARCODE like '%" + findbox.toUpperCase() + "%')";

		if (wareid > 0)
			strwhere += " and a.wareid=" + wareid;
		if (wareno.length() > 0)
			strwhere += " and b.WARENO like '%" + wareno.toUpperCase() + "%'";
		if (barcode.length() > 0)
			strwhere += " and a.barcode like '%" + barcode.toUpperCase() + "%'";

		if (sizegroupno.length() > 0)
			strwhere += " and b.sizegroupno = '" + wareno + "'";
		if (seasonname.length() > 0)
			strwhere += " and b.seasonname = '" + seasonname + "'";
		if (prodyear.length() > 0)
			strwhere += " and b.prodyear = '" + prodyear + "'";
		if (brandid >= 0)
			strwhere += " and b.brandid=" + brandid;
		// if (typeid > 0) qry += " and b.typeid=" + typeid;
		if (typeid >= 0)
			if (typeid > 0 && typeid < 1000) {
				strwhere += "    and exists (select 1 from waretype t where t.typeid=b.typeid and t.p_typeid= " + typeid + ")";
			} else {
				strwhere += "    and b.typeid=" + typeid;
			}
		String sort = " wareno,barcode";
		Warebarcode dal = new Warebarcode();
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取商品条码列表
	protected void GetWareBarCodeList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long brandid = jsonObject.has("brandid") ? Long.parseLong(jsonObject.getString("brandid")) : -1;
		long typeid = jsonObject.has("typeid") ? Long.parseLong(jsonObject.getString("typeid")) : -1;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String lastdate = jsonObject.has("lastdate") ? jsonObject.getString("lastdate") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		String prodyear = jsonObject.has("prodyear") ? jsonObject.getString("prodyear") : "";
		String seasonname = jsonObject.has("seasonname") ? jsonObject.getString("seasonname") : "";
		String sizegroupno = jsonObject.has("sizegroupno") ? jsonObject.getString("sizegroupno") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		String sort = " barcode,rowid ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid() + " and b.statetag=1";
		if (findbox != null && !findbox.equals(""))
			strwhere += " and (b.warename like '%" + findbox + "%' or b.wareno like '%" + findbox.toUpperCase() + "%' or a.BARCODE like '%" + findbox.toUpperCase() + "%')";

		if (ywly < 2)
			strwhere += " and a.ywly=" + ywly;
		if (lastdate != null && !lastdate.equals(""))
			strwhere += " and a.lastdate>to_date('" + lastdate + "','yyyy-mm-dd hh24:mi:ss')";
		if (wareid > 0)
			strwhere += " and a.wareid=" + wareid;
		if (wareno != null && !wareno.equals(""))
			strwhere += " and b.WARENO like '%" + wareno.toUpperCase() + "%'";
		if (barcode != null && !barcode.equals(""))
			strwhere += " and a.barcode like '%" + barcode.toUpperCase() + "%'";

		if (sizegroupno != null && !sizegroupno.equals(""))
			strwhere += " and b.sizegroupno = '" + sizegroupno + "'";
		if (seasonname != null && !seasonname.equals(""))
			strwhere += " and b.seasonname = '" + seasonname + "'";
		if (prodyear != null && !prodyear.equals(""))
			strwhere += " and b.prodyear = '" + prodyear + "'";
		if (brandid >= 0)
			strwhere += " and b.brandid=" + brandid;
		// if (typeid > 0) qry += " and b.typeid=" + typeid;
		if (typeid >= 0)
			if (typeid > 0 && typeid < 1000) {
				strwhere += "    and exists (select 1 from waretype t where t.typeid=b.typeid and t.p_typeid= " + typeid + ")";
			} else {
				strwhere += "    and b.typeid=" + typeid;
			}

		if (fieldlist.equals("") || fieldlist.equals("*"))
			fieldlist = "A.BARCODE,A.WAREID,B.WARENO,B.WARENAME,B.UNITS,A.COLORID,C.COLORNAME,A.SIZEID,D.SIZENAME,B.BRANDID,E.BRANDNAME,A.LASTOP,A.LASTDATE,A.STATETAG";
		Warebarcode dal = new Warebarcode();
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();

		if (page < 0) {// 导出excel
			String retcs = dal.GetTable2Excel(qp, strwhere, fieldlist, jsonObject);
			// String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 自动产生条码
	protected void AutoWarebarcodeRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许自动产生条码！");
			return;
		}
		// long wareid = jsonObject.has("wareid") ?
		// Long.parseLong(jsonObject.getString("wareid")) : 0;
		// long typeid = jsonObject.has("typeid") ?
		// Long.parseLong(jsonObject.getString("typeid")) : 0;
		// long brandid = jsonObject.has("brandid") ?
		// Long.parseLong(jsonObject.getString("brandid")) : 0;
		// String prodyear = jsonObject.has("prodyear") ?
		// jsonObject.getString("prodyear") : "";
		// String seasonname = jsonObject.has("seasonname") ?
		// jsonObject.getString("seasonname") : "";
		// String sizegroupno = jsonObject.has("sizegroupno") ?
		// jsonObject.getString("sizegroupno") : "";
		// String wareno = jsonObject.has("wareno") ?
		// jsonObject.getString("wareno").replace("'", "''") : "";
		//
		// int newbj = jsonObject.has("newbj") ?
		// Integer.parseInt(jsonObject.getString("newbj")) : 0;
		// newbj:1=仅产生无条码商品
		// String qxpublic = htp.getQxpublic();
		// XXXXXXXXXXXXXXXXXXXXXXXXXXX
		// ||||| ||||||______________14 往来帐款分店铺核对
		// ||||| |||||_______________13 条码产生方式(0-9)
		// ||||| ||||________________12 自动生成货号
		// ||||| |||_________________11 配货单允许直接出库
		// ||||| ||__________________10 配货单审核后才允许拣货
		// ||||| |___________________9 采购入库自动更新进价
		// |||||_____________________5-8 积分抵扣比例（4位）
		// ||||______________________4 单价小数位数(0,1,2)
		// |||_______________________3 启用最近售价
		// ||________________________2 允许负数出库
		// |_________________________1 启用权限控制
		// int priceprec = Integer.parseInt(Func.subString(qxpublic, 4, 1));
		// int autowareno = Integer.parseInt(Func.subString(qxpublic, 12, 1));
		int barfs = htp.getBarfs();
		// try {
		// barfs = Integer.parseInt(Func.subString(qxpublic, 13, 1)); //
		// 条码产生方式
		// } catch (Exception e) {
		// barfs = 0;
		// }

		// barfs
		// 0=不产生条码
		// 1=货号+色码+尺码代号 2=货号+色码+尺码名称
		// 3=厂家编码+色码+尺码代号 4=厂家编码+色码+尺码名称
		// 5=货号+尺码代号+色码 6=货号+尺码名称+色码
		// 7=厂家编码+尺码代号+色码 8=厂家编码+尺码名称+色码
		// 9=8位自动序号
		Warebarcode dal = new Warebarcode();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(accid);
		dal.setLastop(lastop);

		// dal.setWareid(wareid);
		WriteResult(response, dal.doAutobarcode(barfs), dal.getErrmess());

	}

	// 用于从excel中导入品牌编码
	protected void AppendBrand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Brand dal = new Brand();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setNoused(0);
		dal.setStatetag(1);
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.doLoadfromExcel(), dal.getErrmess());

	}

	// 用于从excel中导入区域
	protected void AppendArea(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Area dal = new Area();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setNoused(0);
		dal.setStatetag(1);
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.doLoadfromExcel(), dal.getErrmess());
	}

	// 根据货号增加或更新商品信息 用于从excel中导入商品编码
	protected void AppendWarecode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int autowareno = htp.getAutowareno();
		int barfs = htp.getBarfs();
		Warecode dal = new Warecode();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		if (autowareno == 1) // 自动生成货号
			dal.setWareno("");
		dal.setLyfs(0);
		dal.setStatetag(1);
		dal.setBarfs(barfs);
		dal.setAutowareno(autowareno);
		WriteResult(response, dal.doLoadfromExcel(), dal.getErrmess());
	}

	// 增加商品编码主图
	protected void AddWarecodepicture(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许更改商品图片！");
			return;
		}
		Warecode dal = new Warecode();
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(lastop);
		WriteResult(response, dal.Updatepict(htp.getPictjson()), dal.getErrmess());
	}

	// 新增商品记录
	protected void AddWarecodeRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int fs = jsonObject.has("fs") ? Integer.parseInt(jsonObject.getString("fs")) : 0;
		// fs=1,erp同步编码用
		int autowareno = htp.getAutowareno();
		int barfs = htp.getBarfs();// Integer.parseInt(Func.subString(qxpublic,13, 1)); // 条码产生方式
		if (htp.getAutobar() == 0)// 1=新增商品自动产生条码
			barfs = 0;
		Warecode dal = new Warecode();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		if (autowareno == 1) // 自动生成货号
			dal.setWareno("");
		dal.setLyfs(0);
		dal.setNoused(0);
		dal.setStatetag(1);
		dal.setBarfs(barfs);
		dal.setAutowareno(autowareno);
		if (dal.Append(fs, jsonObject, htp.getPictjson()) == 1) {
			String responsestr = "\"msg\": \"" + dal.getWareid() + "\"" //
					+ ",\"WAREID\":\"" + dal.getWareid() + "\"" //
					+ ",\"WARENO\":\"" + dal.getWareno() + "\"" //
					+ ",\"IMAGENAME0\":\"" + dal.getImagename0() + "\"";
			WriteResultJson(response, 1, responsestr);
		} else
			WriteResult(response, 0, dal.getErrmess());
	}

	// 更新指定商品id信息
	protected void UpdateWarecodeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int fs = jsonObject.has("fs") ? Integer.parseInt(jsonObject.getString("fs")) : 0;
		// fs=1,erp同步编码用
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许修改记录！");
			return;
		}
		int barfs = htp.getBarfs();
		// long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		Warecode dal = new Warecode();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setWareid(wareid);
		dal.setAccid(accid);
		dal.setLastop(lastop);
		dal.setBarfs(barfs);
		// dal.setAutowareno(autowareno);
		WriteResult(response, dal.Update(fs), dal.getErrmess());
	}

	// 删除指定商品id信息
	protected void DelWarecodeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许删除记录！");
			return;
		}
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		Warecode dal = new Warecode();
		dal.setWareid(wareid);
		dal.setAccid(accid);
		dal.setLastop(lastop);
		WriteResult(response, dal.Delete(), dal.getErrmess());

	}

	// 获取指定商品id信息
	protected void GetWarecodeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		// String wareno = jsonObject.has("wareno") ?
		// jsonObject.getString("wareno").replace("'", "''") : "";
		String strwhere = " a.WAREID=" + wareid + " and a.STATETAG=1 and a.ACCID=" + htp.getMaccid();
		// if (!wareno.equals("")) {
		// strwhere += " and a.WARENO='" + wareno.toUpperCase() + "'";
		// }
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "A.WAREID,A.WARENO,A.WARENAME,A.UNITS,A.SHORTNAME,A.BRANDID,A.SEASONNAME,A.ACCID,A.TYPEID,A.PRODYEAR,G.AREANAME"//
					+ ",A.PRODNO,A.ENTERSALE,A.RETAILSALE,A.SALE1,A.SALE2,A.SALE3,A.SALE4,A.SALE5,A.REMARK,A.SIZEGROUPNO,A.USERITEM1,A.USERITEM2"//
					+ ",A.USERITEM3,A.USERITEM4,A.USERITEM5,A.LYFS,A.ACCID1,A.WAREID1,A.NOUSED,A.STATETAG,A.LASTOP,A.LASTDATE,A.DOWNENABLED,C.BRANDNAME,B.TYPENAME,B.FULLNAME,f.provname";
		// fieldlist += ",f_wareexistsofhouse(a.wareid) as bj";
		fieldlist += ",f_wareisused(a.wareid,a.usedbj) as bj";
		Warecode dal = new Warecode();
		Table tb = new Table();

		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		// System.out.println("aaaa=" + tb.getRowCount());
		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 首页商品扫码 查询商品信息及库存分布
	protected void FindWarecode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		Warebarcode dal = new Warebarcode();
		dal.setAccid(htp.getMaccid());
		dal.setBarcode(barcode.toUpperCase());
		dal.setWareno(wareno.toUpperCase());
		dal.setUserid(htp.getUserid());
		dal.setCalcdate(htp.getCalcdate());

		if (dal.doFindWarecode(htp.getQxbj()) == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}

	}

	// 根据商品编码获取商品信息
	protected void GetWarecodeByNO(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		Long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String strwhere = " a.wareno='" + wareno + "' and a.STATETAG=1 and a.ACCID=" + htp.getMaccid();
		if (wareid > 0)
			strwhere += " and a.wareid=" + wareid;
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "A.WAREID,A.WARENO,A.WARENAME,A.UNITS,A.SHORTNAME,A.BRANDID,A.SEASONNAME,A.ACCID,A.TYPEID,A.PRODYEAR,G.AREANAME"
					+ ",A.PRODNO,A.ENTERSALE,A.RETAILSALE,A.SALE1,A.SALE2,A.SALE3,A.SALE4,A.SALE5,A.REMARK,A.SIZEGROUPNO,A.USERITEM1,A.USERITEM2"
					+ ",A.USERITEM3,A.USERITEM4,A.USERITEM5,A.LYFS,A.ACCID1,A.WAREID1,A.NOUSED,A.STATETAG,A.LASTOP,A.LASTDATE,A.DOWNENABLED,C.BRANDNAME,B.TYPENAME,B.FULLNAME,f.provname";
		// fieldlist += ",f_wareexistsofhouse(a.wareid) as bj";
		fieldlist += ",f_wareisused(a.wareid,a.usedbj) as bj";
		Warecode dal = new Warecode();
		Table tb = new Table();

		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 获取商品列表 --帮助调用
	protected void GetWareCodeListHelp(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "wareno";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "asc";

		// long provid = jsonObject.has("provid") ?
		// Long.parseLong(jsonObject.getString("provid")) : -1;
		long omid = jsonObject.has("omid") ? Long.parseLong(jsonObject.getString("omid")) : 0;
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int qxbj = htp.getQxbj();
		// if (Func.subString(qxpublic, 1, 1).equals("1"))
		// qxbj = 1;// 启用权限管理
		// System.out.println("11111");
		Warecode dal = new Warecode();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setHouseid(houseid);
		Long houseid = dal.getHouseid();
		// Long areaid = dal.getAreaid();
		Long brandid = dal.getBrandid();
		Long typeid = dal.getTypeid();
		Long provid = dal.getProvid();
		// if (htp.getWarenotprov() == 1)// 20采购退货不判断商品供应商
		// provid = (long) -1;
		// Integer noused = dal.getNoused();
		String warename = dal.getWarename();
		String wareno = dal.getWareno();
		String seasonname = dal.getSeasonname();
		// String locale = dal.getLocale();
		// String prodno = dal.getProdno();
		String prodyear = dal.getProdyear();
		// String lastop = dal.getLastop();
		sort += " " + order + ",wareid";// +order;
		// System.out.println("22222");

		String strwhere = " a.ACCID=" + htp.getMaccid() + " and a.STATETAG=1";
		strwhere += " and a.NOUSED=0";// +noused;

		// if (warename != "") qry += " and a.warename like '%" + warename +
		// "%'";
		// if (wareno != null && wareno != "") qry += " and (a.wareno like '%" +
		// wareno + "%' or a.warename like '%" + wareno + "%' or c.brandname
		// like '%" + wareno + "%' or b.typename like '%" + wareno + "%')";

		if (!Func.isNull(warename))
			strwhere += " and (a.warename like '%" + warename + "%' or a.shortname like '%" + warename.toUpperCase() + "%')";
		// System.out.println("22222.1");

		if (!Func.isNull(wareno))
			strwhere += " and a.wareno like '%" + wareno.toUpperCase() + "%'";
		// System.out.println("22222.1.2");
		if (!Func.isNull(seasonname))
			strwhere += " and a.seasonname = '" + seasonname + "'";
		if (!Func.isNull(prodyear))
			strwhere += " and a.prodyear = '" + prodyear + "'";
		// if (prodno != null && prodno != "") qry += " and a.prodno like '%" +
		// prodno + "%'";
		if (brandid != null && brandid >= 0)
			strwhere += " and a.brandid = " + brandid;
		if (provid != null && provid >= 0)
			strwhere += " and a.provid = " + provid;
		// System.out.println("22222.1.3");

		if (typeid != null && typeid >= 0)
			if (typeid > 0 && typeid < 1000) {
				strwhere += "    and exists (select 1 from waretype t where t.typeid=a.typeid and t.p_typeid= " + typeid + ")";
			} else {
				strwhere += "    and a.typeid=" + typeid;
			}

		if (!Func.isNull(findbox)) {
			strwhere += " and (a.wareno like '%" + findbox.toUpperCase() + "%' or a.prodno like '%" + findbox.toUpperCase() + "%' or a.shortname like '%" + findbox.toUpperCase() + "%' or a.warename like '%" + findbox
					+ "%' or c.brandname like '%" + findbox + "%' or a.SEASONNAME like '%" + findbox + "%' or a.prodyear='" + findbox + "'";
			if (findbox.length() <= 6 && Func.isNumber(findbox)) {
				// Float retailsale = (float) 0;
				try {
					Float retailsale = Float.parseFloat(findbox);
					strwhere += " or a.retailsale=" + retailsale.toString();
				} catch (Exception e) {

				}
			}
			strwhere += ")";
		}
		// System.out.println("22222.2");

		if (qxbj == 1) // 1 启用权限控制
			strwhere += " and (a.brandid=0 or exists (select 1 from employebrand x where a.brandid=x.brandid and x.epid=" + htp.getUserid() + "))";
		if (provid != null && provid > 0) {
			strwhere += " and (a.provid=0 or a.provid=" + provid + ")";
		}
		if (omid > 0) // 转入订货员编码，不显示已订货的商品,表示订货会程序选商品， 要取所有商品
		{
			strwhere += " and not exists (select 1 from omwarecode x where a.wareid=x.wareid and x.omid=" + omid + ")";
			sort = " wareno,wareid ";
//		} else { // 只返回满足条件的100个商品
//			strwhere += " and rownum<100 ";
		}
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = " A.WAREID,A.WARENO,A.WARENAME,A.UNITS,A.SHORTNAME,A.BRANDID,A.SEASONNAME,A.ACCID,A.TYPEID"//
					+ ",A.PRODYEAR,A.PRODNO,A.ENTERSALE,A.RETAILSALE,A.SALE1,A.SALE2,A.SALE3,A.SALE4,A.SALE5,A.REMARK,A.SIZEGROUPNO"//
					+ ",A.LYFS,A.ACCID1,A.WAREID1,A.NOUSED,A.STATETAG,A.LASTOP,C.BRANDNAME,B.TYPENAME,B.FULLNAME,A.IMAGENAME0";
		fieldlist += ",a.ssdate,a.xsamount,a.lastdate";
		if (houseid != null && houseid > 0)
			fieldlist += ",case when h.retailsale is null then 0 else h.retailsale end as retailsale0";
		else
			fieldlist += ",a.retailsale as retailsale0";
		// System.out.println("33333");
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		//2017-11-28
		tb = dal.GetTable(qp, strwhere, fieldlist);
		//		String ss = DbHelperSQL.DataTable2Json(tb, qp.getTotalString()).replace("msg", "msg1");
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取商品记录表
	protected void GetWareCodeList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : "";
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : "";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "wareno";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		int downbj = jsonObject.has("downbj") ? Integer.parseInt(jsonObject.getString("downbj")) : 0;
		int havepicture = jsonObject.has("havepicture") ? Integer.parseInt(jsonObject.getString("havepicture")) : 2;
		int tjtag = jsonObject.has("tjtag") ? Integer.parseInt(jsonObject.getString("tjtag")) : 2;
		// tjtag:0-否 1-是 2-所有
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int qxbj = htp.getQxbj();

		sort += " " + order + ",wareid";
		// System.out.println("000");
		Warecode dal = new Warecode();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setHouseid(houseid);
		Long houseid = dal.getHouseid();
		Long areaid = dal.getAreaid();
		Long brandid = dal.getBrandid();
		Long typeid = dal.getTypeid();
		Long provid = dal.getProvid();
		Integer noused = dal.getNoused();
		String warename = dal.getWarename();
		String wareno = dal.getWareno();
		String seasonname = dal.getSeasonname();
		String locale = dal.getLocale();
		String prodno = dal.getProdno();
		String prodyear = dal.getProdyear();
		String lastop = dal.getLastop();
		String lastdate = dal.getLastdate();
		String barcode = dal.getBarcode();
		// if (noused == null)
		// noused = 0;
		// System.out.println("111");
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (downbj == 0)
			strwhere += " and a.STATETAG=1";

		if (!Func.isNull(mindate))
			strwhere += " and a.lastdate >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";

		if (!Func.isNull(maxdate))
			strwhere += " and a.lastdate <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (!Func.isNull(lastdate))
			strwhere += " and a.lastdate>to_date('" + lastdate + "','yyyy-mm-dd hh24:mi:ss')";

		if (noused != null && noused < 2)
			strwhere += " and a.noused=" + noused;
		if (tjtag < 2)
			strwhere += " and a.tjtag=" + tjtag;

		if (!Func.isNull(findbox))
			strwhere += " and (a.warename like '%" + findbox + "%' or a.shortname like '%" + findbox.toUpperCase() + "%' or a.wareno like '%" + findbox.toUpperCase() + "%')";
		// System.out.println("222");
		if (!Func.isNull(warename))
			strwhere += " and (a.warename like '%" + warename + "%' or a.shortname like '%" + warename.toUpperCase() + "%')";
		if (!Func.isNull(wareno))
			strwhere += " and a.wareno like '%" + wareno.toUpperCase() + "%'";
		if (!Func.isNull(seasonname))
			strwhere += " and a.seasonname = '" + seasonname + "'";
		if (!Func.isNull(prodyear))
			strwhere += " and a.prodyear = '" + prodyear + "'";
		if (locale != null && !locale.equals(""))
			strwhere += "  and a.locale like '%" + locale + "%'";
		if (prodno != null && !prodno.equals(""))
			strwhere += " and a.prodno like '%" + prodno + "%'";
		if (areaid != null && areaid >= 0)
			strwhere += " and a.areaid = " + areaid;
		if (brandid != null && brandid >= 0)
			strwhere += " and a.brandid = " + brandid;
		if (provid != null && provid >= 0)
			strwhere += " and a.provid = " + provid;
		if (typeid != null && typeid >= 0)
			if (typeid > 0 && typeid < 1000) {
				strwhere += "    and exists (select 1 from waretype t where t.typeid=a.typeid and t.p_typeid= " + typeid + ")";
			} else {
				strwhere += "    and a.typeid=" + typeid;
			}
		if (!Func.isNull(lastop))
			strwhere += " and a.lastop like '%" + lastop + "%'";
		// if (typeid>0) qry += " and a.typeid = " + typeid;
		if (havepicture == 0) // 只返回无图片的商品
		{
			strwhere += " and (length(a.imagename0)=0 or a.imagename0 is null ) ";
		} else if (havepicture == 1) // 只返回有图片的商品
		{
			// qry += " and (length(a.imagename)>0 or length(a.imagename0)>0)
			// and not a.imagename is null and not a.imagename0 is null ";
			strwhere += " and length(a.imagename0)>0 and not a.imagename0 is null ";
		}
		// System.out.println("333");
		if (qxbj == 1 && downbj == 0) // 1 启用权限控制
		{
			strwhere += " and (a.brandid=0 or exists (select 1 from employebrand x where a.brandid=x.brandid and x.epid=" + htp.getUserid() + "))";
		}
		if (barcode.length() > 0) {
			strwhere += " and exists (select 1 from warebarcode y where a.accid=y.accid and a.wareid=y.wareid and y.statetag=1 and y.barcode like '%" + barcode + "%')";
		}
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = " A.WAREID,A.WARENO,A.WARENAME,A.UNITS,A.SHORTNAME,A.BRANDID,A.SEASONNAME,A.ACCID,A.TYPEID,"//
					+ "A.PRODYEAR,A.PRODNO,A.ENTERSALE,A.RETAILSALE,A.SALE1,A.SALE2,A.SALE3,A.SALE4,A.SALE5,A.REMARK,A.SIZEGROUPNO," //
					+ "A.LYFS,A.ACCID1,A.WAREID1,A.NOUSED,A.STATETAG,A.LASTOP,A.LASTDATE,A.DOWNENABLED,C.BRANDNAME,B.TYPENAME,B.FULLNAME,F.PROVNAME,G.AREANAME";
		if (houseid != null && houseid > 0)
			fieldlist += ",case when h.retailsale is null then 0 else h.retailsale end as retailsale0";
		else
			fieldlist += ",a.retailsale as retailsale0";
		// System.out.println("444");

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setCalcfield("f_getwarecolorname(wareid) as colornamelist");

		if (page < 0) {// 导出excel
			// String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			String retcs = dal.GetTable2Excel(qp, strwhere, fieldlist, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	protected void GbbartoBarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {

		String qry = "begin";
		qry += "   p_gbtobarcode(" + htp.getMaccid() + ");";
		qry += " end;";
		if (DbHelperSQL.ExecuteSql(qry, 1800) < 0) {
			WriteResult(response, 0, "操作异常！");
		} else {
			WriteResult(response, 1, "操作成功！");
		}
	}

	// 商品选择列表(看图开单)
	protected void SelectWarecode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int kdbj = jsonObject.has("kdbj") ? Integer.parseInt(jsonObject.getString("kdbj")) : 2;
		// kdbj:0=未开单，1=已开单，2=所有
		int noteid = jsonObject.has("noteid") ? Integer.parseInt(jsonObject.getString("noteid")) : 0;
		// 单据类型noteid:0=零售,1=批发或退货， 2=采购，3=调出
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		// 排序项目sortid:0=价格，1=销量，2=库存，3=类别，4=上市日期

		int qxbj = htp.getQxbj();

		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		String sort = "";
		if (sortid == 1)
			sort = " xsamount " + order;
		else if (sortid == 2)
			sort = " kcamount " + order;
		else if (sortid == 3)
			sort = " typename " + order;
		else if (sortid == 4)
			sort = " ssdate " + order;
		else
			sort = " retailsale " + order;
		sort += ",wareno,wareid";

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Wareouth dal = new Wareouth();
		dal.setNoteno(noteno);
		dal.setHouseid(houseid);
		dal.setAccid(htp.getMaccid());
		dal.setRemark(findbox);
		dal.setCalcdate(htp.getCalcdate());
		if (dal.doSelectWarecode(qp, noteid, sortid, kdbj, qxbj, htp.getUserid()) == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			// WriteResultJson(response, 1, dal.getErrmess());
			Write(response, dal.getErrmess());
		}
	}

	// 获取商品店铺零售价
	protected void HousesalepriceList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = " a.houseid,b.housename,b.retailsale";
		String strwhere = " a.wareid=" + wareid;
		String sort = "houseid";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Housesaleprice dal = new Housesaleprice();
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取店铺商品零售价列表
	protected void HouseWarecodelist(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Warecode dal = new Warecode();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类

		long areaid = dal.getAreaid();
		long brandid = dal.getBrandid();
		long typeid = dal.getTypeid();
		long provid = dal.getProvid();
		String warename = dal.getWarename();
		String wareno = dal.getWareno();
		String seasonname = dal.getSeasonname();
		String locale = dal.getLocale();
		String prodno = dal.getProdno();
		String prodyear = dal.getProdyear();

		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = "  a.wareid,a.warename,a.wareno,a.units,b.typename,c.brandname,f.provname,g.areaname,h.entersale,h.retailsale,h.checksale,a.seasonname,a.prodyear,a.sizegroupno,a.colorlist,a.remark,a.imagename0";
		String strwhere = " a.statetag=1 and a.noused=0 and h.houseid=" + houseid;
		if (!findbox.equals(""))
			strwhere += " and (a.warename like '%" + findbox + "%' or a.shortname like '%" + findbox.toUpperCase() + "%' or a.wareno like '%" + findbox.toUpperCase() + "%')";
		if (!warename.equals(""))
			strwhere += " and (a.warename like '%" + warename + "%' or a.shortname like '%" + warename.toUpperCase() + "%')";
		if (!wareno.equals(""))
			strwhere += " and a.wareno like '%" + wareno.toUpperCase() + "%'";
		if (!Func.isNull(seasonname))
			strwhere += " and a.seasonname = '" + seasonname + "'";
		if (!Func.isNull(prodyear))
			strwhere += " and a.prodyear = '" + prodyear + "'";
		if (!Func.isNull(locale))
			strwhere += "      and a.locale like '%" + locale + "%'";
		if (!Func.isNull(prodno))
			strwhere += " and a.prodno like '%" + prodno + "%'";
		if (areaid >= 0)
			strwhere += " and a.areaid = " + areaid;
		if (brandid >= 0)
			strwhere += " and a.brandid = " + brandid;
		if (provid >= 0)
			strwhere += " and a.provid = " + provid;
		if (typeid >= 0)
			if (typeid > 0 && typeid < 1000) {
				strwhere += "    and exists (select 1 from waretype t where t.typeid=a.typeid and t.p_typeid= " + typeid + ")";
			} else {
				strwhere += "    and a.typeid=" + typeid;
			}

		String sort = "wareno,wareid";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		tb = dal.GetTable1(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}
	// ===============================================

	// 写账户商品类型记录
	protected void WriteAccwaretype(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("WriteAccwaretype 111");

		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long typeid = jsonObject.has("typeid") ? Long.parseLong(jsonObject.getString("typeid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Accwaretype dal = new Accwaretype();
		dal.setTypeid(typeid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.doAccwaretype(value), dal.getErrmess());

	}

	// 成批写账户商品类型记录
	protected void WriteAllaccwaretype(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long typeid = jsonObject.has("typeid") ? Long.parseLong(jsonObject.getString("typeid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Accwaretype dal = new Accwaretype();
		dal.setTypeid(typeid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.doAllAccwaretype(value), dal.getErrmess());

	}

	// 删除指定商品类型id信息
	protected void DelWaretypeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long typeid = jsonObject.has("typeid") ? Long.parseLong(jsonObject.getString("typeid")) : 0;
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		// long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许删除记录！");
			return;
		}
		if (accid == 0) {
			WriteResult(response, 0, "这是系统约定的商品类型，不允许删除！");
			return;
		} else if (htp.getMaccid() != accid) {
			WriteResult(response, 0, "这不是当前账户自定义的商品类型，不允许删除！");
			return;
		}
		Waretype dal = new Waretype();
		dal.setAccid(accid);
		dal.setTypeid(typeid);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 新增商品类型记录
	protected void AddWaretypeRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Waretype dal = new Waretype();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setStatetag(1);
		WriteResult(response, dal.Append(), dal.getErrmess());
	}

	// 更新指定商品类型id信息
	protected void UpdateWaretypeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long typeid = jsonObject.has("typeid") ?
		// Long.parseLong(jsonObject.getString("typeid")) : 0;
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		// long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许更改记录！");
			return;
		}
		if (accid == 0) {
			WriteResult(response, 0, "这是系统约定的商品类型，不允许更改！");
			return;
		} else if (htp.getMaccid() != accid) {
			WriteResult(response, 0, "这不是当前账户自定义的商品类型，不允许更改！");
			return;
		}

		Waretype dal = new Waretype();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setStatetag(1);
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// // 获取地区表
	// protected void GetAreacodeList(HttpServletResponse response, HttpInfo
	// htp) throws ServletException, IOException {
	// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
	// String findbox = jsonObject.has("findbox") ?
	// jsonObject.getString("findbox").trim().replace("'", "''") : "";
	// String fieldlist = jsonObject.has("fieldlist") ?
	// jsonObject.getString("fieldlist") : "*";
	// int p_areaid = jsonObject.has("p_areaid") ?
	// Integer.parseInt(jsonObject.getString("p_areaid")) : 0;
	//
	// int page = jsonObject.has("page") ?
	// Integer.parseInt(jsonObject.getString("page")) : 1;
	// int pagesize = jsonObject.has("rows") ?
	// Integer.parseInt(jsonObject.getString("rows")) : 10;
	// if (pagesize > 50)
	// pagesize = 10;
	// if (fieldlist.equals("") || fieldlist.equals("*"))
	// fieldlist = "AREAID,AREANAME,FULLNAME,P_AREAID,LASTNODE";
	// String sort = " AREAID ";
	//
	// String strwhere = " NOUSED=0 and P_AREAID = " + p_areaid;
	//
	// }

	// 获取指定账户的商品类型表
	protected void GetAccwaretypeList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "";
		long p_typeid = jsonObject.has("p_typeid") ? Long.parseLong(jsonObject.getString("p_typeid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		long accid = htp.getMaccid();
		sort += " typeid";// +order;
		String strwhere = " a.NOUSED=0 and a.P_TYPEID = " + p_typeid + " and a.statetag=1";
		strwhere += " and (a.accid=0 or a.accid=" + accid + ")";
		strwhere += " and (a.typeid=0 or exists (select 1 from accwaretype b where b.accid=" + accid + " and a.typeid=b.typeid) )";
		if (!findbox.equals(""))
			strwhere += " and (a.typename like '%" + findbox + "%' or a.shortname like '%" + findbox.toUpperCase() + "%')";

		if (fieldlist.equals("") || fieldlist.equals("*"))
			fieldlist = "a.TYPEID,a.TYPENAME,a.FULLNAME,a.P_TYPEID,a.accid,a.LASTNODE";
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Accwaretype dal = new Accwaretype();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	//	返回已选中的类型，仅供erp接口调用
	protected void GetWaretypeselectList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String lastdate = jsonObject.has("lastdate") ? jsonObject.getString("lastdate") : "";
		//		long p_typeid = jsonObject.has("p_typeid") ? Long.parseLong(jsonObject.getString("p_typeid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = " typeid ";// +order;
		String strwhere = " a.NOUSED=0 and a.lastnode=1 and a.statetag=1";
		strwhere += " and (a.accid=0 or a.accid=" + htp.getMaccid() + ")";

		if (!lastdate.equals(""))
			strwhere += " and a.lastdate>to_date('" + lastdate + "','yyyy-mm-dd hh24:mi:ss')";

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.TYPEID,a.TYPENAME,a.FULLNAME,a.P_TYPEID,a.LASTNODE";

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Waretype dal = new Waretype();
		dal.setAccid(htp.getMaccid());

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取商品类型表
	protected void GetWaretypeList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String typename = jsonObject.has("typename") ? jsonObject.getString("typename").replace("'", "''") : "";
		String lastdate = jsonObject.has("lastdate") ? jsonObject.getString("lastdate") : "";
		long p_typeid = jsonObject.has("p_typeid") ? Long.parseLong(jsonObject.getString("p_typeid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = " ordid,typeid ";// +order;
		String strwhere = " a.NOUSED=0 and a.typeid>0 ";
		strwhere += " and a.statetag=1";
		strwhere += " and a.P_TYPEID = " + p_typeid;
		strwhere += " and (a.accid=0 or a.accid=" + htp.getMaccid() + ")";
		if (!findbox.equals(""))
			strwhere += " and (a.typename like '%" + findbox + "%' or a.shortname like '%" + findbox.toUpperCase() + "%')";
		if (!typename.equals(""))
			strwhere += " and (a.TYPENAME like '%" + typename + "%' or a.shortname like '%" + findbox.toUpperCase() + "%')";
		if (p_typeid > 0) {
			sort = " selbj desc,typeid ";
		}
		if (!lastdate.equals(""))
			strwhere += " and a.lastdate>to_date('" + lastdate + "','yyyy-mm-dd hh24:mi:ss')";

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.TYPEID,a.TYPENAME,a.FULLNAME,a.P_TYPEID,a.accid,a.LASTNODE";
		fieldlist += ",a.ordid";
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Waretype dal = new Waretype();
		dal.setAccid(htp.getMaccid());

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// ==============================
	// 删除指定区位信息
	protected void DelAreaByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		if (htp.getMaccid() == 1000 && htp.getUsername().equals("演示")) {
			WriteResult(response, 0, "这是演示套账，不允许删除记录！");
			return;
		}
		long areaid = jsonObject.has("areaid") ? Long.parseLong(jsonObject.getString("areaid")) : 0;

		Area dal = new Area();
		dal.setAreaid(areaid);
		dal.setLastop(htp.getUsername());
		dal.setAccid(htp.getMaccid());
		// dal.setAccbegindate(htp.getAccdate());

		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 删除指定品牌
	protected void DelBrandByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		if (htp.getMaccid() == 1000 && htp.getUsername().equals("演示")) {
			WriteResult(response, 0, "这是演示套账，不允许删除记录！");
			return;
		}
		long brandid = jsonObject.has("brandid") ? Long.parseLong(jsonObject.getString("brandid")) : 0;

		Brand dal = new Brand();
		dal.setBrandid(brandid);
		dal.setLastop(htp.getUsername());
		dal.setAccid(htp.getMaccid());
		// dal.setAccbegindate(htp.getAccdate());

		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 获取指定区位id信息
	protected void GetAreaByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long areaid = jsonObject.has("areaid") ? Long.parseLong(jsonObject.getString("areaid")) : 0;

		String strwhere = "  a.areaid=" + areaid;// +" and statetag=1";
		strwhere += " and a.accid=" + htp.getMaccid();
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "A.AREAID,A.ACCID,A.AREANAME,A.NOUSED,A.STATETAG,A.LASTOP,A.LASTDATE ";

		Area dal = new Area();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取指定品牌id信息
	protected void GetBrandByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long brandid = jsonObject.has("brandid") ? Long.parseLong(jsonObject.getString("brandid")) : 0;

		String strwhere = "  brandid=" + brandid;// +" and statetag=1";
		strwhere += " and accid=" + htp.getMaccid();
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "BRANDID,BRANDNAME,ACCID,LYFS,ACCID1,BRANDID1,NOUSED,STATETAG,LASTOP,LASTDATE ";

		Brand dal = new Brand();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 分页显示企业账户支付信息表
	protected void ListAccregpay(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "accid";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 2;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		if (sort.equals("accid"))
			sort += " " + order;
		else
			sort += " " + order + ",accid";
		// System.out.println("brandid=" + brandid);
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.accid,a.fullname,a.shortname,a.servicePhone,a.contactName,a.contactPhone,b.accname ";
		String strwhere = " 1=1";
		if (statetag < 2)
			strwhere += " and a.statetag=" + statetag;
		if (!findbox.equals(""))
			strwhere += " and (a.fullname like '%" + findbox + "%' or a.shortname like '%" + findbox.toUpperCase() + "%')";

		Table tb = new Table();
		Accregpay dal = new Accregpay();
		QueryParam qp = new QueryParam(page, pagesize, sort);
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取企业账户支付信息表
	protected void GetAccregpay(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : -1;

		String strwhere = "  a.accid=" + accid;// +" and statetag=1";
		// strwhere += " and accid=" + htp.getMaccid();
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.accid,a.fullname,a.shortname,a.servicePhone,a.contactName,a.contactPhone ";

		Accregpay dal = new Accregpay();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 审核/取消审核企业账户支付信息表
	protected void CheckAccregpay(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : -1;
		int checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 1;
		String kzbj = jsonObject.has("kzbj") ? jsonObject.getString("kzbj") : "";
		Accregpay dal = new Accregpay();
		// 读取json数据到表类
		dal.setAccid(accid);
		dal.setLastop(htp.getUsername());
		dal.setKzbj(kzbj);
		dal.setLevelid(htp.getLevelid());
		WriteResult(response, dal.Check(checkid), dal.getErrmess());
	}

	// 删除企业账户支付信息表
	protected void DelAccregpay(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : -1;
		Accregpay dal = new Accregpay();
		dal.setAccid(accid);
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.Delete(), dal.getErrmess());

	}

	// 更新指定区位id信息
	protected void UpdateAreaByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		if (htp.getMaccid() == 1000 && htp.getUsername().equals("演示")) {
			WriteResult(response, 0, "这是演示套账，不允许更改记录！");
			return;
		}

		Area dal = new Area();

		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		// dal.setUserid(htp.getUserid());

		WriteResult(response, dal.Update(), dal.getErrmess());

	}

	//删除指定程序
	protected void DelSysprogByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long progid = jsonObject.has("progid") ? Long.parseLong(jsonObject.getString("progid")) : 0;

		Sysprog dal = new Sysprog();
		dal.setProgid(progid);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 更改程序
	protected void UpdateSysprogByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		Sysprog dal = new Sysprog();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.Update(), dal.getErrmess());

	}

	// 更改品牌
	protected void UpdateBrandByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		if (htp.getMaccid() == 1000 && htp.getUsername().equals("演示")) {
			WriteResult(response, 0, "这是演示套账，不允许更改记录！");
			return;
		}
		Brand dal = new Brand();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setUserid(htp.getUserid());
		dal.setQxbj(htp.getQxbj());

		WriteResult(response, dal.Update(), dal.getErrmess());

	}

	// 更改用户设备授权
	protected void UpdateUserdevice(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Userdevice dal = new Userdevice();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 删除用户设备授权
	protected void DeleteUserdevice(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Userdevice dal = new Userdevice();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 增加区位
	protected void AddAreaRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Area dal = new Area();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		// dal.setUserid(htp.getUserid());
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setStatetag(1);
		dal.setNoused(0);
		WriteResult(response, dal.Append(), dal.getErrmess());
	}

	// 增加应用程序
	protected void AddSysprogRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Sysprog dal = new Sysprog();
		dal.setLastop(htp.getUsername());
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		WriteResult(response, dal.Append(), dal.getErrmess());
	}

	// 获取程序信息
	protected void GetSysprogByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long progid = jsonObject.has("progid") ? Long.parseLong(jsonObject.getString("progid")) : 0;

		String strwhere = "  PROGID=" + progid;// +" and statetag=1";
		// strwhere += " and accid=" + htp.getMaccid();
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "PROGID,PROGNO,PROGNAME,GROUPID,SYSID,TAG,NOUSED,INDEXID,NOFREE,GRPID,GRPNAME,PTAG,HTAG,ORDID,CSXXX ";

		Sysprog dal = new Sysprog();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 新增品牌
	protected void AddBrandRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Brand dal = new Brand();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);

		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setUserid(htp.getUserid());

		dal.setStatetag(1);
		dal.setLyfs(0);
		dal.setQxbj(htp.getQxbj());
		dal.setNoused(0);

		WriteResult(response, dal.Append(), dal.getErrmess());
	}

	// 新增企业账户支付信息表
	// protected void AddAccregpayRec(HttpServletResponse response, HttpInfo
	// htp) throws ServletException, IOException {
	// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
	// Accregpay dal = new Accregpay();
	// // 读取json数据到表类
	// DbHelperSQL.JsonConvertObject(dal, jsonObject);
	//
	// dal.setAccid(htp.getMaccid());
	// dal.setLastop(htp.getUsername());
	// WriteResult(response, dal.Append(), dal.getErrmess());
	// }

	// 新增标签
	protected void AddLabelRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Label dal = new Label();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);

		WriteResult(response, dal.Append(), dal.getErrmess());

	}

	// 删除指定标签
	protected void DelLabelByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		if (htp.getMaccid() == 1000 && htp.getUsername().equals("演示")) {
			WriteResult(response, 0, "这是演示套账，不允许删除记录！");
			return;
		}
		float labelid = jsonObject.has("labelid") ? Float.parseFloat(jsonObject.getString("labelid")) : 0;

		Label dal = new Label();
		dal.setLabelid(labelid);
		dal.setLastop(htp.getUsername());
		dal.setAccid(htp.getMaccid());
		// dal.setAccbegindate(htp.getAccdate());

		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// =========================================
	// 标签分页列表
	protected void LabelList(HttpServletResponse response, HttpInfo htp, int fs) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// {"flyang":"20150107","rows":10,"page":1,"fieldlist":"brandid,brandname","sort":"brandid","order":"asc"}
		// int xls = jsonObject.has("xls") ?
		// Integer.parseInt(jsonObject.getString("xls")) : 0;

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		// int noused = jsonObject.has("noused") ?
		// Integer.parseInt(jsonObject.getString("noused")) : 0;
		// int downbj = jsonObject.has("downbj") ?
		// Integer.parseInt(jsonObject.getString("downbj")) : 0;
		// long brandid = jsonObject.getString("brandid") == null ? 0 :
		// Long.parseLong(jsonObject.getString("brandid"));
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// " brandid ";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : " asc ";
		// String brandname = jsonObject.has("brandname") ?
		// jsonObject.getString("brandname") : "";
		// String lastdate = jsonObject.has("lastdate") ?
		// jsonObject.getString("lastdate") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String sort = " LABELNAME,LABELID ";
		// System.out.println("brandid=" + brandid);
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "LABELID,LABELNAME,ACCID,LYFS,LASTOP,LASTDATE";
		long accid = htp.getMaccid();
		// long userid = htp.getUserid();
		// String qxpublic = htp.getQxpublic();
		String strwhere = "";
		strwhere = " accid=" + accid + "";
		strwhere += " and STATETAG=1";

		// if (noused < 2)
		// strwhere += " and NOUSED=" + noused;
		// if (!lastdate.equals(""))
		// strwhere += " and lastdate>to_date('" + lastdate +
		// "','yyyymmddhh24miss')";

		// if (ywly < 2) qry += " and ywly=" + ywly;//ywly=0
		// 只查询手机端增加的单据，用于向erp传数据

		if (!findbox.equals(""))
			strwhere += " and (labelname like '%" + findbox + "%' or shortname like '%" + findbox.toUpperCase() + "%')";
		// if (!brandname.equals(""))
		// strwhere += " and (BRANDNAME like '%" + brandname + "%' or shortname
		// like '%" + brandname.toUpperCase() + "%')";

		// if (htp.getQxbj() == 1 && downbj == 0) // 1 启用权限控制
		// if (fs == 1 && userid != 0)
		// strwhere += " and exists (select 1 from employebrand where
		// brand.brandid=employebrand.brandid and employebrand.epid=" + userid +
		// ") ";

		Table tb = new Table();
		Label dal = new Label();
		QueryParam qp = new QueryParam(page, pagesize, sort);

		tb = dal.GetTable(qp, strwhere, fieldlist);

		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 更改标签
	protected void UpdateLabelByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		if (htp.getMaccid() == 1000 && htp.getUsername().equals("演示")) {
			WriteResult(response, 0, "这是演示套账，不允许更改记录！");
			return;
		}

		Label dal = new Label();

		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		// dal.setUserid(htp.getUserid());

		WriteResult(response, dal.Update(), dal.getErrmess());

	}

	// 下载品牌编码
	protected void DownBrand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String downdate = jsonObject.has("downdate") ? jsonObject.getString("downdate") : "";
		Brand dal = new Brand();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.doDown(downdate), dal.getErrmess());

	}

	// 下载销售类型
	protected void DownSalecode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String downdate = jsonObject.has("downdate") ? jsonObject.getString("downdate") : "";
		Salecode dal = new Salecode();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.doDown(downdate), dal.getErrmess());

	}

	// 下载客户文件
	protected void DownCustomer(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String downdate = jsonObject.has("downdate") ? jsonObject.getString("downdate") : "";
		Customer dal = new Customer();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.doDown(downdate), dal.getErrmess());

	}

	// 下载供应商文件
	protected void DownProvide(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String downdate = jsonObject.has("downdate") ? jsonObject.getString("downdate") : "";
		Provide dal = new Provide();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.doDown(downdate), dal.getErrmess());

	}

	// 下载费用项目
	protected void DownChargescode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String downdate = jsonObject.has("downdate") ? jsonObject.getString("downdate") : "";
		Chargescode dal = new Chargescode();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.doDown(downdate), dal.getErrmess());

	}

	// 下载商品编码
	protected void DownWarecode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String downdate = jsonObject.has("downdate") ? jsonObject.getString("downdate") : "";
		Warecode dal = new Warecode();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.doDown(downdate), dal.getErrmess());

	}

	// 下载店铺编码
	protected void DownWarehouse(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String downdate = jsonObject.has("downdate") ? jsonObject.getString("downdate") : "";
		Warehouse dal = new Warehouse();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.doDown(downdate), dal.getErrmess());

	}

	// 下载职员编码
	protected void DownEmploye(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String downdate = jsonObject.has("downdate") ? jsonObject.getString("downdate") : "";
		Employe dal = new Employe();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.doDown(downdate), dal.getErrmess());

	}

	// 下载部门编码
	protected void DownDepartment(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String downdate = jsonObject.has("downdate") ? jsonObject.getString("downdate") : "";
		Department dal = new Department();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.doDown(downdate), dal.getErrmess());

	}

	// 下载颜色编码
	protected void DownColorcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String downdate = jsonObject.has("downdate") ? jsonObject.getString("downdate") : "";
		Colorcode dal = new Colorcode();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.doDown(downdate), dal.getErrmess());

	}

	// 下载商品颜色编码
	protected void DownWarecolor(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String downdate = jsonObject.has("downdate") ? jsonObject.getString("downdate") : "";
		Warecolor dal = new Warecolor();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.doDown(downdate), dal.getErrmess());

	}

	// 下载尺码编码
	protected void DownSizecode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String downdate = jsonObject.has("downdate") ? jsonObject.getString("downdate") : "";
		Sizecode dal = new Sizecode();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.doDown(downdate), dal.getErrmess());

	}

	// 下载会员类型
	protected void DownGuesttype(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String downdate = jsonObject.has("downdate") ? jsonObject.getString("downdate") : "";
		Guesttype dal = new Guesttype();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.doDown(downdate), dal.getErrmess());

	}

	// 下载会员档案
	protected void DownGuestvip(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String downdate = jsonObject.has("downdate") ? jsonObject.getString("downdate") : "";
		Guestvip dal = new Guestvip();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.doDown(downdate), dal.getErrmess());

	}

	// 下载结算方式
	protected void DownPayway(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String downdate = jsonObject.has("downdate") ? jsonObject.getString("downdate") : "";
		Payway dal = new Payway();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.doDown(downdate), dal.getErrmess());

	}

	// 下载条码
	protected void DownWarebarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String downdate = jsonObject.has("downdate") ? jsonObject.getString("downdate") : "";
		Warebarcode dal = new Warebarcode();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.doDown(downdate), dal.getErrmess());

	}

	// 下载商品类型编码
	protected void DownWaretype(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String downdate = jsonObject.has("downdate") ? jsonObject.getString("downdate") : "";
		Waretype dal = new Waretype();
		dal.setAccid(htp.getMaccid());
		// dal.setLastop(htp.getUsername());

		WriteResult(response, dal.doDown(downdate), dal.getErrmess());

	}

	// 用户设备分页列表
	protected void ListUserdevice(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "epid";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		int cxfs = jsonObject.has("cxfs") ? Integer.parseInt(jsonObject.getString("cxfs")) : 2;
		// cxfs:0=未授权，1=已授权，2=所有
		// System.out.println("brandid=" + brandid);
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.epid,a.deviceno,a.devicetype,a.remark,a.lastdate,a.loginenabled,b.epname";
		fieldlist += ",case a.devicetype when 'IPD' then 'IPD' when 'IPH' then '苹果手机' when 'APH' then '安卓手机' when 'APD' then '安卓平板' end as lx";
		sort += " " + order;
		Table tb = new Table();
		Userdevice dal = new Userdevice();
		QueryParam qp = new QueryParam(page, pagesize, sort);
		String strwhere = " b.accid=" + htp.getMaccid();
		if (cxfs < 2)
			strwhere += " and a.loginenabled=" + cxfs;
		if (findbox.length() > 0)
			strwhere += " and b.epname like '%" + findbox + "%'";
		tb = dal.GetTable(qp, strwhere, fieldlist);

		// if (page < 0) {// 导出excel
		// String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
		// WriteResult(response, Integer.parseInt(retcs.substring(0, 1)),
		// retcs.substring(1));
		// return;
		// }

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 品牌分页列表
	protected void BrandList(HttpServletResponse response, HttpInfo htp, int fs) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// {"flyang":"20150107","rows":10,"page":1,"fieldlist":"brandid,brandname","sort":"brandid","order":"asc"}
		// int xls = jsonObject.has("xls") ?
		// Integer.parseInt(jsonObject.getString("xls")) : 0;

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int noused = jsonObject.has("noused") ? Integer.parseInt(jsonObject.getString("noused")) : 0;
		int downbj = jsonObject.has("downbj") ? Integer.parseInt(jsonObject.getString("downbj")) : 0;
		// long brandid = jsonObject.getString("brandid") == null ? 0 :
		// Long.parseLong(jsonObject.getString("brandid"));
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// " brandid ";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : " asc ";
		String brandname = jsonObject.has("brandname") ? jsonObject.getString("brandname").replace("'", "''") : "";
		// System.out.println("brandname length="+Func.getLength(brandname));
		String lastdate = jsonObject.has("lastdate") ? jsonObject.getString("lastdate") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String sort = " BRANDNAME,BRANDID ";
		// System.out.println("brandid=" + brandid);
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "BRANDID,BRANDNAME,ACCID,LYFS,ACCID1,BRANDID1,NOUSED,STATETAG,LASTOP,LASTDATE";
		long accid = htp.getMaccid();
		long userid = htp.getUserid();
		// String qxpublic = htp.getQxpublic();
		String strwhere = "";
		if (downbj == 0) {
			if (fs == 1)
				strwhere = " (accid=" + accid + " or brandid=0)";
			else
				strwhere = " accid=" + accid;
			strwhere += " and STATETAG=1";
		} else // 同步
		{
			strwhere = " (accid=" + accid + " or brandid=0)";
			strwhere += " and STATETAG=1";

		}
		if (noused < 2)
			strwhere += " and NOUSED=" + noused;
		if (!lastdate.equals(""))
			strwhere += " and lastdate>to_date('" + lastdate + "','yyyymmddhh24miss')";

		// if (ywly < 2) qry += " and ywly=" + ywly;//ywly=0
		// 只查询手机端增加的单据，用于向erp传数据

		if (!findbox.equals(""))
			strwhere += " and (BRANDNAME like '%" + findbox + "%' or shortname like '%" + findbox.toUpperCase() + "%')";
		if (!brandname.equals(""))
			strwhere += " and (BRANDNAME like '%" + brandname + "%' or shortname like '%" + brandname.toUpperCase() + "%')";

		if (htp.getQxbj() == 1 && downbj == 0) // 1 启用权限控制
			if (fs == 1 && userid != 0)
				strwhere += " and exists (select 1 from employebrand  where brand.brandid=employebrand.brandid and employebrand.epid=" + userid + ") ";

		Table tb = new Table();
		Brand dal = new Brand();
		QueryParam qp = new QueryParam(page, pagesize, sort);

		tb = dal.GetTable(qp, strwhere, fieldlist);

		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 区域分页列表
	protected void GetAreaList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// {"flyang":"20150107","rows":10,"page":1,"fieldlist":"brandid,brandname","sort":"brandid","order":"asc"}
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int noused = jsonObject.has("noused") ? Integer.parseInt(jsonObject.getString("noused")) : 0;
		int hasware = jsonObject.has("hasware") ? Integer.parseInt(jsonObject.getString("hasware")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		// int cxbj = jsonObject.has("cxbj") ?
		// Integer.parseInt(jsonObject.getString("cxbj")) : 0;

		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : " areaname ";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		// String brandname = jsonObject.has("brandname") ?
		// jsonObject.getString("brandname") : "";
		// String lastdate = jsonObject.has("lastdate") ?
		// jsonObject.getString("lastdate") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		sort += " " + order;
		// String sort = " BRANDNAME,BRANDID ";
		// System.out.println("brandid=" + brandid);
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "A.AREAID,A.ACCID,A.AREANAME,A.NOUSED,A.STATETAG,A.LASTOP,A.LASTDATE";
		long accid = htp.getMaccid();
		// long userid = htp.getUserid();
		String strwhere = " a.accid=" + accid + " and a.statetag=1";
		if (noused < 2)
			strwhere += " and a.NOUSED=" + noused;
		if (houseid > 0)
			strwhere += " and exists (select 1 from wareloca b where a.areaid=b.areaid and a.houseid=" + houseid + " and b.accid=" + accid + ")";

		if (hasware == 1)
			strwhere += " and exists (select 1 from warecode c where a.areaid=c.areaid and c.accid=" + accid + ")";
		// if (lastdate != null && lastdate != "") qry += " and
		// a.lastdate>to_date('" + lastdate + "','yyyy-mm-dd hh24:mi:ss')";

		// if (ywly < 2) qry += " and ywly=" + ywly;//ywly=0
		// 只查询手机端增加的单据，用于向erp传数据

		if (!Func.isNull(findbox))
			strwhere += " and a.AREANAME like '%" + findbox.toUpperCase() + "%' ";
		// if (cxbj == 1) // 只查权限允许的区位
		// {
		// strwhere += " and exists (select 1 from emplarea d where
		// a.areaid=d.areaid and d.epid=" + userid + ")";
		// }

		Table tb = new Table();
		Area dal = new Area();
		QueryParam qp = new QueryParam(page, pagesize, sort);

		tb = dal.GetTable(qp, strwhere, fieldlist);

		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 银行分页列表
	protected void GetBankList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// {"flyang":"20150107","rows":10,"page":1,"fieldlist":"brandid,brandname","sort":"brandid","order":"asc"}
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : " bank_name ";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String city = jsonObject.has("city") ? jsonObject.getString("city").replace("'", "''") : "";
		String province = jsonObject.has("province") ? jsonObject.getString("province").replace("'", "''") : "";
		String type_code = jsonObject.has("type_code") ? jsonObject.getString("type_code").replace("'", "''") : "";
		sort += " " + order;
		// String sort = " BRANDNAME,BRANDID ";
		// System.out.println("brandid=" + brandid);
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "TYPE_CODE,BANK_CHANNEL_NO,BANK_NAME,PROVINCE,CITY,CLEAR_BANK_CHANNEL_NO,ID";
		if (!fieldlist.toUpperCase().contains("ID"))
			fieldlist += ",ID";

		// long accid = htp.getMaccid();
		// long userid = htp.getUserid();
		String strwhere = " 1=1";

		if (!Func.isNull(findbox))
			strwhere += " and BANK_NAME like '%" + findbox + "%' ";
		if (province.length() > 0)
			strwhere += " and province='" + province + "'";
		if (city.length() > 0)
			strwhere += " and city='" + city + "'";
		if (type_code.length() > 0)
			strwhere += " and type_code='" + type_code + "'";
		Table tb = new Table();
		Bankinfo dal = new Bankinfo();
		QueryParam qp = new QueryParam(page, pagesize, sort);

		tb = dal.GetTable(qp, strwhere, fieldlist);

		// if (page < 0) {// 导出excel
		// String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
		// WriteResult(response, Integer.parseInt(retcs.substring(0, 1)),
		// retcs.substring(1));
		// return;
		// }

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// ==================================================
	// 更新指定颜色id信息
	protected void UpdateColorByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许更改记录！");
			return;
		}
		Colorcode dal = new Colorcode();
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		// dal.setQxbj(htp.getQxbj());

		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 用于从excel中导入颜色编码
	protected void AppendColor(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Colorcode dal = new Colorcode();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.LoadFromXLS(), dal.getErrmess());
	}

	// 新增颜色记录
	protected void AddColorRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Colorcode dal = new Colorcode();
		// dal.setUserid(htp.getUserid());
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setStatetag(1);
		dal.setLyfs(0);
		// dal.setQxbj(htp.getQxbj());
		WriteResult(response, dal.Append(), dal.getErrmess());
	}

	// 删除指定颜色id信息
	protected void DelColorByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许删除记录！");
			return;
		}
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		Colorcode dal = new Colorcode();
		dal.setColorid(colorid);
		dal.setLastop(htp.getUsername());
		dal.setAccid(htp.getMaccid());
		// dal.setAccbegindate(htp.getAccdate());

		WriteResult(response, dal.Delete(), dal.getErrmess());

	}

	// 获取指定颜色id信息
	protected void GetColorByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;

		String strwhere = "  a.colorid=" + colorid;// +" and statetag=1";
		strwhere += " and a.accid=" + htp.getMaccid();
		// if (fieldlist.equals("*") || fieldlist.equals(""))
		fieldlist = "a.COLORID,a.COLORNAME,a.COLORNO,a.ACCID,a.LYFS,a.NOUSED,a.STATETAG,a.LASTOP,a.LASTDATE,a.brandid,b.brandname";

		Colorcode dal = new Colorcode();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取颜色列表
	protected void GetColorList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long brandid = jsonObject.has("brandid") ? Long.parseLong(jsonObject.getString("brandid")) : -1;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int noused = jsonObject.has("noused") ? Integer.parseInt(jsonObject.getString("noused")) : 0;
		int downbj = jsonObject.has("downbj") ? Integer.parseInt(jsonObject.getString("downbj")) : 0;
		int pctbbj = jsonObject.has("pctbbj") ? Integer.parseInt(jsonObject.getString("pctbbj")) : 0;
		String colorname = jsonObject.has("colorname") ? jsonObject.getString("colorname") : "";
		String colorno = jsonObject.has("colorno") ? jsonObject.getString("colorno") : "";
		String lastdate = jsonObject.has("lastdate") ? jsonObject.getString("lastdate") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String sort = " colorname,colorid";
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (downbj == 0) {
			strwhere += " and a.STATETAG= 1";
			if (pctbbj == 0)
				strwhere += " and a.accid1=0";
		}

		if (!lastdate.equals(""))
			strwhere += " and a.lastdate>to_date('" + lastdate + "','yyyy-mm-dd hh24:mi:ss')";

		if (!colorname.equals(""))
			strwhere += " and (a.COLORNAME like '%" + colorname + "%' or a.shortname like '%" + colorname + "%') ";
		if (!colorno.equals(""))
			strwhere += " and a.colorno like '%" + colorno.toUpperCase() + "%'";
		if (!Func.isNull(findbox))
			strwhere += " and (a.COLORNAME like '%" + findbox + "%' or a.shortname like '%" + findbox.toUpperCase() + "%' or a.COLORNO like '%" + findbox.toUpperCase() + "%')";

		if (noused < 2)
			strwhere += " and a.NOUSED=" + noused;
		if (brandid >= 0)
			strwhere += " and a.brandid=" + brandid;

		// if (fieldlist.equals("*") || fieldlist.equals(""))
		fieldlist = "a.COLORID,a.COLORNAME,a.COLORNO,a.ACCID,a.LYFS,a.NOUSED,a.STATETAG,a.LASTOP,a.LASTDATE,a.brandid,b.brandname";
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Colorcode dal = new Colorcode();

		tb = dal.GetTable(qp, strwhere, fieldlist, wareid);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// ===================================
	// 新增费用项目记录
	protected void AddChargesRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long cgid = jsonObject.has("cgid") ?
		// Long.parseLong(jsonObject.getString("cgid")) : 0;
		Chargescode dal = new Chargescode();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setCgid(cgid);
		dal.setLastop(htp.getUsername());
		dal.setAccid(htp.getMaccid());
		dal.setNoused(0);
		dal.setStatetag(1);
		// dal.setAccbegindate(htp.getAccdate());

		WriteResult(response, dal.Append(), dal.getErrmess());
	}

	// 更新指定费用项目id信息
	protected void UpdateChargesByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许更改记录！");
			return;
		}
		// long cgid = jsonObject.has("cgid") ?
		// Long.parseLong(jsonObject.getString("cgid")) : 0;
		Chargescode dal = new Chargescode();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setCgid(cgid);
		dal.setLastop(lastop);
		dal.setAccid(accid);
		// dal.setAccbegindate(htp.getAccdate());

		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 删除指定费用项目id信息
	protected void DelChargesByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许删除记录！");
			return;
		}
		long cgid = jsonObject.has("cgid") ? Long.parseLong(jsonObject.getString("cgid")) : 0;
		Chargescode dal = new Chargescode();
		dal.setCgid(cgid);
		dal.setLastop(htp.getUsername());
		dal.setAccid(htp.getMaccid());
		dal.setAccbegindate(htp.getAccdate());

		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 获取指定费用项目id信息
	protected void GetChargesByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long cgid = jsonObject.has("cgid") ? Long.parseLong(jsonObject.getString("cgid")) : 0;
		if (cgid == 0) {
			WriteResult(response, 0, "费用项目id参数无效");
			return;
		}

		String strwhere = "  cgid=" + cgid;// +" and statetag=1";
		strwhere += " and accid=" + htp.getMaccid();
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "CGID,CGNAME,ACCID,NOUSED,STATETAG,LASTOP,LASTDATE ";

		Chargescode dal = new Chargescode();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 分页获取费用列表
	protected void GetChargesList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// {"flyang":"20150107","rows":10,"page":1,"fieldlist":"brandid,brandname","sort":"brandid","order":"asc"}
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int noused = jsonObject.has("noused") ? Integer.parseInt(jsonObject.getString("noused")) : 0;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String sort = " CGNAME,CGID ";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "CGID,CGNAME,ACCID,NOUSED,STATETAG,LASTOP,LASTDATE";
		String strwhere = "accid=" + htp.getMaccid() + " and statetag=1";
		if (noused < 2)
			strwhere += " and NOUSED=" + noused;

		if (!Func.isNull(findbox))
			strwhere += " and (CGNAME like '%" + findbox + "%' or shortname like '%" + findbox.toUpperCase() + "%')";

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Chargescode dal = new Chargescode();

		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// ===================================
	// 新增打印端口记录
	protected void AddPrintsetRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long prtid = jsonObject.has("prtid") ? Long.parseLong(jsonObject.getString("prtid")) : 0;
		Printset dal = new Printset();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setPrtid(prtid);
		dal.setLastop(htp.getUsername());
		dal.setAccid(htp.getMaccid());
		dal.setNoused(0);
		dal.setStatetag(1);
		// dal.setAccbegindate(htp.getAccdate());
		WriteResult(response, dal.Append(), dal.getErrmess());
	}

	// 更新指定打印端口id信息
	protected void UpdatePrintsetByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许更改记录！");
			return;
		}
		Printset dal = new Printset();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setPrtid(prtid);
		dal.setLastop(lastop);
		dal.setAccid(accid);
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 删除指定打印端口id信息
	protected void DelPrintsetByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许删除记录！");
			return;
		}
		long prtid = jsonObject.has("prtid") ? Long.parseLong(jsonObject.getString("prtid")) : 0;
		Printset dal = new Printset();
		dal.setPrtid(prtid);
		dal.setLastop(htp.getUsername());
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 获取指定打印端口id信息
	protected void GetPrintsetByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long prtid = jsonObject.has("prtid") ? Long.parseLong(jsonObject.getString("prtid")) : 0;
		if (prtid == 0) {
			WriteResult(response, 0, "打印端口id参数无效");
			return;
		}
		String strwhere = "  prtid=" + prtid;// +" and statetag=1";
		strwhere += " and accid=" + htp.getMaccid();
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "PRTID,PRTNAME,ACCID,NOUSED,STATETAG,LASTOP,LASTDATE ";
		Printset dal = new Printset();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 分页获取打印端口列表
	protected void GetPrintsetList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("BrandList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// {"flyang":"20150107","rows":10,"page":1,"fieldlist":"brandid,brandname","sort":"brandid","order":"asc"}
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String ipstr = jsonObject.has("ipstr") ? jsonObject.getString("ipstr") : "";
		int noused = jsonObject.has("noused") ? Integer.parseInt(jsonObject.getString("noused")) : 0;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String sort = " PRTNAME,PRTID ";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "PRTID,PRTNAME,ACCID,NOUSED,STATETAG,LASTOP,LASTDATE";
		String strwhere = "accid=" + htp.getMaccid() + " and statetag=1";
		if (ipstr.length() > 0)
			strwhere += " and ipstr='" + ipstr + "'";
		if (noused < 2)
			strwhere += " and NOUSED=" + noused;

		if (!Func.isNull(findbox))
			strwhere += " and prtname like '%" + findbox + "%' ";

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Printset dal = new Printset();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// ===================================
	// 分页获取职员列表

	protected void GetEmployeList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// {"flyang":"20150107","rows":10,"page":1,"fieldlist":"Warehouseid,Warehousename","sort":"Warehouseid","order":"asc"}
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : " epname ";
		// String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		int loginid = jsonObject.has("loginid") ? Integer.parseInt(jsonObject.getString("loginid")) : 2;
		// loginid:0=禁止登录，1=允许登录，2=所有
		int downbj = jsonObject.has("downbj") ? Integer.parseInt(jsonObject.getString("downbj")) : 0;
		int noused = jsonObject.has("noused") ? Integer.parseInt(jsonObject.getString("noused")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String epname = jsonObject.has("epname") ? jsonObject.getString("epname") : "";
		String epno = jsonObject.has("epno") ? jsonObject.getString("epno") : "";
		String mobile = jsonObject.has("mobile") ? jsonObject.getString("mobile") : "";
		String lastdate = jsonObject.has("lastdate") ? jsonObject.getString("lastdate") : "";
		String sort = " epname,epid ";

		long accid = htp.getMaccid();
		if (accid == 0) {
			if (fieldlist.equals("*") || fieldlist.equals(""))
				fieldlist = "a.EPID,a.EPNO,a.EPNAME,a.ACCID,a.LEVELID,a.QXSTR,a.SEX,a.MOBILE,a.ADDRESS,a.POSTCODE,a.TEL,a.IDNO,a.WORKDATE,a.DUTY,a.REMARK,a.NOUSED,a.PASSKEY,a.PASSWORD,a.STATETAG,A.HOUSEID,B.HOUSENAME,C.LEVELNAME0 as LEVELNAME";
		} else {
			if (fieldlist.equals("*") || fieldlist.equals(""))
				fieldlist = "a.EPID,a.EPNO,a.EPNAME,a.ACCID,a.LEVELID,a.QXSTR,a.SEX,a.MOBILE,a.ADDRESS,a.POSTCODE,a.TEL,a.IDNO,a.WORKDATE,a.DUTY,a.REMARK,a.NOUSED,a.PASSKEY,a.PASSWORD,a.STATETAG,A.HOUSEID,B.HOUSENAME,C.LEVELNAME";
		}

		String strwhere = " a.ACCID=" + accid;
		if (downbj == 0)
			strwhere += " and a.STATETAG=1 ";
		// if (ywly < 2) qry += " and a.ywly=" + ywly;//ywly=0
		// 只查询手机端增加的单据，用于向erp传数据
		if (loginid == 0)
			strwhere += " and a.passkey=0";
		else if (loginid == 1)
			strwhere += " and a.passkey=1";

		if (noused < 2)
			strwhere += " and a.NOUSED=" + noused;
		if (!findbox.equals(""))
			strwhere += " and (a.epname like '%" + findbox + "%' or a.epno like '%" + findbox.toUpperCase() + "%' or a.mobile like '%" + findbox + "%' or a.shortname like '%" + findbox.toUpperCase() + "%')";
		if (!lastdate.equals(""))
			strwhere += " and a.lastdate>to_date('" + lastdate + "','yyyy-mm-dd hh24:mi:ss')";
		if (!epname.equals(""))
			strwhere += " and (a.EPNAME like '%" + epname + "%' or a.shortname like '%" + epname.toUpperCase() + "%')";
		if (!epno.equals(""))
			strwhere += " and a.EPNO like '%" + epno.toUpperCase() + "%'";
		if (mobile != null && mobile.length() > 0)
			strwhere += " and a.MOBILE like '%" + mobile + "%'";
		if (houseid > 0)
			strwhere += " and a.houseid=" + houseid;

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Employe dal = new Employe();

		if (page < 0) {// 导出excel
			// String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			String retcs = dal.GetTable2Excel(qp, strwhere, fieldlist, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取指定职员id信息
	protected void GetEmployeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long accid = htp.getMaccid();
		String strwhere = " a.EPID=" + epid + " and a.STATETAG=1 and a.ACCID=" + accid;
		if (accid != 0)
			strwhere += " and a.ACCID=" + accid;
		if (fieldlist.equals("*") || fieldlist.equals(""))
			if (accid == 0)
				fieldlist = "a.EPID,a.EPNO,a.EPNAME,a.ACCID,a.LEVELID,a.QXSTR,a.SEX,a.MOBILE,a.ADDRESS,a.POSTCODE,a.TEL,a.IDNO,a.WORKDATE,a.DUTY,a.REMARK,a.NOUSED,a.PASSKEY,a.PASSWORD,a.STATETAG,a.LASTOP,a.LASTDATE,A.HOUSEID,B.HOUSENAME,c.levelname0 as levelname,a.ontime,a.offtime";
			else
				fieldlist = "a.EPID,a.EPNO,a.EPNAME,a.ACCID,a.LEVELID,a.QXSTR,a.SEX,a.MOBILE,a.ADDRESS,a.POSTCODE,a.TEL,a.IDNO,a.WORKDATE,a.DUTY,a.REMARK,a.NOUSED,a.PASSKEY,a.PASSWORD,a.STATETAG,a.LASTOP,a.LASTDATE,A.HOUSEID,B.HOUSENAME,c.levelname,a.ontime,a.offtime";
		Employe dal = new Employe();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 通过职员代号获取职员id
	protected void GetEmployeByNo(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String epno = jsonObject.has("epno") ? jsonObject.getString("epno") : "";
		epno = epno.toUpperCase();
		if (epno.equals("") || !Func.isNumAndEnCh(epno)) {
			WriteResult(response, 0, "员工账号异常！");
			return;
		}
		String strwhere = " a.EPNO='" + epno + "' and a.ACCID=" + htp.getMaccid() + " and a.STATETAG=1";
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.EPID,a.EPNO,a.EPNAME,a.ACCID,a.LEVELID,a.QXSTR,a.SEX,a.MOBILE,a.ADDRESS,a.POSTCODE,a.TEL,a.IDNO,a.WORKDATE,a.DUTY,a.REMARK,a.NOUSED,a.PASSKEY,a.PASSWORD,a.STATETAG,a.LASTOP,a.LASTDATE,A.HOUSEID,B.HOUSENAME";
		Employe dal = new Employe();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 删除指定职员id信息
	protected void DelEmployeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许删除记录！");
			return;
		}

		Employe dal = new Employe();
		dal.setEpid(epid);
		dal.setLastop(lastop);
		dal.setAccid(accid);
		// dal.setAccbegindate(htp.getAccdate());

		WriteResult(response, dal.Delete(), dal.getErrmess());

	}

	// 更新指定职员id信息
	protected void UpdateEmployeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许更改记录！");
			return;
		}

		Employe dal = new Employe();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(accid);
		dal.setLastop(lastop);

		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 新增职工记录
	protected void AddEmployeRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		int nohouseid = jsonObject.has("nohouseid") ? Integer.parseInt(jsonObject.getString("nohouseid")) : 0;
		// erp转数据用 nohouseid=1，表示不判断店铺，erp中的职员没所属店铺
		Employe dal = new Employe();

		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setStatetag(1);
		dal.setNoused(0);

		WriteResult(response, dal.Append(nohouseid), dal.getErrmess());
	}
	// ==============================
	// 删除指定店铺

	protected void DelWarehouseByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许删除记录！");
			return;
		}

		Warehouse dal = new Warehouse();
		dal.setHouseid(houseid);
		dal.setLastop(lastop);
		dal.setAccid(accid);
		// dal.setAccbegindate(htp.getAccdate());
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 获取指定店铺id信息
	protected void GetWarehouseByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		if (houseid == 0) {
			WriteResult(response, 0, "店铺id参数无效");
			return;
		}

		String strwhere = " houseid=" + houseid;// +" and statetag=1";
		strwhere += " and accid=" + htp.getMaccid();
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "HOUSEID,HOUSENAME,ACCID,ADDRESS,TEL,REMARK,NOUSED,STATETAG,LASTOP,LASTDATE,ONTIME,OFFTIME,ONTIME1,OFFTIME1,ONTIME2,OFFTIME2,AREAM2,RENT ";

		Warehouse dal = new Warehouse();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 更改店铺
	protected void UpdateWarehouseByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许更改记录！");
			return;
		}
		Warehouse dal = new Warehouse();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(accid);
		dal.setLastop(lastop);
		WriteResult(response, dal.Update(htp.getPictjson()), dal.getErrmess());
	}

	// 成批新增店铺记录
	protected void CreateWarehouse(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Warehouse dal = new Warehouse();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.AppendMulti(jsonObject), dal.getErrmess());
	}

	// 获取店铺分类列表
	protected void GetHouselocanoList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String qry = " select distinct locano from warehouse ";
		qry += " where ACCID=" + htp.getMaccid() + " and length(locano)>0 and statetag=1 and noused=0  and rownum<20 ";
		Warehouse dal = new Warehouse();
		Table tb = new Table();

		tb = dal.GetTable(qry);
		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 新增店铺
	protected void AddWarehouseRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Warehouse dal = new Warehouse();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setUserid(htp.getUserid());
		dal.setStatetag(1);
		dal.setQxbj(htp.getQxbj());
		WriteResult(response, dal.Append(htp.getPictjson()), dal.getErrmess());
	}

	// 店铺帮助
	protected void GetWareHouseListHelp(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("WarehouseList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// {"flyang":"20150107","rows":10,"page":1,"fieldlist":"Warehouseid,Warehousename","sort":"Warehouseid","order":"asc"}
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		int qxfs = jsonObject.has("qxfs") ? Integer.parseInt(jsonObject.getString("qxfs")) : 0;
		// qxfs:1=允许查看的店铺，2=允许入库的店铺，3=允许出库的店铺

		int cxdr = jsonObject.has("cxdr") ? Integer.parseInt(jsonObject.getString("cxdr")) : 0;
		// cxdr=1,表示调入仓库帮助，允许查询所有仓库，不受权限控制
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String housename = jsonObject.has("housename") ? jsonObject.getString("housename") : "";

		String sort = " housename,houseid";// +order;
		// String qxpublic = htp.getQxpublic();
		int qxbj = htp.getQxbj();
		// if (Func.subString(qxpublic, 1, 1).equals("1"))
		// qxbj = 1;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		String strwhere = " ACCID=" + accid + " and STATETAG=1 and NOUSED=0";

		if (!housename.equals(""))
			strwhere += " and (HOUSENAME like '%" + housename + "%' or shortname like '%" + housename.toUpperCase() + "%')";
		if (!findbox.equals(""))
			strwhere += " and (HOUSENAME like '%" + findbox + "%' or shortname like '%" + findbox.toUpperCase() + "%')";
		// if (noused != "" && int.Parse(noused) < 2) qry += " and NOUSED=" +
		// noused;

		if (qxbj == 1) // 1 启用权限控制 //cxdr=1,表示调入仓库帮助，允许查询所有仓库，不受权限控制
		{
			if (cxdr == 0)
				strwhere += " and exists (SELECT 1 FROM EMPLOYEHOUSE b WHERE a.HOUSEID=b.HOUSEID AND b.EPID=" + htp.getUserid() + ")";
			// qxfs:1=查看店铺，2=入库店铺，3=出库店铺
			if (qxfs == 1) {
				strwhere += " and exists (SELECT 1 FROM EMPLOYEHOUSE c WHERE a.HOUSEID=c.HOUSEID AND c.EPID=" + htp.getUserid() + ")";
			} else if (qxfs == 2) {
				strwhere += " and exists (SELECT 1 FROM EMPLOYEHOUSEin c WHERE a.HOUSEID=c.HOUSEID AND c.EPID=" + htp.getUserid() + ")";
			} else if (qxfs == 3) {
				strwhere += " and exists (SELECT 1 FROM EMPLOYEHOUSEout c WHERE a.HOUSEID=c.HOUSEID AND c.EPID=" + htp.getUserid() + ")";
			}
		}
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "HOUSEID,HOUSENAME,ACCID,ADDRESS,TEL,NOUSED,STATETAG,LASTOP,LASTDATE,ONTIME,OFFTIME,AREAM2,RENT";
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Warehouse dal = new Warehouse();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 店铺分页列表
	protected void WarehouseList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("WarehouseList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// {"flyang":"20150107","rows":10,"page":1,"fieldlist":"Warehouseid,Warehousename","sort":"Warehouseid","order":"asc"}
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String housename = jsonObject.has("housename") ? jsonObject.getString("housename") : "";
		String lastdate = jsonObject.has("lastdate") ? jsonObject.getString("lastdate") : "";
		String address = jsonObject.has("address") ? jsonObject.getString("address") : "";
		String tel = jsonObject.has("tel") ? jsonObject.getString("tel") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		int noused = jsonObject.has("noused") ? Integer.parseInt(jsonObject.getString("noused")) : 0;
		int downbj = jsonObject.has("downbj") ? Integer.parseInt(jsonObject.getString("downbj")) : 0;

		String sort = " housename,houseid ";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "HOUSEID,HOUSENAME,ACCID,ADDRESS,TEL,REMARK,NOUSED,STATETAG,LASTOP,LASTDATE,ONTIME,OFFTIME,ONTIME1,OFFTIME1,ONTIME2,OFFTIME2,AREAM2,RENT";
		String strwhere = "accid=" + htp.getMaccid() + " and statetag=1";
		if (downbj == 0)
			strwhere += " and STATETAG=1";
		if (!lastdate.equals(""))
			strwhere += " and lastdate>to_date('" + lastdate + "','yyyymmddhh24miss')";
		// if (ywly < 2) qry += " and ywly=" + ywly;//ywly=0
		// 只查询手机端增加的单据，用于向erp传数据

		if (noused < 2)
			strwhere += " and NOUSED=" + noused;

		if (!housename.equals(""))
			strwhere += " and (HOUSENAME like '%" + housename + "%' or shortname like '%" + housename.toUpperCase() + "%')";
		if (!address.equals(""))
			strwhere += " and address like '%" + address + "%'";
		if (!tel.equals(""))
			strwhere += " and tel like '%" + tel + "%'";

		if (!Func.isNull(findbox))
			strwhere += " and (housename like '%" + findbox + "%' or shortname like '%" + findbox.toUpperCase() + "%')";

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Warehouse dal = new Warehouse();

		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// ==============================
	// 删除指定供应商
	protected void DelProvideByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// ==============================
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许删除记录！");
			return;
		}
		// ==============================
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		Provide dal = new Provide();
		dal.setProvid(provid);
		dal.setLastop(lastop);
		dal.setAccid(accid);
		dal.setAccbegindate(htp.getAccdate());
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 用于从excel中导入供应商编码
	protected void AppendProvide(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Provide dal = new Provide();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.LoadFormXLS(), dal.getErrmess());
	}

	// 查询供应商名称是否重复
	protected void FindProvidebyname(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		String provname = jsonObject.has("provname") ? jsonObject.getString("provname").replace("'", "''") : "";
		Provide dal = new Provide();
		dal.setAccid(htp.getMaccid());
		dal.setProvid(provid);
		dal.setProvname(provname);

		if (dal.Exists())
			WriteResult(response, 0, "供应商名称:" + provname + " 已存在！");
		else
			WriteResult(response, 1, "供应商名称:" + provname + " 可用！");
	}

	// 获取指定供应商id信息
	protected void GetProvideByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		if (provid == 0) {
			WriteResult(response, 0, "供应商id参数无效");
			return;
		}

		String strwhere = "  provid=" + provid;// +" and statetag=1";
		strwhere += " and accid=" + htp.getMaccid();
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "PROVID,PROVNAME,SHORTNAME,ACCID,ADDRESS,POSTCODE,TEL,LINKMAN,MOBILE,BANKNAME,TAXNO,ACCOUNTNO,REMARK,NOUSED,STATETAG,PRICETYPE,DISCOUNT,LASTOP,LASTDATE";

		Provide dal = new Provide();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 更改供应商
	protected void UpdateProvideByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// ==============================
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许更改记录！");
			return;
		}
		// ==============================

		Provide dal = new Provide();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(accid);
		dal.setLastop(lastop);
		dal.setQxbj(htp.getQxbj());
		dal.setUserid(htp.getUserid());
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 新增供应商
	protected void AddProvideRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Provide dal = new Provide();
		// dal.setUserid(htp.getUserid());
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setUserid(htp.getUserid());
		dal.setStatetag(1);
		dal.setQxbj(htp.getQxbj());

		WriteResult(response, dal.Append(), dal.getErrmess());
	}

	// 分页获取供应商列表 帮助用
	protected void GetProvideListHelp(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int showall = jsonObject.has("showall") ? Integer.parseInt(jsonObject.getString("showall")) : 0;
		String provname = jsonObject.has("provname") ? jsonObject.getString("provname").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		//		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "provname";
		//		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		String sort = " provname,provid";
		long accid = htp.getMaccid();
		String strwhere = "";
		if (showall == 1)
			strwhere = " (ACCID=" + accid + " or provid=0) and STATETAG=1 and NOUSED=0";
		else
			strwhere = " ACCID=" + accid + " and STATETAG=1 and NOUSED=0";

		// if (noused == null || noused == "" || int.Parse(noused) > 2) noused =
		// "0";
		// if (int.Parse(noused) < 2) qry += " and NOUSED=" + noused;

		if (provname != null && provname.length() > 0)
			strwhere += " and (provname like '%" + provname + "%' or mobile like '%" + provname + "%') ";
		if (findbox != null && findbox.length() > 0)
			strwhere += " and (provname like '%" + findbox + "%' or mobile like '%" + findbox + "%' or shortname like '%" + findbox.toUpperCase() + "%') ";
		if (htp.getQxbj() == 1) {// 1 启用权限控制
			//			strwhere += " and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
			strwhere += " and exists (select 1 from employeprov x where a.provid=x.provid and x.EPID=" + htp.getUserid() + ")";
		}

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "PROVID,PROVNAME,SHORTNAME,ACCID,ADDRESS,POSTCODE,TEL,LINKMAN,MOBILE,BANKNAME,TAXNO,ACCOUNTNO,REMARK,NOUSED,STATETAG,PRICETYPE,DISCOUNT,LASTOP,LASTDATE";
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Provide dal = new Provide();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 供应商分页列表
	protected void ProvideList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("ProvideList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// {"flyang":"20150107","rows":10,"page":1,"fieldlist":"Provideid,Providename","sort":"Provideid","order":"asc"}
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int noused = jsonObject.has("noused") ? Integer.parseInt(jsonObject.getString("noused")) : 0;
		String linkman = jsonObject.has("linkman") ? jsonObject.getString("linkman") : "";
		String mobile = jsonObject.has("mobile") ? jsonObject.getString("mobile") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";

		String provname = jsonObject.has("provname") ? jsonObject.getString("provname").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String sort = " provname,provid ";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "PROVID,PROVNAME,SHORTNAME,ACCID,ADDRESS,POSTCODE,TEL,LINKMAN,MOBILE,BANKNAME,TAXNO,ACCOUNTNO,REMARK,NOUSED,STATETAG,PRICETYPE,DISCOUNT,LASTOP,LASTDATE";
		String strwhere = "accid=" + htp.getMaccid() + " and statetag=1";
		if (noused < 2)
			strwhere += " and NOUSED=" + noused;

		if (findbox.length() > 0)
			strwhere += " and (provname like '%" + findbox + "%' or shortname like '%" + findbox.toUpperCase() + "%')";
		if (provname.length() > 0)
			strwhere += " and (provname like '%" + provname + "%' or shortname like '%" + provname.toUpperCase() + "%')";
		// strwhere += " and provname like '%" + provname + "%'";

		if (linkman.length() > 0)
			strwhere += " and linkman like '%" + linkman + "%'";
		if (mobile.length() > 0)
			strwhere += " and mobile like '%" + mobile + "%'";
		if (remark.length() > 0)
			strwhere += " and remark like '%" + remark + "%'";

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Provide dal = new Provide();

		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// ==============================
	// 删除指定客户
	protected void DelCustomerByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// ==============================
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许删除记录！");
			return;
		}
		// ==============================
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		Customer dal = new Customer();
		dal.setCustid(custid);
		dal.setLastop(htp.getUsername());
		dal.setAccid(htp.getMaccid());
		dal.setAccbegindate(htp.getAccdate());

		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 获取指定客户id信息
	protected void GetCustomerByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		if (custid == 0) {
			WriteResult(response, 0, "客户id参数无效");
			return;
		}

		String strwhere = "  a.custid=" + custid;// +" and statetag=1";
		strwhere += " and a.accid=" + htp.getMaccid();
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.CUSTID,a.CUSTNAME,a.SHORTNAME,a.ACCID,a.ADDRESS,a.POSTCODE,a.TEL,a.LINKMAN,a.MOBILE,a.BANKNAME,a.TAXNO,a.ACCOUNTNO,a.REMARK,a.NOUSED,a.STATETAG,a.PRICETYPE,a.DISCOUNT,a.LASTOP";

		Customer dal = new Customer();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 更改客户
	protected void UpdateCustomerByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// ==============================
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许更改记录！");
			return;
		}
		// ==============================
		Customer dal = new Customer();

		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(accid);
		dal.setLastop(lastop);
		dal.setQxbj(htp.getQxbj());
		dal.setUserid(htp.getUserid());
		WriteResult(response, dal.Update(), dal.getErrmess());

	}

	// 用于从excel中导入客户编码
	protected void AppendCustomer(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Customer dal = new Customer();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.LoadFormXLS(), dal.getErrmess());
	}

	// 用于从excel中导入职员编码
	protected void AppendEmploye(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Employe dal = new Employe();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.LoadFormXLS(), dal.getErrmess());
	}

	// 查询客户名称是否重复
	protected void FindCustomerbyname(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		String custname = jsonObject.has("custname") ? jsonObject.getString("custname").replace("'", "''") : "";
		Customer dal = new Customer();
		dal.setAccid(htp.getMaccid());
		dal.setCustid(custid);
		dal.setCustname(custname);
		if (dal.Exists())
			WriteResult(response, 0, "客户名称:" + custname + " 已存在！");
		else
			WriteResult(response, 1, "客户名称:" + custname + " 可用！");
	}

	// 新增客户
	protected void AddCustomerRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Customer dal = new Customer();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setStatetag(1);
		dal.setUserid(htp.getUserid());
		dal.setQxbj(htp.getQxbj());
		WriteResult(response, dal.Append(), dal.getErrmess());
	}

	// 获取客户区域列表
	protected void GetCustarealList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		String fieldlist = " distinct AREANAME ";
		String strwhere = " ACCID=" + htp.getMaccid() + " and length(AREANAME)>0 and statetag=1 and noused=0  and rownum<20 ";
		Customer dal = new Customer();
		Table tb = new Table();
		tb = dal.GetTable(strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取客户帮助列表
	protected void GetCustomerListHelp(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("CustomerList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int showbalcurr = jsonObject.has("showbalcurr") ? Integer.parseInt(jsonObject.getString("showbalcurr")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// int noused = jsonObject.has("noused") ?
		// Integer.parseInt(jsonObject.getString("noused")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String custname = jsonObject.has("custname") ? jsonObject.getString("custname").replace("'", "''") : "";
		String areaname = jsonObject.has("areaname") ? jsonObject.getString("areaname").replace("'", "''") : "";

		String sort = " custname,custid ";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.CUSTID,a.CUSTNAME,a.SHORTNAME,a.ACCID,a.ADDRESS,a.POSTCODE,a.TEL,a.LINKMAN,a.MOBILE,a.BANKNAME,a.TAXNO,a.ACCOUNTNO,a.REMARK,a.PRICETYPE,a.DISCOUNT";
		fieldlist += " ,a.xsnum";
		if (showbalcurr == 1)
			// fieldlist +=
			// ",f_getincomebal(to_char(sysdate,'yyyy-mm-dd'),a.accid,a.custid)
			// as balcurr";
			fieldlist += ",f_getincomebal2x(to_char(sysdate,'yyyy-mm-dd'),a.accid ,a.custid,0,'" + htp.getCalcdate() + "') as balcurr";

		String strwhere = " a.accid=" + htp.getMaccid() + " and a.statetag=1 and a.noused=0";
		// System.out.println("CustomerList 3 " + qry);

		if (!Func.isNull(findbox))
			strwhere += " and (a.custname like '%" + findbox + "%' or a.shortname like '%" + findbox.toUpperCase() + "%' or a.mobile like '%" + findbox + "%')";

		if (custname.length() > 0)
			strwhere += " and (a.custname like '%" + custname + "%' or a.shortname like '%" + custname.toUpperCase() + "%')";
		if (areaname.length() > 0)
			strwhere += " and a.areaname like '" + areaname + "%'";
		if (htp.getQxbj() == 1) // 1 启用权限控制
			strwhere += " and exists (select 1 from employecust x where a.custid=x.custid and x.EPID=" + htp.getUserid() + ")";

		//		strwhere += " and exists (select 1 from employecust x where a.custid=x.custid and x.EPID=" + htp.getUserid() + ")";

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Customer dal = new Customer();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 客户分页列表
	protected void CustomerList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("CustomerList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int noused = jsonObject.has("noused") ? Integer.parseInt(jsonObject.getString("noused")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// " Customerid ";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : " asc ";
		long handmanid = jsonObject.has("handmanid") ? Long.parseLong(jsonObject.getString("handmanid")) : 0;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String custname = jsonObject.has("custname") ? jsonObject.getString("custname").replace("'", "''") : "";
		String mobile = jsonObject.has("mobile") ? jsonObject.getString("mobile") : "";
		String linkman = jsonObject.has("linkman") ? jsonObject.getString("linkman") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String areaname = jsonObject.has("areaname") ? jsonObject.getString("areaname") : "";
		String address = jsonObject.has("address") ? jsonObject.getString("address") : "";
		String lastdate = jsonObject.has("lastdate") ? jsonObject.getString("lastdate") : "";

		// string custname = YTJR.COMMON.PubObj.sink("custname",
		// MethodType.Get);
		// string mobile = YTJR.COMMON.PubObj.sink("mobile", MethodType.Get);
		// string linkman = YTJR.COMMON.PubObj.sink("linkman", MethodType.Get);
		// string remark = YTJR.COMMON.PubObj.sink("remark", MethodType.Get);
		// string areaname = YTJR.COMMON.PubObj.sink("areaname",
		// MethodType.Get);
		// string address = YTJR.COMMON.PubObj.sink("address", MethodType.Get);
		// string lastdate = YTJR.COMMON.PubObj.sink("lastdate",
		// MethodType.Get);

		String sort = " custname,custid ";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.CUSTID,a.CUSTNAME,a.SHORTNAME,a.ACCID,a.ADDRESS,a.POSTCODE,a.TEL,a.LINKMAN,a.MOBILE,a.BANKNAME,a.TAXNO,a.ACCOUNTNO,a.REMARK,a.NOUSED,a.STATETAG,a.PRICETYPE,a.DISCOUNT,a.LASTOP";
		String strwhere = " a.accid=" + htp.getMaccid() + " and a.statetag=1";
		// System.out.println("CustomerList 3 " + qry);
		if (noused < 2)
			strwhere += " and a.NOUSED=" + noused;

		if (!Func.isNull(findbox))
			strwhere += " and (a.custname like '%" + findbox + "%' or a.mobile like '%" + findbox + "%' or a.shortname like '%" + findbox.toUpperCase() + "%')";
		if (lastdate != null && lastdate.length() > 0)
			strwhere += " and lastdate>to_date('" + lastdate + "','yyyymmddhh24miss')";

		if (custname.length() > 0)
			strwhere += " and (a.custname like '%" + custname + "%' or a.shortname like '%" + custname.toUpperCase() + "%')";
		if (linkman.length() > 0)
			strwhere += " and a.linkman like '%" + linkman + "%'";
		if (mobile.length() > 0)
			strwhere += " and a.mobile like '%" + mobile + "%'";
		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";
		if (address.length() > 0)
			strwhere += " and a.address like '%" + address + "%'";
		if (areaname.length() > 0)
			strwhere += " and a.areaname like '%" + areaname + "%'";
		if (handmanid > 0)
			strwhere += " and a.handmanid =" + handmanid;

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Customer dal = new Customer();

		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 客户品牌列表
	protected void ListCustbrand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int pricetype0 = jsonObject.has("pricetype0") ? Integer.parseInt(jsonObject.getString("pricetype0")) : 0;
		float discount0 = jsonObject.has("discount0") ? Float.parseFloat(jsonObject.getString("discount0")) : 0;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		String fieldlist = " a.brandid,a.brandname,nvl(b.pricetype," + pricetype0 + ") as pricetype,nvl(b.discount," + discount0 + ") as discount";
		String strwhere = " a.statetag=1 and a.noused=0 and a.accid=" + htp.getMaccid();
		if (!findbox.equals(""))
			strwhere += " and a.brandname like '%" + findbox + "%'";
		String sort = " brandid ";
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Custbrand dal = new Custbrand();
		dal.setCustid(custid);
		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 保存客户品牌折扣 同UpdateCustbrand
	protected void WriteCustbrand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Custbrand dal = new Custbrand();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		WriteResult(response, dal.Update(), dal.getErrmess());

	}

	// 更改品牌折扣
	protected void UpdateCustbrand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Custbrand dal = new Custbrand();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		WriteResult(response, dal.Update(), dal.getErrmess());

	}

	// 删除品牌折扣
	protected void DelCustbrand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Custbrand dal = new Custbrand();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		WriteResult(response, dal.Delete(), dal.getErrmess());

	}

	// 增加客户品牌折扣
	protected void AddCustbrand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Custbrand dal = new Custbrand();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		WriteResult(response, dal.Append(), dal.getErrmess());

	}

	// ==============================
	// 删除指定部门
	protected void DelDepartmentByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// ==============================
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许删除记录！");
			return;
		}
		// ==============================
		long dptid = jsonObject.has("dptid") ? Long.parseLong(jsonObject.getString("dptid")) : 0;
		Department dal = new Department();
		dal.setDptid(dptid);
		dal.setLastop(htp.getUsername());
		dal.setAccid(htp.getMaccid());
		dal.setAccbegindate(htp.getAccdate());

		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 获取指定部门id信息
	protected void GetDepartmentByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long dptid = jsonObject.has("dptid") ? Long.parseLong(jsonObject.getString("dptid")) : 0;
		if (dptid == 0) {
			WriteResult(response, 0, "部门id参数无效");
			return;
		}

		String strwhere = "  dptid=" + dptid;// +" and statetag=1";
		strwhere += " and accid=" + htp.getMaccid();
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "DPTID,DPTNAME,ACCID,NOUSED,STATETAG,LASTOP,LASTDATE";

		Department dal = new Department();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 更改部门
	protected void UpdateDepartmentByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// ==============================
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许更改记录！");
			return;
		}
		// ==============================
		Department dal = new Department();

		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		// dal.setUserid(htp.getUserid());

		WriteResult(response, dal.Update(), dal.getErrmess());

	}

	// 新增部门
	protected void AddDepartmentRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Department dal = new Department();
		// dal.setUserid(htp.getUserid());
		// System.out.println("adddepartment 1");
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		// System.out.println("adddepartment 2");
		dal.setStatetag(1);
		// System.out.println("adddepartment 3");

		WriteResult(response, dal.Append(), dal.getErrmess());
	}

	// 部门分页列表
	protected void DepartmentList(HttpServletResponse response, HttpInfo htp, int fs) throws ServletException, IOException {
		// System.out.println("DepartmentList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int downbj = jsonObject.has("downbj") ? Integer.parseInt(jsonObject.getString("downbj")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		int noused = jsonObject.has("noused") ? Integer.parseInt(jsonObject.getString("noused")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// " Departmentid ";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : " asc ";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String sort = " dptname,dptid ";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "DPTID,DPTNAME,ACCID,NOUSED,STATETAG,LASTOP,LASTDATE";
		long accid = htp.getMaccid();
		String strwhere;

		if (fs == 1)
			strwhere = " (accid=" + accid + " or dptid=0)";
		else
			strwhere = " accid=" + accid + " and dptid>0";
		if (downbj == 0)
			strwhere += " and STATETAG=1";
		if (noused < 2)
			strwhere += " and NOUSED=" + noused;

		if (!Func.isNull(findbox))
			strwhere += " and (dptname like '%" + findbox + "%' or shortname like '%" + findbox.toUpperCase() + "%')";

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Department dal = new Department();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// ==============================
	// 新增期初应付款记录(从excel中导入)
	protected void AddFirstpaycurrxls(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String housename = jsonObject.has("housename") ? jsonObject.getString("housename") : "";
		String provname = jsonObject.has("provname") ? jsonObject.getString("provname").replace("'", "''") : "";
		float curr = jsonObject.has("curr") ? Float.parseFloat(jsonObject.getString("curr")) : 0;
		Firstpaycurr dal = new Firstpaycurr();
		dal.setCurr(curr);
		dal.setAccid(htp.getMaccid());
		dal.setRemark(remark);
		dal.setHandno(handno);
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.AppendXLS(provname, housename), dal.getErrmess());

	}

	// 新增期初应付款记录(从excel中导入)
	protected void AddFirstIncomecurrxls(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String housename = jsonObject.has("housename") ? jsonObject.getString("housename") : "";
		String custname = jsonObject.has("custname") ? jsonObject.getString("custname").replace("'", "''") : "";
		float curr = jsonObject.has("curr") ? Float.parseFloat(jsonObject.getString("curr")) : 0;
		Firstincomecurr dal = new Firstincomecurr();
		dal.setCurr(curr);
		dal.setAccid(htp.getMaccid());
		dal.setRemark(remark);
		dal.setHandno(handno);
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.AppendXLS(custname, housename), dal.getErrmess());
	}

	// 新增临时盘点单(从excel中导入)
	protected void AddTempcheckmxls(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String colorname = jsonObject.has("colorname") ? jsonObject.getString("colorname") : "";
		String sizename = jsonObject.has("sizename") ? jsonObject.getString("sizename") : "";
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		Tempcheckm dal = new Tempcheckm();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setAmount(amount);

		WriteResult(response, dal.AppendXLS(wareno, colorname, sizename), dal.getErrmess());

	}

	// 重新设置建账日期
	protected void ChangeAccbegindate(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String begindate = jsonObject.has("begindate") ? jsonObject.getString("begindate") : "";
		Accreg dal = new Accreg();
		dal.setAccid(htp.getMaccid());
		dal.setBegindate(begindate);
		int housecostbj = htp.getHousecostbj();
		WriteResult(response, dal.doChangeAccbegindate(htp.getAccdate(), htp.getUsername(), housecostbj), dal.getErrmess());

	}

	// 分页获取公告记录
	protected void GetSysnoticeList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 1;
		// long userid = jsonObject.has("userid") ?
		// Long.parseLong(jsonObject.getString("userid")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "notedate";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "desc";
		sort += " " + order + ",ggid";
		// if (statetag == null || statetag == "") statetag = "1";
		// if (userid == null || userid == "") userid = "0";
		String strwhere = " LYTAG<=1 ";
		if (statetag < 2)
			strwhere += " and STATETAG=" + statetag;

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "GGID,NOTEDATE,TOPICAL,CONTENT,OPERANT,CHECKMAN,STATETAG,LASTDATE";
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Sysnotice dal = new Sysnotice();
		tb = dal.GetTable(qp, strwhere, fieldlist, htp.getUserid());

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取指定公告id信息
	protected void GetSysnoticeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		float ggid = jsonObject.has("ggid") ? Float.parseFloat(jsonObject.getString("ggid")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "GGID,NOTEDATE,TOPICAL,CONTENT,OPERANT,CHECKMAN,STATETAG,LASTDATE";
		String strwhere = " ggid= " + ggid;

		Table tb = new Table();
		Sysnotice dal = new Sysnotice();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 新增公告记录
	protected void AddSysnoticeRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Sysnotice dal = new Sysnotice();

		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setStatetag(0);
		dal.setLytag(1);
		dal.setOperant(htp.getUsername());

		WriteResult(response, dal.Append(), dal.getErrmess());
	}

	// 更改系统公告
	protected void UpdateSysnoticeRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// float ggid = jsonObject.has("ggid") ?
		// Float.parseFloat(jsonObject.getString("ggid")) : 0;
		Sysnotice dal = new Sysnotice();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setStatetag(0);
		// dal.setLytag(1);
		dal.setOperant(htp.getUsername());

		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 写阅读公告标志
	protected void WriteSysnotice(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		float ggid = jsonObject.has("ggid") ? Float.parseFloat(jsonObject.getString("ggid")) : 0;
		Sysreadnotice dal = new Sysreadnotice();
		dal.setGgid(ggid);
		dal.setEpid(htp.getUserid());
		WriteResult(response, dal.Append(), dal.getErrmess());
	}

	// 更改系统公告状态
	protected void ChangeSysnotice(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		float ggid = jsonObject.has("ggid") ? Float.parseFloat(jsonObject.getString("ggid")) : 0;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 0;
		Sysnotice dal = new Sysnotice();
		dal.setGgid(ggid);
		dal.setStatetag(statetag);
		dal.setOperant(htp.getUsername());
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 分页显示用户充值记录，管理平台用
	protected void ListAccmoney(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		if (htp.getMaccid() > 0) {
			WriteResult(response, 0, "企业账号无效！");
			return;
		}
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = "a.id,a.accid,a.notedate,a.curr,a.paycurr,a.handno,a.remark,a.ly,b.accname,b.company,b.mobile,c.PROVINCE||c.city as areaname,a.lastop";
		fieldlist += ",d.epname as handmanname,b.validdate,b.usernum";
		String strwhere = "  a.accid>1000 and a.paycurr>0 and a.fs=0";

		long levelid = htp.getLevelid();
		long userid = htp.getUserid();
		// levelid:
		// 0=系统管理员,1=店员（代理业务员）,2=店长（代理业务主管）,3=财务,4=经理,5=老板,6=督导（公司主管）,7=收银员（公司业务）,8=AD客服,9=库管(程序员)
		if (levelid == 1 || levelid == 7) // 业务员只允许查看自已的注册用户
		{
			strwhere += " and b.handmanid=" + userid;
		} else if (levelid == 2 || levelid == 6) // 业务主管可以查看本店铺所有业务员的注册用户
		{
			strwhere += " and  exists ( select 1 from employe x1  where x1.houseid=d.houseid and x1.epid=" + userid + ") ";
			// qry += " and exists (select 1 from employe x where
			// b.handmanid=x.epid and exists ( select 1 from employe x1 where
			// x1.houseid=x.houseid and x1.epid=" + userid + ") )";
		}

		if (findbox != null && !findbox.equals(""))
			strwhere += " and (b.accname like '%" + findbox.toUpperCase() + "%' or b.mobile like '%" + findbox + "%' or b.company like '%" + findbox + "%') ";
		String sort = " notedate desc,id";
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Accmoney dal = new Accmoney();
		if (page < 0) {// 导出excel
			// String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			String retcs = dal.GetTable2Excel(qp, strwhere, fieldlist, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Table tb = new Table();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 分页查询在线用户
	protected void ListUseronline(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		// String fieldlist =
		// "a.logindate,a.epid,b.epname,b.mobile,b.accid,c.accname,c.company,a.devicetype,c.balcurr";

		String strwhere = " c.accid>1000 and exists ( select 1 from mobilearea d where substr(c.mobile,1,7)=d.mobile)";

		long levelid = htp.getLevelid();
		long userid = htp.getUserid();

		if (levelid == 1 || levelid == 7) // 业务员只允许查看自已的注册用户
		{
			strwhere += " and c.handmanid=" + userid;
		} else if (levelid == 2 || levelid == 6) // 业务主管可以查看本店铺所有业务员的注册用户
		{
			strwhere += " and exists (select 1 from employe x where c.handmanid=x.epid and exists ( select 1 from employe x1  where x1.houseid=x.houseid and x1.epid=" + userid + ") )";
		}

		String sort = " logindate desc,epid";

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Useronline dal = new Useronline();
		// if (findbox != null && !findbox.equals(""))
		// strwhere += " and (b.epname like '%" + findbox + "%' or b.mobile like
		// '%" + findbox + "%' or c.accname like '%" + findbox.toUpperCase() +
		// "%' or c.company like '%" + findbox + "%') ";

		tb = dal.GetTable(qp, strwhere, findbox);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 删除单据---erp接口专用
	protected void DeleteNoteno(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		String tablename = jsonObject.has("tablename") ? jsonObject.getString("tablename") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		long accid = htp.getMaccid();
		if (tablename.equals("") || noteno.equals("")) {
			WriteResult(response, 0, "参数无效！");
			return;
		}
		tablename = tablename.toUpperCase();
		String qry = "begin ";
		if (tablename.compareTo("WAREOUTH") == 0) {
			qry += "\n  update wareouth set statetag=2,lastdate=sysdate where accid=" + accid + " and noteno='" + noteno + "';";
		} else {
			qry += "\n  update " + tablename + " set statetag=2,lastdate=sysdate where accid=" + accid + " and noteno='" + noteno + "';";
		}
		qry += "\n end; ";
		if (DbHelperSQL.ExecuteSql(qry) < 0) {
			WriteResult(response, 0, "操作异常！");
		} else {
			pFunc.myWriteLog(accid, "erp同步", "【删除单据】表代号:" + tablename + ",单据号:" + noteno, htp.getUsername());// 写日志
			WriteResult(response, 1, "操作完成！");
		}
	}

	// 接收ERP采购入库单传入app
	protected void ErpNote2App(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String qry = jsonObject.has("sql") ? jsonObject.getString("sql") : "";
		if (qry.equals("")) {
			WriteResult(response, 0, "未传入可执行的语句！");
			return;
		}

		Map<String, ProdParam> param = new HashMap<String, ProdParam>();
		param.put("noteno", new ProdParam(Types.VARCHAR));
		// int ret = ;
		if (DbHelperSQL.ExecuteProc(qry, param) < 0) {
			WriteResult(response, 0, "操作异常！");
			return;
		}
		// 取返回值
		// String noteno = param.get("noteno").getParamvalue().toString();
		WriteResult(response, 1, param.get("noteno").getParamvalue().toString());

	}

	// 获取系统角色列表 v2
	protected void GetSysroleList(HttpServletResponse response, HttpInfo htp, int fs) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = "levelid,levelname";
		String strwhere = "levelid<100";
		if (fs == 1)
			strwhere += " and levelid>0";
		String order = " levelid";
		Userrole dal = new Userrole();
		Table tb = new Table();
		tb = dal.GetTable(strwhere, fieldlist, order);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 成批写角色功能授权记录 用户账号调用
	protected void WriteAllRoleprog(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long levelid = jsonObject.has("levelid") ? Long.parseLong(jsonObject.getString("levelid")) : 0;
		// long progid = jsonObject.has("progid") ?
		// Long.parseLong(jsonObject.getString("progid")) : 0;
		int grpid = jsonObject.has("grpid") ? Integer.parseInt(jsonObject.getString("grpid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		if (htp.getMaccid() > 0 && levelid < 10) {
			WriteResult(response, 0, "参数异常！");
			return;
		}

		Roleprog dal = new Roleprog();
		dal.setLevelid(levelid);

		WriteResult(response, dal.Write1(value, grpid), dal.getErrmess());
	}

	// 写角色功能记录 用户账号调用
	protected void WriteRoleprog(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long levelid = jsonObject.has("levelid") ? Long.parseLong(jsonObject.getString("levelid")) : 0;
		long progid = jsonObject.has("progid") ? Long.parseLong(jsonObject.getString("progid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		// int defbj = 0;// 0=非默认 1=默认功能
		// if (value == 1) // 选中该功能
		// defbj = jsonObject.has("defbj") ?
		// Integer.parseInt(jsonObject.getString("defbj")) : 0;
		if (htp.getMaccid() > 0 && levelid < 10) {
			WriteResult(response, 0, "参数异常！");
			return;
		}

		Roleprog dal = new Roleprog();
		dal.setLevelid(levelid);
		dal.setProgid(progid);
		// dal.setDefbj(defbj);
		WriteResult(response, dal.Write1(value), dal.getErrmess());
	}

	// v2写角色功能记录 ok
	protected void WriteProgrole(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long levelid = jsonObject.has("levelid") ? Long.parseLong(jsonObject.getString("levelid")) : 0;
		long progid = jsonObject.has("progid") ? Long.parseLong(jsonObject.getString("progid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		int defbj = 0;// 0=非默认 1=默认功能
		if (value == 1) // 选中该功能
			defbj = jsonObject.has("defbj") ? Integer.parseInt(jsonObject.getString("defbj")) : 0;
		Roleprog dal = new Roleprog();
		dal.setLevelid(levelid);
		dal.setProgid(progid);
		dal.setDefbj(defbj);
		WriteResult(response, dal.Write(value), dal.getErrmess());
	}

	// ver2.0选择角色功能 ok
	protected void SelectProgrole(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long levelid = jsonObject.has("levelid") ? Long.parseLong(jsonObject.getString("levelid")) : 0;
		int hytag = jsonObject.has("hytag") ? Integer.parseInt(jsonObject.getString("hytag")) : 2;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		String qry = " select a.progid,b.progname,b.groupid,b.grpid,b.ordid,1 as selbj,a.fs,a.defbj ";
		qry += " ,case b.groupid when 1 then '销售' when 2 then '仓库' when 3 then '账务' when 4 then '分析' when 5 then '基础' else '***' end groupname";
		qry += " ,case b.grpid when 1 then '采购' when 2 then '销售' when 3 then '仓库' when 4 then '基础'  else '***' end sysname";
		qry += " ,b.grpname,b.csxxx,b.progno";
		qry += " from roleprog a left outer join sysprog b on a.progid=b.progid";
		qry += " where a.levelid=" + levelid + " and a.fs=0";
		if (hytag == 0)
			qry += " and (b.tag=0 or b.tag=2)";
		else if (hytag == 1)
			qry += " and (b.tag=1 or b.tag=2)";
		qry += " union all";
		qry += " select b.progid,b.progname,b.groupid,b.grpid,b.ordid,0 as selbj,0 as fs,0 as defbj ";
		qry += " ,case b.groupid when 1 then '销售' when 2 then '仓库' when 3 then '账务' when 4 then '分析' when 5 then '基础' else '***' end groupname";
		qry += " ,case b.grpid when 1 then '采购' when 2 then '销售' when 3 then '仓库' when 4 then '基础'  else '***' end sysname";
		qry += " ,b.grpname,b.csxxx,b.progno";
		qry += " from sysprog b where not exists (select 1 from roleprog a where a.fs=0 and a.progid=b.progid  and a.levelid=" + levelid + ")";
		if (hytag == 0)
			qry += " and (b.tag=0 or b.tag=2)";
		else if (hytag == 1)
			qry += " and (b.tag=1 or b.tag=2)";
		String sort = " progid ";

		Roleprog dal = new Roleprog();

		QueryParam qp = new QueryParam(page, pagesize, sort, qry);

		Table tb = new Table();

		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// ver2.0选择角色功能 ok
	protected void SelectProgrole1(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long levelid = jsonObject.has("levelid") ? Long.parseLong(jsonObject.getString("levelid")) : 0;
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "progid";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		//		int hytag = jsonObject.has("hytag") ? Integer.parseInt(jsonObject.getString("hytag")) : 2;
		int page = -1;//jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = 50;// jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		//		if (pagesize > 50)
		//			pagesize = 50;
		if (sort.equals("progid"))
			sort += " " + order;
		else if (sort.equals("appsysname"))
			sort += " " + order + ",grpname,ordid,progid";
		else if (sort.equals("pcsysname"))
			sort += " " + order + ",ordid,progid";
		else
			sort += " " + order + ",progid";
		String qry = " select a.progid,b.progname,b.grpid,b.ordid,1 as selbj,a.fs,a.defbj ";
		//		qry += " ,case b.groupid when 1 then '销售' when 2 then '仓库' when 3 then '账务' when 4 then '分析' when 5 then '基础' else '***' end groupname";
		qry += "\n ,case b.grpid when 1 then '采购' when 2 then '销售' when 3 then '仓库' when 4 then '基础'  else '***' end appsysname";
		qry += "\n ,b.grpname ,b.csxxx,b.progno,b.sysid,c.sysname as pcsysname";
		qry += "\n from roleprog a left outer join sysprog b on a.progid=b.progid";
		qry += "\n left outer join sysprogsys c on b.sysid=c.sysid";
		qry += "\n where a.levelid=" + levelid + " and a.fs=0";
		//		if (hytag == 0)
		//			qry += " and (b.tag=0 or b.tag=2)";
		//		else if (hytag == 1)
		//			qry += " and (b.tag=1 or b.tag=2)";
		qry += "\n union all";
		qry += "\n select b.progid,b.progname,b.grpid,b.ordid,0 as selbj,0 as fs,0 as defbj ";
		//		qry += " ,case b.groupid when 1 then '销售' when 2 then '仓库' when 3 then '账务' when 4 then '分析' when 5 then '基础' else '***' end groupname";
		qry += "\n ,case b.grpid when 1 then '采购' when 2 then '销售' when 3 then '仓库' when 4 then '基础'  else '***' end appsysname";
		qry += "\n ,b.grpname,b.csxxx,b.progno,b.sysid,c.sysname as pcsysname";
		qry += "\n from sysprog b ";
		qry += "\n left outer join sysprogsys c on b.sysid=c.sysid";
		qry += "\n where not exists (select 1 from roleprog a where a.fs=0 and a.progid=b.progid  and a.levelid=" + levelid + ")";
		//		if (hytag == 0)
		//			qry += " and (b.tag=0 or b.tag=2)";
		//		else if (hytag == 1)
		//			qry += " and (b.tag=1 or b.tag=2)";
		//		String sort = " progid ";

		Roleprog dal = new Roleprog();

		QueryParam qp = new QueryParam(page, pagesize, sort, qry);

		Table tb = new Table();

		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 删除指定角色id信息
	protected void DelUserroleByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许删除记录！");
			return;
		}

		long levelid = jsonObject.has("levelid") ? Long.parseLong(jsonObject.getString("levelid")) : 0;
		Userrole dal = new Userrole();
		dal.setLevelid(levelid);
		dal.setAccid(accid);
		dal.setLastop(lastop);
		WriteResult(response, dal.Delete(), dal.getErrmess());

	}

	// 更新指定角色id信息
	protected void UpdateUserroleByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许更改记录！");
			return;
		}

		// long levelid = jsonObject.has("levelid") ?
		// Long.parseLong(jsonObject.getString("levelid")) : 0;
		Userrole dal = new Userrole();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setLevelid(levelid);
		dal.setAccid(accid);
		dal.setLastop(lastop);
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 新增角色记录
	protected void AddUserroleRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许增加记录！");
			return;
		}
		Userrole dal = new Userrole();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(accid);
		dal.setLastop(lastop);
		WriteResult(response, dal.Append(), dal.getErrmess());
	}

	// 获取指定角色id信息
	protected void GetUserroleByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long levelid = jsonObject.has("levelid") ? Long.parseLong(jsonObject.getString("levelid")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "";
		// String fieldlist = YTJR.COMMON.PubObj.sink("fieldlist",
		// MethodType.Get);
		// string qry = " accid=" + accid+" and brandid="+brandid;
		String strwhere = "  a.levelid=" + levelid;// +" and statetag=1";
		// if (accid != 0) qry += " and accid=" + accid;
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.LEVELID,a.LEVELNAME,a.ACCID,a.XXSTR,a.LASTOP,a.LASTDATE";
		Userrole dal = new Userrole();
		Table tb = new Table();

		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 选择角色功能
	protected void SelectRoleprog(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long levelid = jsonObject.has("levelid") ? Long.parseLong(jsonObject.getString("levelid")) : 0;
		// long fs = jsonObject.has("fs") ?
		// Long.parseLong(jsonObject.getString("fs")) : 0;
		// fs:0=手机，1=pc
		String qry = " select a.progid,b.progname,c.sysname,b.sysid,b.ordid,'1' as selbj from roleprog a";
		qry += "\n left outer join sysprog b on a.progid=b.progid";
		qry += "\n join sysprogsys c on b.sysid=c.sysid";
		qry += "\n where a.fs=0 and a.levelid=" + levelid;
		qry += "\n and b.htag<10";
		qry += "\n union all";
		qry += "\n select b.progid,b.progname,c.sysname,b.sysid,b.ordid,'0' as selbj from sysprog b ";
		qry += "\n join sysprogsys c on b.sysid=c.sysid";
		qry += "\n where not exists (select 1 from roleprog a where a.progid=b.progid and a.fs=0 and a.levelid=" + levelid + ")";
		qry += "\n and b.htag<10";
		// System.out.println(qry);
		Sysprog dal = new Sysprog();
		Table tb = new Table();

		tb = dal.GetTable(qry);

		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 选择角色功能V2
	protected void SelectRoleprog2(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long levelid = jsonObject.has("levelid") ? Long.parseLong(jsonObject.getString("levelid")) : 0;
		long hytag = jsonObject.has("hytag") ? Long.parseLong(jsonObject.getString("hytag")) : 2;
		long grpid = jsonObject.has("grpid") ? Long.parseLong(jsonObject.getString("grpid")) : 5;

		long accid = htp.getMaccid();

		// String qry = " select a.progid,b.progname,b.groupid,b.ordid,1 as
		// selbj,a.fs,a.defbj ";
		// qry += " ,case b.groupid when 1 then '销售' when 2 then '仓库' when 3
		// then '账务' when 4 then '分析' when 5 then '基础' else '***' end
		// groupname";
		//
		//
		// qry += " from roleprog a left outer join sysprog b on
		// a.progid=b.progid";
		// qry += " where a.levelid=" + levelid + " and a.fs=0";
		// if (hytag == 0)
		// qry += " and (b.tag=0 or b.tag=2)";
		// else if (hytag == 1)
		// qry += " and (b.tag=1 or b.tag=2)";
		// qry += " union all";
		// qry += " select b.progid,b.progname,b.groupid,b.ordid,0 as selbj,0 as
		// fs,0 as defbj ";
		// qry += " ,case b.groupid when 1 then '销售' when 2 then '仓库' when 3
		// then '账务' when 4 then '分析' when 5 then '基础' else '***' end
		// groupname";

		String qry = " select a.progid,b.progname,b.grpid as groupid,b.ordid,1 as selbj,a.fs,a.defbj ,substr(b.grpname,2,20) as grpname,b.grpname as grpname0";
		qry += " ,case b.grpid when 1 then '采购' when 2 then '销售' when 3 then '仓库' when 4 then '基础'  else '***' end sysname";
		// qry += " ,case b.groupid when 1 then '销售' when 2 then '仓库' when 3
		// then '账务' when 4 then '分析' when 5 then '基础' when 6 then '其它' else
		// '***' end sysname";
		qry += " from roleprog a join sysprog b on a.progid=b.progid";
		// qry += " where a.fs=0 and b.groupid>=1 and b.groupid<=6 and
		// a.levelid=" + levelid;
		qry += " where a.fs=0 and b.grpid>=1 and b.grpid<=4  and a.levelid=" + levelid;
		if (grpid < 5)
			qry += " and b.grpid=" + grpid;
		qry += " and (b.nofree=0 or b.nofree=1 and exists (select 1 from accprog b1 where b.progid=b1.progid and b1.accid=" + accid + "))";
		if (hytag == 0)
			qry += " and (b.tag=0 or b.tag=2)";
		else if (hytag == 1)
			qry += " and (b.tag=1 or b.tag=2)";

		qry += " union all";
		qry += " select b.progid,b.progname,b.grpid as groupid,b.ordid,0 as selbj,0 as fs,0 as defbj,substr(b.grpname,2,20) as grpname,b.grpname as grpname0";
		// qry += " ,case b.groupid when 1 then '销售' when 2 then '仓库' when 3
		// then '账务' when 4 then '分析' when 5 then '基础' when 6 then '其它' else
		// '***' end sysname";
		qry += " ,case b.grpid when 1 then '采购' when 2 then '销售' when 3 then '仓库' when 4 then '基础'  else '***' end sysname";
		qry += " from sysprog b ";
		// qry += " where b.groupid>=1 and b.groupid<=6 and not exists (select 1
		// from roleprog a where a.progid=b.progid and a.fs=0 and a.levelid=" +
		// levelid + ")";
		qry += " where  b.grpid>=1 and b.grpid<=4 and not exists (select 1 from roleprog a where a.progid=b.progid and a.fs=0 and a.levelid=" + levelid + ")";
		if (grpid < 5)
			qry += " and b.grpid=" + grpid;

		qry += " and (b.nofree=0 or b.nofree=1 and exists (select 1 from accprog b1 where b.progid=b1.progid and b1.accid=" + accid + "))";

		if (hytag == 0)
			qry += " and (b.tag=0 or b.tag=2)";
		else if (hytag == 1)
			qry += " and (b.tag=1 or b.tag=2)";

		qry += " order by grpname0,groupid,ordid"; //
		Sysprog dal = new Sysprog();
		Table tb = new Table();
		tb = dal.GetTable(qry);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 取系统约定角色，在用户自定义角色中继承使用
	protected void GetListSysrole(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Userrole dal = new Userrole();
		String fieldlist = "levelid,levelname";
		String strwhere = "levelid>0 and levelid<100";
		String sort = "levelid";
		Table tb = new Table();
		tb = dal.GetTable(strwhere, fieldlist, sort);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取角色列表
	protected void GetUserroleList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "";
		// long levelid = jsonObject.has("levelid") ?
		// Long.parseLong(jsonObject.getString("levelid")) : 0;
		// int hytag = jsonObject.has("hytag") ?
		// Integer.parseInt(jsonObject.getString("hytag")) : 2;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = " LEVELID ";// +order;

		String strwhere = " (ACCID=0 or ACCID=" + htp.getMaccid() + ") and levelid>0 ";
		if (!Func.isNull(findbox))
			strwhere += " and LEVELNAME like '%" + findbox + "%'";
		// qry += ")";
		if (htp.getMaccid() == 0) {
			if (fieldlist.equals("*") || fieldlist.equals(""))
				fieldlist = "a.LEVELID,a.LEVELNAME0 as levelname,a.ACCID,a.XXSTR,a.LASTOP,a.LASTDATE,a.gLEVELID";
		} else {
			if (fieldlist.equals("*") || fieldlist.equals(""))
				fieldlist = "a.LEVELID,a.LEVELNAME,a.ACCID,a.XXSTR,a.LASTOP,a.LASTDATE,a.gLEVELID";
		}
		Userrole dal = new Userrole();
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// ============================================================
	// 取批发默认客户id
	protected void GetDefaultcust(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		Uparameter dal = new Uparameter();
		dal.setAccid(htp.getMaccid());
		if (dal.doGetDefaultcust() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}

	}

	// 写默认批发客户id参数
	protected void WriteDefaultcust(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		Uparameter dal = new Uparameter();
		dal.setAccid(htp.getMaccid());

		WriteResult(response, dal.doWriteDefaultcust(custid), dal.getErrmess());
	}

	// 写商品默认颜色参数
	protected void WriteDefaultcolor(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		Uparameter dal = new Uparameter();
		dal.setAccid(htp.getMaccid());

		WriteResult(response, dal.doWriteDefaultcolor(colorid), dal.getErrmess());
	}

	// 写商品默认尺码参数
	protected void WriteDefaultsize(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sizegroupno = jsonObject.has("sizegroupno") ? jsonObject.getString("sizegroupno") : "";
		Uparameter dal = new Uparameter();
		dal.setAccid(htp.getMaccid());

		WriteResult(response, dal.doWriteDefaultsize(sizegroupno), dal.getErrmess());
	}

	// 取权限参数
	protected void GetQxpublic(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Accreg dal = new Accreg();
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.GetUqxcs(), dal.getErrmess());
	}

	// 取所有系统参数
	protected void GetQxallpublic(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int fs = jsonObject.has("fs") ? Integer.parseInt(jsonObject.getString("fs")) : 0;
		// fs=只取颜色和尺码,商品编码中用
		Accreg dal = new Accreg();
		dal.setAccid(htp.getMaccid());
		if (dal.GetAllcs(fs) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			Write(response, dal.getErrmess());
	}

	// 写权限参数
	protected void WriteQxpublic(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int locate = jsonObject.has("locate") ? Integer.parseInt(jsonObject.getString("locate")) : 0;
		String value = jsonObject.has("value") ? jsonObject.getString("value") : "";
		Accreg dal = new Accreg();
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.WriteUqxcs(locate, value), dal.getErrmess());
	}

	// 获取打印参数
	protected void GetPrintcs(HttpServletResponse response, HttpInfo htp, int fs) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long progid = jsonObject.has("progid") ? Long.parseLong(jsonObject.getString("progid")) : 0;
		if (epid == 0)
			epid = htp.getUserid();
		if (accid == 0)
			accid = htp.getMaccid();
		Progprint dal = new Progprint();
		dal.setProgid(progid);
		dal.setAccid(accid);
		dal.setEpid(epid);
		if (dal.Load(fs, houseid) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 写打印参数
	protected void WritePrintcs(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long progid = jsonObject.has("progid") ? Long.parseLong(jsonObject.getString("progid")) : 0;
		long prtid = jsonObject.has("prtid") ? Long.parseLong(jsonObject.getString("prtid")) : 0;
		String prtheader = jsonObject.has("prtheader") ? jsonObject.getString("prtheader") : "";
		String prtfooter = jsonObject.has("prtfooter") ? jsonObject.getString("prtfooter") : "";
		String xxx = jsonObject.has("xxx") ? jsonObject.getString("xxx") : "";
		// XXXXXXXXXXXXXX
		// 1打印方式:0=商品,1=商品+颜色 ,2=商品+颜色+尺码
		// 2打印分数
		// 3打印输出 0=蓝牙 1=后台
		// 4打印客户/供应商/会员
		// 5打印客户地址，电话,会员电话
		// 6打印店铺/调出店铺
		// 7打印店铺/调入店铺
		// 8打印摘要
		// 9打印自编号
		// 10未用
		// 11打印折扣
		// 12未用
		// 13打印销售费用
		// 14打印销售部门
		// 15打印销售人
		// 16打印制单人
		// 17打印二维码
		// 19打印折让金额
		// 20打印应结金额
		// 21打印上次欠款
		// 22打印本次欠款
		// 23打印累计欠款
		// 18商品明细排序方式 0=货号顺序，1=录入顺序

		Progprint dal = new Progprint();
		dal.setProgid(progid);
		dal.setPrtid(prtid);
		dal.setXxx(xxx);
		dal.setAccid(htp.getMaccid());
		dal.setEpid(htp.getUserid());
		if (dal.Write(houseid, prtheader, prtfooter) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResult(response, 1, dal.getErrmess());
	}

	// 同步我的供应商卖家的基础资料记录(下载卖家基础资料)同步供应商
	protected void DownSellerparams(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int fs = jsonObject.has("fs") ? Integer.parseInt(jsonObject.getString("fs")) : 0;
		long selleraccid = jsonObject.has("selleraccid") ? Long.parseLong(jsonObject.getString("selleraccid")) : 0;
		long buyeraccid = jsonObject.has("buyeraccid") ? Long.parseLong(jsonObject.getString("buyeraccid")) : 0;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic, 4 ,1));
		// WriteResult("0", "1111");
		// fs:0=同步基础资料 1=同步价格 2=同步商品图片 3=处理默认颜色及尺码 4=所有

		String retcs = Func_DownSellerparams(selleraccid, buyeraccid, htp.getUsername(), priceprec, fs);
		if (retcs.substring(0, 1).equals("1"))
			WriteResult(response, 1, retcs.substring(1));
		else
			WriteResult(response, 0, retcs.substring(1));

	}

	// 同步我的经销商的销售数据到客户销售中
	protected void JxsWareout2custsale(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		String qry = "begin";
		qry += "   p_autocustsale(" + htp.getMaccid() + ",'" + htp.getUsername() + "');";
		qry += " end;";
		if (DbHelperSQL.ExecuteSql(qry, 1800) < 0) {
			WriteResult(response, 0, "操作异常！");
		} else {
			WriteResult(response, 1, "操作成功！");
		}
	}

	// ========================================================
	// 获取客户应收款余额
	protected void GetIncomebal(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : htp.getNowdate();
		int housezkbj = htp.getHousezkbj(); // 1=销售帐款分店铺核对
		if (housezkbj == 0)
			houseid = 0;
		String qry;
		long accid = htp.getMaccid();
		qry = "select f_getincomebal2x('" + nowdate + "'," + accid + "," + custid + "," + houseid + ",'" + htp.getCalcdate() + "') as curr,creditcurr,creditok from customer where custid=" + custid + " and accid="
				+ accid;
		Table tb = new Table();
		tb = DbHelperSQL.Query(qry).getTable(1);
		String responsestr = "";
		if (tb.getRowCount() == 0) {
			responsestr = "{\"result\":1,\"msg\":\"操作成功！\",\"CURR\":0" //
					+ ",\"CREDITCURR\":0"//
					+ ",\"CREDITOK\":0}";
		} else {
			responsestr = "{\"result\":1,\"msg\":\"操作成功！\",\"CURR\":\"" + tb.getRow(0).get("CURR").toString() + "\"" //
					+ ",\"CREDITCURR\":\"" + tb.getRow(0).get("CREDITCURR").toString() + "\""//
					+ ",\"CREDITOK\":\"" + tb.getRow(0).get("CREDITOK").toString() + "\"}";
		}
		Write(response, responsestr);
	}

	// 获取客户应收款余额(按时间取) 客户订单取余额时调用
	protected void GetIncomebaltime(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : htp.getNowdate();

		Incomebal dal = new Incomebal();
		dal.setAccid(htp.getMaccid());
		dal.setCustid(custid);
		if (dal.doGetBalbytime(nowdate) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取客户应收款余额(按单据时间取) ---打印专用
	protected void GetIncomebalnoteno(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Incomebal dal = new Incomebal();
		dal.setAccid(htp.getMaccid());
		if (dal.doGetBalbynoteno(noteno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 取前台单据结算记录
	protected void GetWaresalepaye(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Waresalepay dal = new Waresalepay();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		if (dal.doGetWaresalepaye() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 取前台单据结算记录
	protected void GetWaresalepay(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Waresalepay dal = new Waresalepay();

		String fieldlist = "b.payname,a.curr";
		// qry += " left outer join payway b on a.payid=b.payid";
		String strwhere = " a.accid=" + htp.getMaccid() + " and a.noteno='" + noteno + "'";
		String sort = "b.payno";
		Table tb = new Table();
		tb = dal.GetTable(strwhere, fieldlist, sort);
		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 获取供应商应付款余额(按时间取) 采购订单取余额时调用
	protected void GetPaybaltime(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : htp.getNowdate();

		Paybal dal = new Paybal();
		dal.setAccid(htp.getMaccid());
		dal.setProvid(provid);
		if (dal.doGetBalbytime(nowdate) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 获取供应商应付款余额(按单据时间取)
	protected void GetPaybalnoteno(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Paybal dal = new Paybal();
		dal.setAccid(htp.getMaccid());
		if (dal.doGetBalbynoteno(noteno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取供应商应付款余额
	protected void GetPaybal(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : htp.getNowdate();
		int housezkbj = htp.getHousezkbj();// 0; // 1=往来帐款分店铺核对
		if (housezkbj == 0)
			houseid = 0;
		String qry = "select f_getpaybal2x('" + Func.subString(nowdate, 1, 10) + "'," + htp.getMaccid() + "," + provid + "," + houseid + ",'" + htp.getCalcdate() + "') as curr from dual";
		// System.out.println(qry);
		Table tb = new Table();
		tb = DbHelperSQL.Query(qry).getTable(1);
		String responsestr = "";
		if (tb.getRowCount() == 0)
			responsestr = "{\"result\":1,\"msg\":\"操作成功！\",\"CURR\": 0}";
		else
			responsestr = "{\"result\":1,\"msg\":\"操作成功！\",\"CURR\": \"" + tb.getRow(0).get("CURR").toString() + "\"}";
		Write(response, responsestr);

	}

	// ===================================
	// 获取买家品牌授权表
	protected void GetBuyerbrandList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long accid = jsonObject.has("accid") ?
		// Long.parseLong(jsonObject.getString("accid")) : 0;
		long buyaccid = jsonObject.has("buyaccid") ? Long.parseLong(jsonObject.getString("buyaccid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		Buyerbrand dal = new Buyerbrand();
		dal.setAccid(htp.getMaccid());
		// dal.setAccid(accid);
		dal.setBuyaccid(buyaccid);
		QueryParam qp = new QueryParam(page, pagesize, " SELBJ DESC, BRANDID");

		Table tb = new Table();

		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 写买家品牌记录
	protected void WriteBuyerbrand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long accid = jsonObject.has("accid") ?
		// Long.parseLong(jsonObject.getString("accid")) : 0;
		long buyaccid = jsonObject.has("buyaccid") ? Long.parseLong(jsonObject.getString("buyaccid")) : 0;
		long brandid = jsonObject.has("brandid") ? Long.parseLong(jsonObject.getString("brandid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Buyerbrand dal = new Buyerbrand();
		dal.setAccid(htp.getMaccid());
		dal.setBuyaccid(buyaccid);
		dal.setBrandid(brandid);
		WriteResult(response, dal.Append(value), dal.getErrmess());
	}

	// 成批写买家品牌记录
	protected void WriteAllbuyerbrand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long accid = jsonObject.has("accid") ?
		// Long.parseLong(jsonObject.getString("accid")) : 0;
		long buyaccid = jsonObject.has("buyaccid") ? Long.parseLong(jsonObject.getString("buyaccid")) : 0;
		// long brandid = jsonObject.has("brandid") ?
		// Long.parseLong(jsonObject.getString("brandid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Buyerbrand dal = new Buyerbrand();
		dal.setAccid(htp.getMaccid());
		dal.setBuyaccid(buyaccid);
		// dal.setBrandid(brandid);
		WriteResult(response, dal.AppendAll(value), dal.getErrmess());
	}

	// 获取买家品牌名称列表
	protected void GetBuyerbrandname(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long buyaccid = jsonObject.has("buyeraccid") ? Long.parseLong(jsonObject.getString("buyeraccid")) : 0;
		Buyerbrand dal = new Buyerbrand();
		dal.setAccid(htp.getMaccid());
		dal.setBuyaccid(buyaccid);

		Table tb = new Table();
		tb = dal.GetList().getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 获取职员店铺授权表
	protected void GetEmployehouseList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		Employehouse dal = new Employehouse();
		dal.setAccid(htp.getMaccid());
		dal.setEpid(epid);
		dal.setFindbox(findbox);
		// QueryParam qp = new QueryParam(page, pagesize, " SELBJ
		// DESC,housename, HOUSEID");
		QueryParam qp = new QueryParam(page, pagesize, " housename, HOUSEID");

		Table tb = new Table();

		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取职员已有店铺授权表
	protected void GetEmployehouseexistsList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		Employehouse dal = new Employehouse();
		dal.setAccid(htp.getMaccid());
		dal.setEpid(epid);
		QueryParam qp = new QueryParam(page, pagesize, "housename, houseid");

		Table tb = new Table();

		tb = dal.GetTable1(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	//	获取客户职员授权表
	protected void GetCustemployeList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		Employecust dal = new Employecust();
		dal.setAccid(htp.getMaccid());
		dal.setCustid(custid);
		dal.setFindbox(findbox);
		QueryParam qp = new QueryParam(page, pagesize, " houseid,epname,epid");

		Table tb = new Table();

		tb = dal.GetTableX(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	//	获取供应商职员授权表
	protected void GetProvemployeList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		Employeprov dal = new Employeprov();
		dal.setAccid(htp.getMaccid());
		dal.setProvid(provid);
		dal.setFindbox(findbox);
		QueryParam qp = new QueryParam(page, pagesize, " houseid,epname,epid");

		Table tb = new Table();

		tb = dal.GetTableX(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取品牌职员授权表
	protected void GetBrandemployeList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		long brandid = jsonObject.has("brandid") ? Long.parseLong(jsonObject.getString("brandid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		Employebrand dal = new Employebrand();
		dal.setAccid(htp.getMaccid());
		dal.setBrandid(brandid);
		dal.setFindbox(findbox);
		QueryParam qp = new QueryParam(page, pagesize, " houseid,epname,epid");

		Table tb = new Table();

		tb = dal.GetTableX(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取职员品牌授权表
	protected void GetEmployebrandList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		Employebrand dal = new Employebrand();
		dal.setAccid(htp.getMaccid());
		dal.setEpid(epid);
		dal.setFindbox(findbox);
		QueryParam qp = new QueryParam(page, pagesize, " SELBJ DESC,brandname,BRANDID");

		Table tb = new Table();

		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取职员已有品牌授权表
	protected void GetEmployebrandexistsList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		Employebrand dal = new Employebrand();
		dal.setAccid(htp.getMaccid());
		dal.setEpid(epid);
		QueryParam qp = new QueryParam(page, pagesize, "brandname,BRANDID");

		Table tb = new Table();

		tb = dal.GetTable1(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 写店铺授权记录
	protected void WriteEmployehouse(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Employehouse dal = new Employehouse();
		dal.setEpid(epid);
		dal.setHouseid(houseid);
		WriteResult(response, dal.Append(value), dal.getErrmess());

	}

	// 成批写店铺授权记录
	protected void WriteAllemployehouse(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Employehouse dal = new Employehouse();
		dal.setEpid(epid);
		dal.setAccid(htp.getMaccid());
		// dal.setHouseid(houseid);
		WriteResult(response, dal.AppendAll(value), dal.getErrmess());

	}

	// 写品牌授权记录
	protected void WriteEmployebrand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		long brandid = jsonObject.has("brandid") ? Long.parseLong(jsonObject.getString("brandid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Employebrand dal = new Employebrand();
		dal.setEpid(epid);
		dal.setBrandid(brandid);
		WriteResult(response, dal.Append(value), dal.getErrmess());

	}

	// 增加或清除所有职员品牌授权记录
	protected void WriteAllemployebrand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Employebrand dal = new Employebrand();
		dal.setEpid(epid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.AppendAll(value), dal.getErrmess());
	}

	// 增加或清除所有客户职员授权记录
	protected void WriteAllcustemploye(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Employecust dal = new Employecust();
		dal.setCustid(custid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.AppendAll1(value), dal.getErrmess());
	}

	// 增加或清除所有供应商职员授权记录
	protected void WriteAllprovemploye(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Employeprov dal = new Employeprov();
		dal.setProvid(provid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.AppendAll1(value), dal.getErrmess());
	}

	// 增加或清除所有品牌职员授权记录
	protected void WriteAllbrandemploye(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long brandid = jsonObject.has("brandid") ? Long.parseLong(jsonObject.getString("brandid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Employebrand dal = new Employebrand();
		dal.setBrandid(brandid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.AppendAll1(value), dal.getErrmess());
	}

	// 获取职员入库店铺授权表
	protected void GetEmployehouseinList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		Employehousein dal = new Employehousein();
		dal.setAccid(htp.getMaccid());
		dal.setEpid(epid);
		dal.setFindbox(findbox);
		// QueryParam qp = new QueryParam(page, pagesize, " SELBJ
		// DESC,housename, HOUSEID");
		QueryParam qp = new QueryParam(page, pagesize, "housename, HOUSEID");

		Table tb = new Table();

		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取职员已有入库店铺授权表
	protected void GetEmployehouseinexistsList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		Employehousein dal = new Employehousein();
		dal.setAccid(htp.getMaccid());
		dal.setEpid(epid);
		QueryParam qp = new QueryParam(page, pagesize, "housename, houseid");

		Table tb = new Table();

		tb = dal.GetTable1(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 写职员入库店铺授权记录
	protected void WriteEmployehousein(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Employehousein dal = new Employehousein();
		dal.setEpid(epid);
		dal.setHouseid(houseid);
		WriteResult(response, dal.Append(value), dal.getErrmess());
	}

	// 成批写职员入库店铺授权记录
	protected void WriteAllemployehousein(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Employehousein dal = new Employehousein();
		dal.setEpid(epid);
		dal.setAccid(htp.getMaccid());
		// dal.setHouseid(houseid);
		WriteResult(response, dal.AppendAll(value), dal.getErrmess());

	}

	// 获取职员出库店铺授权表
	protected void GetEmployehouseoutList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		Employehouseout dal = new Employehouseout();
		dal.setAccid(htp.getMaccid());
		dal.setEpid(epid);
		dal.setFindbox(findbox);
		// QueryParam qp = new QueryParam(page, pagesize, " SELBJ
		// DESC,housename, HOUSEID");
		QueryParam qp = new QueryParam(page, pagesize, "housename, HOUSEID");

		Table tb = new Table();

		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取职员已有出库店铺授权表
	protected void GetEmployehouseoutexistsList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		Employehouseout dal = new Employehouseout();
		dal.setAccid(htp.getMaccid());
		dal.setEpid(epid);
		QueryParam qp = new QueryParam(page, pagesize, "housename, houseid");

		Table tb = new Table();

		tb = dal.GetTable1(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 写职员出库店铺授权记录
	protected void WriteEmployehouseout(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Employehouseout dal = new Employehouseout();
		dal.setEpid(epid);
		dal.setHouseid(houseid);
		WriteResult(response, dal.Append(value), dal.getErrmess());

	}

	// 成批写职员出库店铺授权记录
	protected void WriteAllemployehouseout(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Employehouseout dal = new Employehouseout();
		dal.setEpid(epid);
		dal.setAccid(htp.getMaccid());
		// dal.setHouseid(houseid);
		WriteResult(response, dal.AppendAll(value), dal.getErrmess());

	}

	// 新增回访记录
	protected void AddCallbackRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Callback dal = new Callback();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setOperant(htp.getUsername());
		WriteResult(response, dal.Append(), dal.getErrmess());
	}

	// 分页显示回访记录
	protected void ListCallbackRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		// long epid = jsonObject.has("epid") ?
		// Long.parseLong(jsonObject.getString("epid")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "*";
		String nowdatestr = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
												// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : nowdatestr;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : nowdatestr;

		int tag = jsonObject.has("tag") ? Integer.parseInt(jsonObject.getString("tag")) : 0;
		// tag:0=未回访，1=(已回访,成功，战败),2=所有
		int tag1 = jsonObject.has("tag1") ? Integer.parseInt(jsonObject.getString("tag1")) : 0;
		// 0=成功，1=战败,2=所有 tag=1时有效

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String strwhere = " and a.notedate >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += " and a.notedate <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		String sort = "";

		if (tag == 0) // 未回访
		{
			strwhere = " a.succtag=0";
			sort = " NEXTDATE ,callid";
		} else // 已回访
				// if (tag == 1)
		{
			// succtag:0=继续 ， 1=成功，2=战败

			if (tag1 == 0)
				strwhere = " a.succtag=1";
			else if (tag1 == 1)
				strwhere = " a.succtag=2";
			else
				strwhere = " a.succtag>0";

			sort = " NOTEDATE desc,callid";
		}
		// if (epid > 0) qry += " and a.EPID = " + epid;
		// if (epno != "") qry += " and b.EPNO = '" + epno + "'";
		if (accid > 0)
			strwhere += " and a.ACCID = " + accid;
		// if (accname != "") qry += " and C.ACCNAME = " + accname;

		// if (tag < 2) qry += " and a.tag=" + tag;
		if (findbox != null && !findbox.equals(""))
			strwhere += " and (b.company like '%" + findbox + "%' or b.accname like '%" + findbox.toUpperCase() + "%')";
		// if (company != "") qry += " and company like '%" + company + "%'";
		// if (mobile != "") qry += " and mobile like '%" + mobile + "%'";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "A.CALLID,A.CONTENT,A.NOTEDATE,A.LINKMAN,A.SEX,A.TEL,A.REMARK,A.SUCCTAG,A.NEXTDATE,A.ACCID,B.ACCNAME,B.COMPANY,A.OPERANT,A.CHECKMAN,A.PCALLID,d.province,d.city";

		Callback dal = new Callback();
		Table tb = new Table();
		QueryParam qp = new QueryParam(page, pagesize, sort);

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 新增用户反馈记录
	protected void AddUserbackRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Userback dal = new Userback();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setLastop("");
		dal.setTag(0);
		dal.setEpid(htp.getUserid());
		WriteResult(response, dal.Append(), dal.getErrmess());

	}

	// 更新指定用户反馈信息id信息
	protected void UpdateUserbackByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Userback dal = new Userback();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Update(), dal.getErrmess());

	}

	// 更新指定用户反馈信息id信息
	protected void ReadUserbackByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		Userback dal = new Userback();
		dal.setLastop(htp.getUsername());
		dal.setId(id);
		dal.setTag(2);
		WriteResult(response, dal.Update1(), dal.getErrmess());

	}

	// 获取指定用户反馈记录id信息
	protected void GetUserbackByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String strwhere = " a.ID=" + id;
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "A.ID,A.EPID,A.CONTENT,A.NOTEDATE,A.TAG,A.REMARK,A.LASTOP,A.LASTDATE,B.EPNO,B.EPNAME,B.ACCID,C.ACCNAME";
		Userback dal = new Userback();
		Table tb = new Table();

		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 分页获取用户反馈信息列表
	protected void GetUserbackList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String nowdatestr = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
												// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : nowdatestr;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : nowdatestr;
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;

		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String accname = jsonObject.has("accname") ? jsonObject.getString("accname") : "";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "omepid";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : " asc ";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int tag = jsonObject.has("tag") ? Integer.parseInt(jsonObject.getString("tag")) : 2;
		// tag：0=待阅 1=已阅
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = " LASTDATE desc,id";

		String strwhere = " a.notedate >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += " and a.notedate <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (epid > 0)
			strwhere += " and a.EPID = " + epid;
		// if (epno != "") qry += " and b.EPNO = '" + epno + "'";
		if (accid > 0)
			strwhere += " and b.ACCID = " + accid;
		if (!accname.equals(""))
			strwhere += " and C.ACCNAME = " + accname;

		if (tag < 2)
			strwhere += " and a.tag=" + tag;
		if (!findbox.equals(""))
			strwhere += " and (b.epname like '%" + findbox + "%' or c.accname like '%" + findbox.toUpperCase() + "%')";
		// if (company != "") qry += " and company like '%" + company + "%'";
		// if (mobile != "") qry += " and mobile like '%" + mobile + "%'";
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.EPID,A.CONTENT,A.NOTEDATE,A.TAG,A.REMARK,A.LASTOP,A.LASTDATE,B.EPNO,B.EPNAME,B.ACCID,C.ACCNAME,c.company";
		Userback dal = new Userback();
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// ===================================

	// 新增期初入库记录(从excel中导入)
	protected void AddFirsthousemxls(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String colorname = jsonObject.has("colorname") ? jsonObject.getString("colorname") : "";
		String sizename = jsonObject.has("sizename") ? jsonObject.getString("sizename") : "";

		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		Firsthousem dal = new Firsthousem();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setWareno(wareno);
		dal.setColorname(colorname);
		dal.setSizename(sizename);
		dal.setAmount(amount);
		dal.setPrice(price);
		WriteResult(response, dal.LoadFromXLS(), dal.getErrmess());

	}

	// 新增调拨出库记录(从excel中导入)
	protected void AddAllotoutmxls(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String colorname = jsonObject.has("colorname") ? jsonObject.getString("colorname") : "";
		String sizename = jsonObject.has("sizename") ? jsonObject.getString("sizename") : "";
		long tohouseid = jsonObject.has("tohouseid") ? Long.parseLong(jsonObject.getString("tohouseid")) : 0;

		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		Float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : null;
		Allotoutm dal = new Allotoutm();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setWareno(wareno);
		dal.setColorname(colorname);
		dal.setSizename(sizename);
		dal.setAmount(amount);
		dal.setPrice(price);
		WriteResult(response, dal.LoadFromXLS(tohouseid), dal.getErrmess());

	}

	// 新增采购入库记录(从excel中导入)
	protected void AddWareinmxls(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String colorname = jsonObject.has("colorname") ? jsonObject.getString("colorname") : "";
		String sizename = jsonObject.has("sizename") ? jsonObject.getString("sizename") : "";

		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		Wareinm dal = new Wareinm();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setWareno(wareno);
		dal.setColorname(colorname);
		dal.setSizename(sizename);
		dal.setAmount(amount);
		dal.setPrice(price);
		WriteResult(response, dal.LoadFromXLS(), dal.getErrmess());

	}

	// 新增商品调价记录(从excel中导入)
	protected void AddWareadjustmxls(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String noteno = jsonObject.has("noteno") ?
		// jsonObject.getString("noteno").replace("'", "''") : "";
		// String wareno = jsonObject.has("wareno") ?
		// jsonObject.getString("wareno").replace("'", "''") : "";
		// String colorname = jsonObject.has("colorname") ?
		// jsonObject.getString("colorname") : "";
		// String sizename = jsonObject.has("sizename") ?
		// jsonObject.getString("sizename") : "";

		Wareadjustm dal = new Wareadjustm();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类

		dal.setAccid(htp.getMaccid());
		// dal.setNoteno(noteno);
		// dal.setWareno(wareno);
		WriteResult(response, dal.LoadFromXLS(), dal.getErrmess());

	}

	// 汇总客户销售对账数据
	protected void TotalCustcheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int dateid = jsonObject.has("dateid") ? Integer.parseInt(jsonObject.getString("dateid")) : 4;
		// dateid:0=本日，1=昨日，2=本周，3=本月 ,4=指定日期
		vTotalcustcheck dal = new vTotalcustcheck();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setMaxday(htp.getMaxday());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setCalcdate(htp.getCalcdate());
		dal.setQxbj(htp.getQxbj());
		if (dal.doTotal(dateid) == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 汇总供应商采购对账数据
	protected void TotalProvcheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int dateid = jsonObject.has("dateid") ? Integer.parseInt(jsonObject.getString("dateid")) : 4;
		// dateid:0=本日，1=昨日，2=本周，3=本月 ,4=指定日期

		vTotalprovcheck dal = new vTotalprovcheck();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setMaxday(htp.getMaxday());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setCalcdate(htp.getCalcdate());
		dal.setQxbj(htp.getQxbj());
		if (dal.doTotal(dateid) == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询应收款对账表
	protected void ListCustcheckhz(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "custid";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int qkid = jsonObject.has("qkid") ? Integer.parseInt(jsonObject.getString("qkid")) : 2;
		// qkid:0=有欠款 1=有余额 2=所有
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vTotalcustcheck dal = new vTotalcustcheck();
		sort += " " + order + ",keyid";
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		tb = dal.GetTable(qp, qkid);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 分页查询应付款对账表
	protected void ListProvcheckhz(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : " provid ";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " ";
		int qkid = jsonObject.has("qkid") ? Integer.parseInt(jsonObject.getString("qkid")) : 2;
		// qkid:0=有欠款 1=有余额 2=所有
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vTotalprovcheck dal = new vTotalprovcheck();
		sort += " " + order + ",keyid";
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		tb = dal.GetTable(qp, qkid);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 更改单据摘要，采购对账分析用
	protected void setNoteRemark(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		String notetype = jsonObject.has("notetype") ? jsonObject.getString("notetype") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark") : "";
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		if (noteno.length() <= 0 || notetype.length() <= 0 || id == 0) {
			return;
		}
		long accid = htp.getMaccid();
		String qry = "begin";
		if (notetype.equals("CG") || notetype.equals("CT")) {
			qry += "\n   update wareinh set remark='" + remark + "' where accid=" + accid + " and noteno='" + noteno + "';";
			qry += "\n   update v_provcheck_data set remark0='" + remark + "' where id=" + id + ";";
		} else if (notetype.equals("FZ") || notetype.equals("FK")) {
			qry += "\n   update paycurr set remark='" + remark + "' where accid=" + accid + " and noteno='" + noteno + "';";
			qry += "\n   update v_provcheck_data set remark0='" + remark + "' where id=" + id + ";";
		} else if (notetype.equals("FF")) {
			qry += "\n   update paycost set remark='" + remark + "' where accid=" + accid + " and noteno='" + noteno + "';";
			qry += "\n   update v_provcheck_data set remark0='" + remark + "' where id=" + id + ";";
		} else if (notetype.equals("XS") || notetype.equals("XT")) {
			qry += "\n   update wareouth set remark='" + remark + "' where accid=" + accid + " and noteno='" + noteno + "';";
			qry += "\n   update v_custcheck_data set remark0='" + remark + "' where id=" + id + ";";
		} else if (notetype.equals("SZ") || notetype.equals("SK")) {
			qry += "\n   update incomecurr set remark='" + remark + "' where accid=" + accid + " and noteno='" + noteno + "';";
			qry += "\n   update v_custcheck_data set remark0='" + remark + "' where id=" + id + ";";
		} else if (notetype.equals("SF")) {
			qry += "\n   update incomecost set remark='" + remark + "' where accid=" + accid + " and noteno='" + noteno + "';";
			qry += "\n   update v_custcheck_data set remark0='" + remark + "' where id=" + id + ";";
		}

		qry += "\n end;";

		if (DbHelperSQL.ExecuteSql(qry) < 0) {
			WriteResult(response, 0, "操作异常！");
		} else {
			WriteResult(response, 1, "操作成功！");
		}
	}

	// 分页查询应收款对账表
	protected void ListCustcheckmx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = " A.ID,A.NOTEDATE,A.NOTENO,A.REMARK,A.NOTETYPE,A.XSAMT,A.XSCURR,A.XTAMT,A.XTCURR,A.FYCURR,A.CURR1,A.CURR2,A.CURR3,a.remark0";
		String strwhere = " a.epid=" + htp.getUserid() + " and a.custid=" + custid;
		String sort = " NOTEDATE,ID";
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();

		vTotalcustcheck dal = new vTotalcustcheck();
		tb = dal.GetTable(qp, strwhere, fieldlist);

		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 分页查询应付款对账表
	protected void ListProvcheckmx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = "A.ID,A.NOTEDATE,A.NOTENO,A.REMARK,A.NOTETYPE,A.CGAMT,A.CGCURR,A.CTAMT,A.CTCURR,A.FYCURR,A.CURR1,A.CURR2,A.CURR3,a.remark0";
		String strwhere = " a.epid=" + htp.getUserid() + " and a.provid=" + provid;
		String sort = " NOTEDATE,ID";
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();

		vTotalprovcheck dal = new vTotalprovcheck();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 统计销售及退货汇总数据
	protected void TotalXsthhz(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalxsthhz dal = new vTotalxsthhz();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setMaxday(htp.getMaxday());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setQxbj(htp.getQxbj());
		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询销售退货数据
	protected void ListXsthhz(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int hzfs = jsonObject.has("hzfs") ? Integer.parseInt(jsonObject.getString("hzfs")) : 0;
		// hzfs:0按客户汇总,1按店铺汇总，2=按商品汇总
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		sort += " " + order;

		QueryParam qp = new QueryParam(page, pagesize, sort);
		// String strwhere = " a.epid=" + htp.getUserid();
		Table tb = new Table();
		vTotalxsthhz dal = new vTotalxsthhz();
		dal.setUserid(htp.getUserid());
		tb = dal.GetTable(qp, hzfs);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 统计采色及退货汇总数据
	protected void TotalCgthhz(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalcgthhz dal = new vTotalcgthhz();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setMaxday(htp.getMaxday());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setQxbj(htp.getQxbj());
		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询采购退货数据
	protected void ListCgthhz(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int hzfs = jsonObject.has("hzfs") ? Integer.parseInt(jsonObject.getString("hzfs")) : 0;
		// hzfs:0按供应商汇总,1按店铺汇总，2=按商品汇总
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		sort += " " + order;
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// String strwhere = " a.epid=" + htp.getUserid();

		Table tb = new Table();

		vTotalcgthhz dal = new vTotalcgthhz();
		dal.setUserid(htp.getUserid());
		tb = dal.GetTable(qp, hzfs);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// ========================================================

	// 汇总店铺及客户商品分布明细
	protected void TotalSpfbmx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		//				long wareid = jsonObject.has("wareid") ?     Long.parseLong(jsonObject.getString("wareid")) : 0;
		// long colorid = jsonObject.has("colorid") ?
		// Long.parseLong(jsonObject.getString("colorid")) : 0;
		// String mindate = jsonObject.has("mindate") ?
		// jsonObject.getString("mindate") : "";
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : "";
		// String jhdate = jsonObject.has("jhdate") ?
		// jsonObject.getString("jhdate") : "";

		int cxkh = jsonObject.has("cxkh") ? Integer.parseInt(jsonObject.getString("cxkh")) : 0;
		// cxkh=1，要查询客户库存及销售

		long accid = htp.getMaccid();
		long userid = htp.getUserid();
		vTotalCxkczy kc = new vTotalCxkczy();
		DbHelperSQL.JsonConvertObject(kc, jsonObject);// 读取json数据到表类
		kc.setAccid(accid);
		kc.setUserid(userid);
		kc.setCxdatetime(maxdate);
		kc.setQxbj(htp.getQxbj());
		kc.setServerdatetime(htp.getNowdatetime());
		kc.setAccbegindate(htp.getAccdate());
		kc.setCalcdate(htp.getCalcdate());
		kc.doCxkczy();
		if (cxkh == 1) {// cxkh=1，要查询客户库存及销售
			vTotalkhkczy kc1 = new vTotalkhkczy();
			DbHelperSQL.JsonConvertObject(kc1, jsonObject);// 读取json数据到表类
			kc1.setAccid(accid);
			kc1.setUserid(userid);
			kc1.setCxdatetime(maxdate);
			kc1.setQxbj(htp.getQxbj());
			kc1.setServerdatetime(htp.getNowdatetime());
			kc1.setAccbegindate(htp.getAccdate());
			kc1.setCalcdate(htp.getCalcdate());
			kc1.doCxkczy();
		}
		vTotalxskczy dal = new vTotalxskczy();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(accid);
		dal.setUserid(userid);
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setQxbj(htp.getQxbj());
		dal.setMaxday(htp.getMaxday());
		if (dal.doTotalSpfb(cxkh) == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询店铺及客户商品分布明细
	protected void ListSpfbmx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vTotalxskczy dal = new vTotalxskczy();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类

		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam();
		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		Table tb = new Table();
		tb = dal.GetTableSpfb(qp);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 分页查询店铺及客户商品分布明细
	protected void ListSpfbmx1(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long wareid = jsonObject.has("wareid") ?
		// Long.parseLong(jsonObject.getString("wareid")) : 0;
		// long colorid = jsonObject.has("colorid") ?
		// Long.parseLong(jsonObject.getString("colorid")) : 0;
		// string sumlist = jsonObject.has("sumlist") ?
		// jsonObject.getString("sumlist"): "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vTotalxskczy dal = new vTotalxskczy();
		// dal.setWareid(wareid);
		// dal.setColorid(colorid);
		// dal
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类

		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam();
		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		Table tb = new Table();
		tb = dal.GetTableSpfb1(qp);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 店铺及客户商品分布明细--商品尺码信息
	protected void WareSpfbmx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		vTotalxskczy dal = new vTotalxskczy();
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		;
		if (dal.doGetware() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}

	}

	// 汇总店铺销售及库存分布
	protected void TotalXskczy(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int onlyxs = jsonObject.has("onlyxs") ? Integer.parseInt(jsonObject.getString("onlyxs")) : 0;
		// onlyxs:1=只查有销售的商品
		// String mindate = jsonObject.has("mindate") ?
		// jsonObject.getString("mindate") : "";
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : "";

		long accid = htp.getMaccid();
		long userid = htp.getUserid();
		vTotalCxkczy kc = new vTotalCxkczy();
		DbHelperSQL.JsonConvertObject(kc, jsonObject);// 读取json数据到表类
		kc.setAccid(accid);
		kc.setUserid(userid);
		kc.setCxdatetime(maxdate);
		kc.setQxbj(htp.getQxbj());
		kc.setServerdatetime(htp.getNowdatetime());
		kc.setAccbegindate(htp.getAccdate());
		kc.setCalcdate(htp.getCalcdate());
		kc.doCxkczy();

		vTotalxskczy dal = new vTotalxskczy();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(accid);
		dal.setUserid(userid);
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setQxbj(htp.getQxbj());
		dal.setMaxday(htp.getMaxday());
		if (dal.doTotal(onlyxs) == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询销售及库存分布数据
	protected void ListXskczy(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vTotalxskczy dal = new vTotalxskczy();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类

		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam();
		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		Table tb = new Table();
		tb = dal.GetTable(qp);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 汇总库存结构分析数据
	protected void TotalKcjgfx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : "";
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		int hzfs = jsonObject.has("hzfs") ? Integer.parseInt(jsonObject.getString("hzfs")) : 0;
		// hzfs:0=品牌 1=类型 2=季节 3=店铺 4=颜色 ,5=供应商,6=尺码,7=区位
		long accid = htp.getMaccid();
		long userid = htp.getUserid();
		// String houseidlist = jsonObject.has("houseidlist") ?
		// jsonObject.getString("houseidlist") : "";
		if (nowdate.equals(""))
			nowdate = htp.getNowdate();
		int qxbj = htp.getQxbj();
		int housecostbj = htp.getHousecostbj();
		// nowdate += " 23:59:59";
		vTotalCxkczy kc = new vTotalCxkczy();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(kc, jsonObject);
		kc.setAccid(accid);
		kc.setCxdatetime(nowdate);
		kc.setQxbj(qxbj);
		kc.setUserid(userid);
		kc.setAccbegindate(htp.getAccdate());
		kc.setCalcdate(htp.getCalcdate());
		kc.setServerdatetime(htp.getNowdatetime());
		kc.doCxkczy();
		vTotalkcjgfx dal = new vTotalkcjgfx();
		dal.setHouseid(kc.getHouseid());
		dal.setAccid(accid);
		dal.setNowdate(nowdate);
		dal.setUserid(userid);
		if (dal.doTotal(hzfs, housecostbj) == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询库存结构分析数据
	protected void ListKcjgfx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String sumsql = jsonObject.has("sumsql") ?
		// jsonObject.getString("sumsql") : "";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "codename";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vTotalkcjgfx dal = new vTotalkcjgfx();

		String fieldlist = " a.codename,a.codeid,a.amount,a.rateamt,a.curr,a.ratecur,a.skc,a.fixedcurr,a.id ";
		// fieldlist += ",a.checkcurr,case a.amount when 0 then 0 else
		// round(a.checkcurr/a.amount,2) end as checksale";
		fieldlist += ",case a.amount when 0 then 0 else round(a.fixedcurr/a.amount,2) end as price";
		String strwhere = " a.epid=" + htp.getUserid() + " and (a.amount>0 or a.amount<0)";

		// dal.setHavesale(havesale);
		sort += " " + order + ",id";

		// dal.setUserid(htp.getUserid());

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();

		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 汇总指定商品，颜色的店铺尺码分布
	protected void TotalWareandcolor(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// int page = jsonObject.has("page") ?
		// Integer.parseInt(jsonObject.getString("page")) : 1;
		// int pagesize = jsonObject.has("rows") ?
		// Integer.parseInt(jsonObject.getString("rows")) : 10;
		// if (pagesize > 50)
		// pagesize = 10;

		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : "";
		// wareid,colorid,nohouseid
		long accid = htp.getMaccid();
		long userid = htp.getUserid();

		// String houseidlist = jsonObject.has("houseidlist") ?
		// jsonObject.getString("houseidlist") : "";
		if (nowdate.equals(""))
			nowdate = htp.getNowdate();
		// int qxbj = 0;// htp.getQxbj();

		// nowdate += " 23:59:59";
		vTotalCxkczy dal = new vTotalCxkczy();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setUserid(userid);
		dal.setAccid(accid);
		dal.setAccbegindate(htp.getAccdate());
		dal.setCalcdate(htp.getCalcdate());
		dal.setCxdatetime(nowdate);
		dal.setQxbj(0);
		dal.setServerdatetime(htp.getNowdatetime());
		dal.setBj(4);
		dal.doCxkczy();

		// vhere dal = new vHousewhere();
		// // dal.setAccid(accid);
		// dal.setUserid(userid);
		if (dal.doGetWareandcolor() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页显示指定商品，颜色的店铺尺码分布
	protected void ListWareandcolor(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sumsql = jsonObject.has("sumsql") ? jsonObject.getString("sumsql") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int sizenum = htp.getSizenum();
		vTotalCxkczy dal = new vTotalCxkczy();
		dal.setUserid(htp.getUserid());
		dal.setAccid(htp.getMaccid());
		QueryParam qp = new QueryParam(page, pagesize, "houseid");

		Table tb = new Table();

		tb = dal.GetTable(qp, sumsql, sizenum);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 汇总商品库存分布
	protected void TotalCxwhere(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : "";

		long accid = htp.getMaccid();
		long userid = htp.getUserid();

		// String houseidlist = jsonObject.has("houseidlist") ?
		// jsonObject.getString("houseidlist") : "";
		if (nowdate.equals(""))
			nowdate = htp.getNowdate();
		int qxbj = htp.getQxbj();

		// nowdate += " 23:59:59";
		vTotalCxkczy kc = new vTotalCxkczy();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(kc, jsonObject);
		kc.setUserid(userid);
		kc.setAccid(accid);
		kc.setCxdatetime(nowdate);
		kc.setQxbj(qxbj);
		kc.setServerdatetime(htp.getNowdatetime());
		kc.setAccbegindate(htp.getAccdate());
		kc.setCalcdate(htp.getCalcdate());
		kc.doCxkczy();

		vHousewhere dal = new vHousewhere();

		dal.setUserid(userid);
		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 查询库存分布数据
	protected void ListCxwhere(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vHousewhere dal = new vHousewhere();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类

		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam();
		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		Table tb = new Table();
		tb = dal.GetTable(qp);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 汇总前台销售日报
	protected void TotalWaresalesy(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalwaresalesy dal = new vTotalwaresalesy();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setQxbj(htp.getQxbj());
		dal.setMaxday(htp.getMaxday());
		dal.setAccbegindate(htp.getAccdate());
		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 查询前台收银
	protected void ListWaresalesy(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sumsql = jsonObject.has("sumsql") ? jsonObject.getString("sumsql") : "";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "notedate";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vTotalwaresalesy dal = new vTotalwaresalesy();
		// dal.setHavesale(havesale);

		dal.setUserid(htp.getUserid());
		sort += " " + order + ",id";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		// LogUtils.LogDebugWrite("ListSalewhere", "begin");
		tb = dal.GetTable(qp, sumsql);
		// LogUtils.LogDebugWrite("ListSalewhere", "end");
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 统计销售汇总分析数据 new  零售，批发，客户销售
	protected void TotalXshzfx3(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalxshzfx dal = new vTotalxshzfx();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setMaxday(htp.getMaxday());
		dal.setHousecostbj(htp.getHousecostbj());
		dal.setQxbj(htp.getQxbj());
		if (dal.doTotal3() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 统计销售汇总分析数据 new
	protected void TotalXshzfx2(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalxshzfx dal = new vTotalxshzfx();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setMaxday(htp.getMaxday());
		dal.setHousecostbj(htp.getHousecostbj());
		dal.setQxbj(htp.getQxbj());
		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询销售汇总数据 new
	protected void ListXshzfx2(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "timestr";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		Float totalcurr = jsonObject.has("totalcurr") ? Float.parseFloat(jsonObject.getString("totalcurr")) : 0;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int hzfs = jsonObject.has("hzfs") ? Integer.parseInt(jsonObject.getString("hzfs")) : 0;
		// hzfs:0=商品，1=商品+颜色 , 2=商品+颜色+尺码,3=类型，4=品牌，5=季节，6=日期，7=店铺，8=客户 10=颜色
		// 11=销售类型,13=销售部门,14=尺码,15=折扣,16=货位,17=日期+供应商,18=区位,19=供应商
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// String fieldlist = "timestr,amount,rateamt,curr,ratecur";
		// String strwhere = " epid=" + htp.getUserid();
		sort += " " + order + ",keyid";
		vTotalxshzfx dal = new vTotalxshzfx();
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		tb = dal.GetTable(qp, hzfs, sortid, order, totalcurr);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 分页查询销售汇总数据 new
	protected void ListXshzfx21(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "timestr";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		// Float totalcurr = jsonObject.has("totalcurr") ?
		// Float.parseFloat(jsonObject.getString("totalcurr")) : 0;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		// int hzfs = jsonObject.has("hzfs") ?
		// Integer.parseInt(jsonObject.getString("hzfs")) : 0;
		// hzfs:0=商品，1=商品+颜色 , 2=商品+颜色+尺码,3=类型，4=品牌，5=季节，6=日期，7=店铺，8=客户 10=颜色
		// 11=销售类型,13=销售部门,14=尺码,15=折扣,16=货位,17=日期+供应商,18=区位,19=供应商
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vTotalxshzfx dal = new vTotalxshzfx();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类

		// if (sortid == 1) { sort = " amount " + order + ",wareid"; }
		// else
		// if (sortid == 2) { sort = " curr " + order + ",wareid"; }
		// else
		// if (sortid == 3) { sort = " mlcurr " + order + ",wareid"; }
		// else
		// if (sortid == 4) { sort = " xsord " + order + ",wareid"; }
		// else
		// { sort = " wareno " + order + ",wareid"; }

		QueryParam qp = new QueryParam(page, pagesize);
		Table tb = new Table();
		tb = dal.GetTable(qp, sortid, order);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 分页查询销售汇总数据 new
	protected void ListXshzfx3(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vTotalxshzfx dal = new vTotalxshzfx();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类

		QueryParam qp = new QueryParam(page, pagesize);
		Table tb = new Table();
		tb = dal.GetTable(qp, sortid, order);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 汇总批发商品对账表
	protected void TotalWareoutcheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalwareoutcheck dal = new vTotalwareoutcheck();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setMaxday(htp.getMaxday());
		// dal.setHousecostbj(htp.getHousecostbj());
		dal.setQxbj(htp.getQxbj());
		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 查询批发商品对账表
	protected void ListWareoutcheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "datestr";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : " asc ";
		int hzfs = jsonObject.has("hzfs") ? Integer.parseInt(jsonObject.getString("hzfs")) : 0;
		// hzfs: 0=商品 1=商品,颜色 2=商品,颜色,尺码
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// String fieldlist = "timestr,amount,rateamt,curr,ratecur";
		// String strwhere = " epid=" + htp.getUserid();
		// String fieldlist = "
		// datestr,amount,curr,ratecur,skc,mlcurr,id,checkcurr,curr-checkcurr as
		// checkmlcurr";
		// fieldlist += ",case retailcurr when 0 then 0 else
		// round(curr/retailcurr,2) end as discount";
		// fieldlist += ",case amount when 0 then 0 else round(curr/amount,2)
		// end as price";
		// String strwhere = " epid=" + htp.getUserid();
		String sort = " datestr,noteno,wareid,fs";
		if (hzfs > 0)
			sort += ",colorno,colorid";
		if (hzfs > 1)
			sort += ",sizeno,sizeid";

		vTotalwareoutcheck dal = new vTotalwareoutcheck();
		dal.setUserid(htp.getUserid());

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		tb = dal.GetTable(qp, hzfs);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 汇总销售趋势数据
	protected void TotalXsqsfx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalxsqsfx dal = new vTotalxsqsfx();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setMaxday(htp.getMaxday());
		dal.setHousecostbj(htp.getHousecostbj());
		dal.setQxbj(htp.getQxbj());
		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询销售趋势分析
	protected void ListXsqsfx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "datestr";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// String fieldlist = "timestr,amount,rateamt,curr,ratecur";
		// String strwhere = " epid=" + htp.getUserid();

		String fieldlist = " datestr,amount,curr,ratecur,skc,mlcurr,id,checkcurr,curr-checkcurr as checkmlcurr";
		fieldlist += ",case retailcurr when 0 then 0 else round(curr/retailcurr,2) end as discount";
		fieldlist += ",case amount when 0 then 0 else round(curr/amount,2) end as price";
		String strwhere = "  epid=" + htp.getUserid();
		sort += " " + order + " ,id";

		vTotalxsqsfx dal = new vTotalxsqsfx();
		// dal.setHavesale(havesale);

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 汇总销售时段数据
	protected void TotalXstimefx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalxstimefx dal = new vTotalxstimefx();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setMaxday(htp.getMaxday());

		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询销售时段分析
	protected void ListXstimefx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "timestr";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = "timestr,amount,rateamt,curr,ratecur";
		String strwhere = "  epid=" + htp.getUserid();
		sort += " " + order + " ,id";

		vTotalxstimefx dal = new vTotalxstimefx();
		// dal.setHavesale(havesale);

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 汇总销售同比数据
	protected void TotalXstbfx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalxstbfx dal = new vTotalxstbfx();
		// System.out.println("0000");
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// System.out.println("11111");
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setMaxday(htp.getMaxday());
dal.setQxbj(htp.getQxbj());
		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询销售同比分析
	protected void ListXstbfx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// int sortid = jsonObject.has("sortid") ?
		// Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int hzfs = jsonObject.has("hzfs") ? Integer.parseInt(jsonObject.getString("hzfs")) : 0;
		// hzfs:0=品牌， 1=类型， 2=季节，3=店铺，4=客户，5=销售类型
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "id";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// String fieldlist = "a.epid0 as
		// epid,b.epname,a.amount,a.rateamt,a.curr,a.ratecur,a.skc,a.num,case
		// a.num when 0 then 0 else round(a.amount/a.num,2) end as ratexs";
		// String strwhere = " a.epid=" + htp.getUserid();
		sort += " " + order + " ,id";

		vTotalxstbfx dal = new vTotalxstbfx();
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		// dal.setHavesale(havesale);

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		tb = dal.GetTable(qp, hzfs);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 汇总销售业绩统计
	protected void TotalXsyjtj(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalxsyjtj dal = new vTotalxsyjtj();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setMaxday(htp.getMaxday());
		dal.setQxbj(htp.getQxbj());
		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询销售业绩统计
	protected void ListXsyjtj(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "epname";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = "a.epid0 as epid,b.epname,a.amount,a.rateamt,a.curr,a.ratecur,a.skc,a.num,case a.num when 0 then 0 else round(a.amount/a.num,2) end as ratexs,a.id";
		String strwhere = "  a.epid=" + htp.getUserid();
		sort += " " + order + ",id";

		vTotalxsyjtj dal = new vTotalxsyjtj();
		// dal.setHavesale(havesale);

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);

		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 汇总调拨订货完成数据
	protected void TotalAllotorderwc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalallotorderwc dal = new vTotalallotorderwc();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类

		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		// dal.setMaxday(htp.getMaxday());

		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询调拨订货完成数据
	protected void ListAllotorderwc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "codename";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : " asc ";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vTotalallotorderwc dal = new vTotalallotorderwc();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setAccid(htp.getMaccid());
		// dal.setQxbj(qxbj);
		// dal.setNowdate(htp.getNowdate());
		// dal.setMaxday(maxday);
		// dal.setAccbegindate(htp.getAccdate());
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam(page, pagesize);
		Table tb = new Table();

		tb = dal.GetTable(qp);

		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 汇总客户订货完成数据
	protected void TotalCustorderwc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalcustorderwc dal = new vTotalcustorderwc();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类

		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		// dal.setMaxday(htp.getMaxday());

		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询客户订货完成数据
	protected void ListCustorderwc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "codename";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : " asc ";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vTotalcustorderwc dal = new vTotalcustorderwc();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setAccid(htp.getMaccid());
		// dal.setQxbj(qxbj);
		// dal.setNowdate(htp.getNowdate());
		// dal.setMaxday(maxday);
		// dal.setAccbegindate(htp.getAccdate());
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam(page, pagesize);
		Table tb = new Table();

		tb = dal.GetTable(qp);

		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 汇总采购订货完成数据
	protected void TotalProvorderwc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalprovorderwc dal = new vTotalprovorderwc();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类

		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		// dal.setMaxday(htp.getMaxday());

		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询采购订货完成数据
	protected void ListProvorderwc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "codename";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : " asc ";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vTotalprovorderwc dal = new vTotalprovorderwc();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setAccid(htp.getMaccid());
		// dal.setQxbj(qxbj);
		// dal.setNowdate(htp.getNowdate());
		// dal.setMaxday(maxday);
		// dal.setAccbegindate(htp.getAccdate());
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam(page, pagesize);
		Table tb = new Table();

		tb = dal.GetTable(qp);

		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 汇总销售折扣分析数据（未用）
	protected void TotalXszkfx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalxszkfx dal = new vTotalxszkfx();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setMaxday(htp.getMaxday());

		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询销售折扣分析
	protected void ListXszkfx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "codename";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = "discount,amount,rateamt,curr,ratecur";
		String strwhere = "  epid=" + htp.getUserid();
		sort += " " + order + " ,id";

		vTotalxszkfx dal = new vTotalxszkfx();
		// dal.setHavesale(havesale);

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 汇总供需平衡表
	protected void TotalGxbalance(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalgxbalance dal = new vTotalgxbalance();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setQxbj(htp.getQxbj());
		dal.setCalcdate(htp.getCalcdate());
		// dal.setMaxday(htp.getMaxday());

		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询供需平衡数据
	protected void ListGxbalance(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "wareno";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : " asc ";
		String grouplist = jsonObject.has("grouplist") ? jsonObject.getString("grouplist") : "";
		String sortlist = jsonObject.has("sortlist") ? jsonObject.getString("sortlist") : "";

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		if (Func.isNull(grouplist))
			grouplist = "a.wareid,b.wareno,b.warename,b.units,b.retailsale,a.colorid,c.colorname,a.sizeid,d.sizename,d.sizeno";
		// String fieldlist = "sum(a.cdamt) as cdamt,sum(a.kcamt) as
		// kcamt,sum(a.kdamt) as kdamt,sum(a.xqamt) as xqamt";
		String strwhere = " a.epid=" + htp.getUserid();
		// sort += " " + order + " ,keyid";

		vTotalgxbalance dal = new vTotalgxbalance();
		// dal.setHavesale(havesale);

		QueryParam qp = new QueryParam(page, pagesize, sortlist);
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, grouplist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 汇总销售占比数据
	protected void TotalXszbfx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalxszbfx dal = new vTotalxszbfx();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setMaxday(htp.getMaxday());

		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询销售占比分析
	protected void ListXszbfx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "codename";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = "a.codeid,a.codename,a.amount,a.rateamt,a.curr,a.ratecur";
		String strwhere = "  a.epid=" + htp.getUserid();
		sort += " " + order + " ,id";

		vTotalxszbfx dal = new vTotalxszbfx();
		// dal.setHavesale(havesale);

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 汇总经销商进销存明细
	protected void TotalJxcmxbuyer(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotaljxcmxbuyer dal = new vTotaljxcmxbuyer();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setServerdatetime(htp.getNowdatetime());
		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	protected void ListJxcmxbuyer(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "company";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : " asc ";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = "  a.id,a.notedate,a.notetype,a.accid,a.noteno,a.remark,a.amount0,a.curr0,a.amount1,a.curr1,a.amount2,a.wlremark,c.custname as buyaccname ";
		// qry += "\n FROM v_cxjxcmx_data a ";
		// qry += "\n join ACCCONNECT b on a.accid=b.buyaccid";
		// qry += "\n left outer join customer c on b.sellcustid=c.custid";
		String strwhere = " a.epid=" + htp.getUserid() + " and b.sellaccid=" + htp.getMaccid();
		// WriteLogTXT("debug", "ListJxcmxbuyer", qry);
		String sort = " notedate,id";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		vTotaljxcmxbuyer dal = new vTotaljxcmxbuyer();
		// LogUtils.LogDebugWrite("ListSalewhere", "begin");
		tb = dal.GetTable(qp, strwhere, fieldlist);
		// LogUtils.LogDebugWrite("ListSalewhere", "end");
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 汇总经销商进销存明细
	protected void TotalBuyerwarefx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalBuyerwarefx dal = new vTotalBuyerwarefx();

		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setServerdatetime(htp.getNowdatetime());
		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 汇总商品买家进销比
	protected void TotalWarebuyerfx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalwarebuyerfx dal = new vTotalwarebuyerfx();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setServerdatetime(htp.getNowdatetime());
		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页查询经销商进销比明细
	protected void ListBuyerwarefx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "wareno";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		String sortlist = jsonObject.has("sortlist") ? jsonObject.getString("sortlist") : "";
		if (sortlist.length() > 0)
			sort = sortlist;
		else
			sort += " " + order;
		sort += ",id";

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int hzfs = jsonObject.has("hzfs") ? Integer.parseInt(jsonObject.getString("hzfs")) : 0;
		// hzfs:0=货号 1=货号+颜色 2=货号+颜色+尺码
		// sort += " " + order + ",id";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		vTotalwarebuyerfx dal = new vTotalwarebuyerfx();
		dal.setUserid(htp.getUserid());
		// LogUtils.LogDebugWrite("ListSalewhere", "begin");
		tb = dal.GetTable(qp, hzfs);
		// LogUtils.LogDebugWrite("ListSalewhere", "end");
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 分页查询商品买家进销比
	protected void ListWarebuyerfx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "company";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = " a.id,a.ACCID,b.ACCNAME,c.custname as COMPANY,a.AMOUNTQC,a.AMOUNTRK,a.currrk,a.AMOUNTXS,a.currxs,a.RATEXS,a.AMOUNTJC,a.RATERK,a.RATEWC";
		// qry += " FROM v_warebuyerfx_data a ";
		// qry += " left outer join accreg b on a.accid=b.accid";
		// qry += " left outer join customer c on a.custid=c.custid";
		String strwhere = " a.EPID=" + htp.getUserid();
		// if (sortid == 1) {
		sort += " " + order + ", id ";

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		vTotalwarebuyerfx dal = new vTotalwarebuyerfx();
		// LogUtils.LogDebugWrite("ListSalewhere", "begin");
		tb = dal.GetTable(qp, strwhere, fieldlist);
		// LogUtils.LogDebugWrite("ListSalewhere", "end");
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 汇总批发客户销售分布
	protected void TotalSalewhere(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vSalewhere dal = new vSalewhere();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setCalcdate(htp.getCalcdate());
		dal.setQxbj(htp.getQxbj());
		if (dal.doTotal(jsonObject) == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}
	}

	// 分页显示批发客户销售分布
	protected void ListSalewhere(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sumsql = jsonObject.has("sumsql") ? jsonObject.getString("sumsql") : "";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "wareno";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		// int havesale = jsonObject.has("havesale") ?
		// Integer.parseInt(jsonObject.getString("havesale")) : 1;
		// havesale=1,只查询有销售的商品记录
		int hzfs = jsonObject.has("hzfs") ? Integer.parseInt(jsonObject.getString("hzfs")) : 0;
		// hzfs:0=商品，1=商品+颜色 skc，2=商品+颜色+尺码sku
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vSalewhere dal = new vSalewhere();
		// dal.setHavesale(havesale);
		dal.setUserid(htp.getUserid());
		sort += " " + order + ",keyid";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		// LogUtils.LogDebugWrite("ListSalewhere", "begin");
		tb = dal.GetTable(qp, hzfs, sumsql);
		// LogUtils.LogDebugWrite("ListSalewhere", "end");
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 分享零售单
	protected void ShareWareout(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		if (htp.getShareok() == 0) {
			WriteResult(response, 0, "当前用户角色没有分享权限！");
			return;
		}
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int fs = jsonObject.has("fs") ? Integer.parseInt(jsonObject.getString("fs")) : 0;
		// fs:0=零售，1=批发，2=退货
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int housezkbj = htp.getHousezkbj();

		vShareunit dal = new vShareunit();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setHousezkbj(housezkbj);
		WriteResult(response, dal.doShareWareout(fs), dal.getErrmess());
	}

	// 分享商品资料
	protected void ShareWarecode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		if (htp.getShareok() == 0) {
			WriteResult(response, 0, "当前用户角色没有分享权限！");
			return;
		}
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		//int fs = jsonObject.has("fs") ? Integer.parseInt(jsonObject.getString("fs")) : 0;
		//fs:0=零售，1=批发，2=退货
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		Warecode dal = new Warecode();
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.doShareWarecode(), dal.getErrmess());
	}

	// 分享客户订单
	protected void ShareCustorder(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		if (htp.getShareok() == 0) {
			WriteResult(response, 0, "当前用户角色没有分享权限！");
			return;
		}
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// int fs = jsonObject.has("fs") ?
		// Integer.parseInt(jsonObject.getString("fs")) : 0;
		// fs:0=零售，1=批发，2=退货
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		vShareunit dal = new vShareunit();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		WriteResult(response, dal.doShareCustorder(), dal.getErrmess());
	}

	// 分享采购订单
	protected void ShareProvorder(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		if (htp.getShareok() == 0) {
			WriteResult(response, 0, "当前用户角色没有分享权限！");
			return;
		}
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// int fs = jsonObject.has("fs") ?
		// Integer.parseInt(jsonObject.getString("fs")) : 0;
		// fs:0=零售，1=批发，2=退货
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";

		vShareunit dal = new vShareunit();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);

		WriteResult(response, dal.doShareProvorder(), dal.getErrmess());
	}

	// // 取消提单--撤单
	// protected void Removesubmit(HttpServletResponse response, HttpInfo htp)
	// throws ServletException, IOException {
	// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
	//
	// vRemovesubmit dal = new vRemovesubmit();
	// DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
	//
	// dal.setQxpublic(htp.getQxpublic());
	// dal.setLastop(htp.getUsername());
	// dal.setAccid(htp.getMaccid());
	//
	// WriteResult(response, dal.Run(), dal.getErrmess());
	//
	// }

	/// <summary>
	/// 获取指定参数信息
	/// </summary>
	protected void GetParameter(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Uparameter dal = new Uparameter();

		Table tb = new Table();
		String usection = jsonObject.has("usection") ? jsonObject.getString("usection") : "*";
		String usymbol = jsonObject.has("usymbol") ? jsonObject.getString("usymbol") : "*";

		String strwhere = " accid=" + htp.getMaccid() + " and usection='" + usection.toUpperCase() + "' and usymbol='" + usymbol.toUpperCase() + "'";

		// Table tb = new Table();
		tb = dal.GetList(strwhere).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	protected void GetParameterX(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Uparameter dal = new Uparameter();

		// Table tb = new Table();
		String usection = jsonObject.has("usection") ? jsonObject.getString("usection") : "";
		String usymbol = jsonObject.has("usymbol") ? "#" + jsonObject.getString("usymbol") : "";

		String strwhere = " accid=" + htp.getMaccid() + " and usection='" + usection.toUpperCase() + "' and usymbol like '" + usymbol.toUpperCase() + "#%'";

		// Table tb = new Table();
		String jsonstr = dal.GetListX(strwhere);

		Write(response, jsonstr);

	}

	/// <summary>
	/// 保存参数信息
	/// </summary>
	protected void WriteParameter(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Uparameter dal = new Uparameter();

		String usection = jsonObject.has("usection") ? jsonObject.getString("usection") : "";
		String usymbol = jsonObject.has("usymbol") ? jsonObject.getString("usymbol") : "";
		String uvalue = jsonObject.has("uvalue") ? jsonObject.getString("uvalue") : "";
		// string qry = " accid=" + accid + " and usection='" + usection + "'
		// and usymbol='" + usymbol + "'";
		dal.setUsection(usection.toUpperCase());
		dal.setUsymbol(usymbol.toUpperCase());
		dal.setUvalue(uvalue);
		dal.setAccid(htp.getMaccid());

		WriteResult(response, dal.Update(), dal.getErrmess());

	}

	/// <summary>
	/// 保存超长参数信息
	/// </summary>
	protected void WriteParameterX(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Uparameter dal = new Uparameter();

		String usection = jsonObject.has("usection") ? jsonObject.getString("usection") : "";
		String usymbol = jsonObject.has("usymbol") ? jsonObject.getString("usymbol") : "";
		String uvalue = jsonObject.has("uvalue") ? jsonObject.getString("uvalue") : "";
		// string qry = " accid=" + accid + " and usection='" + usection + "'
		// and usymbol='" + usymbol + "'";
		dal.setUsection(usection.toUpperCase());
		dal.setUsymbol("#" + usymbol.toUpperCase());
		dal.setUvalue(uvalue);
		dal.setAccid(htp.getMaccid());

		WriteResult(response, dal.UpdateX(), dal.getErrmess());

	}

	// ==============================
	// 删除指定结算方式
	protected void DelPaywayByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许删除记录！");
			return;
		}

		long payid = jsonObject.has("payid") ? Long.parseLong(jsonObject.getString("payid")) : 0;
		Payway dal = new Payway();
		dal.setPayid(payid);
		dal.setLastop(lastop);
		dal.setAccid(accid);
		dal.setAccbegindate(htp.getAccdate());

		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 获取指定结算方式id信息
	protected void GetPaywayByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long payid = jsonObject.has("payid") ? Long.parseLong(jsonObject.getString("payid")) : 0;
		if (payid == 0) {
			WriteResult(response, 0, "结算方式id参数无效");
			return;
		}

		String strwhere = " statetag=1 and Payid=" + payid;// +" and
															// statetag=1";
		strwhere += " and accid=" + htp.getMaccid();
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "PAYID,PAYNAME,PAYNO,ACCID,NOUSED,STATETAG,LASTOP,LASTDATE";

		Payway dal = new Payway();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取指定结算方式代号信息
	protected void GetPaywayByNO(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String payno = jsonObject.has("payno") ? jsonObject.getString("payno").toUpperCase() : "";
		if (payno == null || payno.equals("")) {
			WriteResult(response, 0, "结算方式代号参数无效");
			return;
		}

		String strwhere = " statetag=1 and payno='" + payno + "'";// +" and
																	// statetag=1";
		strwhere += " and accid=" + htp.getMaccid();
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "PAYID,PAYNAME,PAYNO,ACCID,NOUSED,STATETAG,LASTOP,LASTDATE";

		Payway dal = new Payway();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 更改结算方式
	protected void UpdatePaywayByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String lastop = htp.getUsername();
		long accid = htp.getMaccid();
		if (accid == 1000 && (lastop.equals("演示") || lastop.equals("枫杨"))) {
			WriteResult(response, 0, "这是演示套账，不允许更改记录！");
			return;
		}
		Payway dal = new Payway();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(accid);
		dal.setLastop(lastop);
		// dal.setUserid(htp.getUserid());

		WriteResult(response, dal.Update(), dal.getErrmess());

	}

	// 新增结算方式
	protected void AddPaywayRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Payway dal = new Payway();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setStatetag(1);

		// System.out.println("addpayway 3");

		WriteResult(response, dal.Append(), dal.getErrmess());
	}

	/// <summary>
	/// 获取可用的结算方式代号
	/// </summary>
	protected void GetPaynoList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {

		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Payway dal = new Payway();
		dal.setAccid(htp.getMaccid());
		Write(response, dal.GetUseEnabledList());

	}

	// 结算方式分页列表
	protected void PaywayList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("PaywayList 1 maccid=" + htp.maccid);
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		int noused = jsonObject.has("noused") ? Integer.parseInt(jsonObject.getString("noused")) : 0;
		int sybj = jsonObject.has("sybj") ? Integer.parseInt(jsonObject.getString("sybj")) : 0;// 在定义结算方式时，sybj=0
		int nov = jsonObject.has("nov") ? Integer.parseInt(jsonObject.getString("nov")) : 0;// 不显示储值卡结算方式V
		int downbj = jsonObject.has("downbj") ? Integer.parseInt(jsonObject.getString("downbj")) : 0;

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// " Paywayid ";
		String payno = jsonObject.has("payno") ? jsonObject.getString("payno") : "";
		String payname = jsonObject.has("payname") ? jsonObject.getString("payname") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String sort = " PAYNO,PAYID ";
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "PAYID,PAYNAME,PAYNO,ACCID,NOUSED,STATETAG,LASTOP,LASTDATE";
		String strwhere = "accid=" + htp.getMaccid();

		if (sybj == 0)
			strwhere += " and (payno<'O' or payno='V')";
		if (nov == 1)
			strwhere += " and payno<>'V'";

		if (downbj == 0)
			strwhere += " and STATETAG=1";

		// if (ywly < 2) qry += " and ywly=" + ywly;//ywly=0
		// 只查询手机端增加的单据，用于向erp传数据
		if (noused < 2)
			strwhere += " and NOUSED=" + noused;

		if (!Func.isNull(findbox))
			strwhere += " and Payname like '%" + findbox + "%' ";
		if (!Func.isNull(payname))
			strwhere += " and Payname like '%" + payname + "%' ";
		if (!Func.isNull(payno))
			strwhere += " and payno = '" + payno + "'";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		Payway dal = new Payway();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// ==============================
	// 删除指定销售方式
	protected void DelSalecodeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long saleid = jsonObject.has("saleid") ? Long.parseLong(jsonObject.getString("saleid")) : 0;
		if (saleid == 0) {
			WriteResult(response, 0, "销售方式id参数无效");
			return;
		}
		Salecode dal = new Salecode();
		dal.setSaleid(saleid);
		dal.setLastop(htp.getUsername());
		dal.setAccid(htp.getMaccid());
		// dal.setAccbegindate(htp.getAccdate());
		if (dal.Delete() == 1) {
			WriteResult(response, 1, "删除成功！");
		} else {
			WriteResult(response, 0, dal.getErrmess());
		}
	}

	// 获取指定销售方式id信息
	protected void GetSalecodeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long saleid = jsonObject.has("saleid") ? Long.parseLong(jsonObject.getString("saleid")) : 0;
		if (saleid == 0) {
			WriteResult(response, 0, "销售方式id参数无效");
			return;
		}

		String strwhere = "  saleid=" + saleid;// +" and statetag=1";
		strwhere += " and (accid=0 or accid=" + htp.getMaccid() + ")";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "SALEID,SALENAME,ACCID,NOUSED,STATETAG,LASTOP,LASTDATE";

		Salecode dal = new Salecode();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 更改销售方式
	protected void UpdateSalecodeByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Salecode dal = new Salecode();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		// dal.setUserid(htp.getUserid());

		if (dal.getSaleid() == null) {
			WriteResult(response, 0, "销售方式id参数无效！");
			return;
		}
		if (dal.Exists() == 0) // 判断销售方式名称是否已存在
		{
			WriteResult(response, 0, dal.getErrmess());
			return;
		}

		if (dal.Update() == 0) {
			WriteResult(response, 0, "修改失败！");
		} else {
			WriteResult(response, 1, "修改成功！");
		}

	}

	// 新增销售方式
	protected void AddSalecodeRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Salecode dal = new Salecode();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setStatetag(1);
		if (dal.getSalename() == null && dal.getSalename().equals("")) {
			WriteResult(response, 0, "销售方式名称不允许为空！");
			return;
		}
		if (dal.Exists() == 0) // 判断销售方式名称是否已存在
		{
			WriteResult(response, 0, dal.getErrmess());
			return;

		}

		// System.out.println("addsalecode 3");
		if (dal.Append() == 0) {
			WriteResult(response, 0, "增加失败！");
		} else {
			WriteResult(response, 1, dal.getSaleid().toString());
		}
	}

	// 销售方式分页列表
	protected void SalecodeList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// System.out.println("SalecodeList 1");
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int noused = jsonObject.has("noused") ? Integer.parseInt(jsonObject.getString("noused")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// " Salecodeid ";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : " asc ";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String sort = " SALEID ";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "SALEID,SALENAME,ACCID,NOUSED,STATETAG,LASTOP,LASTDATE";
		// String strwhere = "accid=" + htp.getMaccid() + " and statetag=1";
		String strwhere = " (ACCID=" + htp.getMaccid() + " or accid=0) and STATETAG=1 and saleid>0";

		if (noused < 2)
			strwhere += " and NOUSED=" + noused;

		if (!findbox.equals(""))
			strwhere += " and SALENAME like '%" + findbox + "%'";

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		Salecode dal = new Salecode();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 汇总当前成本
	protected void TotalCost(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : "";

		Funcpackge dal = new Funcpackge();
		dal.setAccbegindate(htp.getAccdate());

		WriteResult(response, dal.myTotalCost(nowdate, 0), dal.getErrmess());
	}

	// 汇总当前库存
	protected void TotalWareSum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : "";
		// System.out.println("TotalWareSum=" + nowdate);
		Funcpackge dal = new Funcpackge();

		WriteResult(response, dal.myTotalWaresum(nowdate, 0), dal.getErrmess());
	}

	// 汇总客户库存及成本
	protected void TotalCust(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : "";
		// System.out.println("TotalWareSum=" + nowdate);
		Custsum dal = new Custsum();

		WriteResult(response, dal.myTotalCust(nowdate, 0), dal.getErrmess());
	}

	// 汇总往来账款
	protected void TotalCurr(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : "";

		Funcpackge dal = new Funcpackge();

		WriteResult(response, dal.myTotalCurr(nowdate, 0), dal.getErrmess());
	}

	// 汇总批发累计销售  // 让爱回家专用
	protected void TotalWareout(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : "";
		if (nowdate.length() <= 0)
			nowdate = Func.DateToStr(pFunc.getServerdatetime(), "yyyy-MM-dd");// DateTime.Now.ToString("yyyy-MM-dd");
		Funcpackge dal = new Funcpackge();
		WriteResult(response, dal.myTotalWareout(nowdate, 0), dal.getErrmess());
	}

	// 汇总企业账户数据
	protected void TotalAccSum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : "";
		String accdate = htp.getAccdate();
		if (nowdate.length() <= 0)
			nowdate = htp.getNowdate();
		//		System.out.println("nowdate=" + nowdate + " accdate=" + accdate);
		// if (string.Compare(nowdate, p_AccBegindatestr) < 0)
		if (nowdate.compareTo(accdate) < 0) {
			WriteResult(response, 0, "只能在建账日期" + accdate + "之后汇总！");
			return;
		}
		if (nowdate.compareTo(htp.getNowdate()) > 0) {
			WriteResult(response, 0, "只能在当前日期" + htp.getNowdate() + "内汇总！");
			return;
		}
		long accid = htp.getMaccid();
		String qry = "declare";
		qry += "  v_retcs varchar2(200);";
		qry += "\n begin";
		qry += "\n  begin";
		qry += "\n    p_totalaccsum(" + accid + ",'" + nowdate + "');";
		qry += "\n    v_retcs:='1操作成功！';";
		qry += "\n  exception";
		qry += "\n     when others then";
		qry += "\n     v_retcs:='0'||substr(sqlerrm,1,190);";
		qry += "\n  end;";
		qry += "\n  select v_retcs into :retcs from dual;";
		qry += "\n end;";

		Map<String, ProdParam> param = new HashMap<String, ProdParam>();
		param.put("retcs", new ProdParam(Types.VARCHAR));
		int ret = DbHelperSQL.ExecuteProc(qry, param, 3600);
		if (ret < 0) {
			WriteResult(response, 0, "操作异常1!");
			return;
		}
		String retcs = param.get("retcs").getParamvalue().toString();
		//		System.out.println(retcs);
		if (retcs.substring(0, 1).equals("0")) {
			WriteResult(response, 0, "操作异常2:" + retcs.substring(1).replace("\"", "'"));
			return;
		}

		Funcpackge dal = new Funcpackge();
		if (dal.myTotalWareout(nowdate, accid) < 0) {
			WriteResult(response, 0, "操作异常3!");
			return;
		}

		WriteResult(response, 1, "操作成功!");

	}

	// 每日处理
	protected void Passday(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String workday = jsonObject.has("workday") ? jsonObject.getString("workday") : "";
		// if (workday.equals("")) {
		// WriteResult(response, 0, "日期参数无效! ");
		// return;
		// }
		Accreg dal = new Accreg();
		WriteResult(response, dal.doPassday(workday), dal.getErrmess());
	}

	// 每日汇总账套数据
	protected void Totalacc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String workday = jsonObject.has("workday") ? jsonObject.getString("workday") : "";
		Accreg dal = new Accreg();
		WriteResult(response, dal.doTotalacc(workday), dal.getErrmess());
	}

	/// <summary>
	/// 获取当前工作日期
	/// </summary>
	protected void GetWorkday(HttpServletResponse response) throws ServletException, IOException {
		Table tb = new Table();
		String qry = "select UVALUE from UPARAMETER where ACCID=0 and USECTION='OPTIONS' and USYMBOL='WORKDAY'";
		// LogUtils.LogDebugWrite("GetWorkday0", qry);
		tb = DbHelperSQL.Query(qry).getTable(1);
		String ss = "";
		if (tb.getRowCount() > 0) {
			ss = tb.getRow(0).get("UVALUE").toString();
			// LogUtils.LogDebugWrite("GetWorkday1", ss);

		}
		if (ss.equals("")) {
			qry = "Select To_Char(SYSDATE-2,'yyyy-mm-dd') as serverdate from dual";
			tb = DbHelperSQL.Query(qry).getTable(1);
			ss = tb.getRow(0).get("SERVERDATE").toString();
			// LogUtils.LogDebugWrite("GetWorkday2", ss);
		}
		String jsonstr = "{\"result\":1,\"msg\":\"操作成功！\",\"WORKDAY\":\"" + ss + "\"}";
		// LogUtils.LogDebugWrite("GetWorkday3", jsonstr);
		Write(response, jsonstr);

	}

	// 清理演示账套数据
	protected void ClearDemoData(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String qry = "begin  p_cleardemodata; end;";

		if (DbHelperSQL.ExecuteSql(qry) >= 0) {
			WriteResult(response, 1, "操作成功!");

		} else {
			WriteResult(response, 0, "操作失败!");

		}
	}

	// 汇总进销存汇总
	protected void TotalJxchz(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// int cxfs = jsonObject.has("cxfs") ?
		// Integer.parseInt(jsonObject.getString("cxfs")) : 0;
		// cxfs 0=单据，1=商品，2=商品+颜色，3=商品+颜色+尺码
		vTotalJxchz dal = new vTotalJxchz();

		int housecostbj = htp.getHousecostbj();
		int qxbj = htp.getQxbj();
		int priceprec = htp.getPriceprec();
		// String accbegindate = htp.getAccdate();// 账套开始使用日期
		int maxday = htp.getMaxday();

		// ==========================
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAccbegindate(htp.getAccdate());
		dal.setServerdatetime(htp.getNowdatetime());
		dal.setPriceprec(priceprec);
		dal.setCalcdate(htp.getCalcdate());
		if (dal.Total(qxbj, housecostbj, maxday) < 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 汇总客户进销存汇总
	protected void TotalJxckhhz(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		vTotalJxckhhz dal = new vTotalJxckhhz();

		// int housecostbj = htp.getHousecostbj();
		int qxbj = htp.getQxbj();
		int priceprec = htp.getPriceprec();
		// String accbegindate = htp.getAccdate();// 账套开始使用日期
		int maxday = htp.getMaxday();

		// ==========================
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAccbegindate(htp.getAccdate());
		dal.setServerdatetime(htp.getNowdatetime());
		dal.setPriceprec(priceprec);
		dal.setCalcdate(htp.getCalcdate());
		if (dal.Total(qxbj, maxday) < 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 汇总进销存明细
	protected void TotalJxcmx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int cxfs = jsonObject.has("cxfs") ? Integer.parseInt(jsonObject.getString("cxfs")) : 0;
		// cxfs 0=单据，1=商品，2=商品+颜色，3=商品+颜色+尺码
		vTotalJxcmx dal = new vTotalJxcmx();
		int housecostbj = htp.getHousecostbj(); // 1= 分店铺计算成本
		int qxbj = htp.getQxbj();
		int priceprec = htp.getPriceprec();
		int maxday = htp.getMaxday();
		// ==========================
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAccbegindate(htp.getAccdate());
		dal.setServerdatetime(htp.getNowdatetime());
		dal.setPriceprec(priceprec);
		dal.setCalcdate(htp.getCalcdate());
		if (dal.Total(qxbj, cxfs, housecostbj, maxday) < 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 汇总客户进销存明细
	protected void TotalJxckhmx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int cxfs = jsonObject.has("cxfs") ? Integer.parseInt(jsonObject.getString("cxfs")) : 0;
		// cxfs 0=单据，1=商品，2=商品+颜色，3=商品+颜色+尺码
		vTotalJxckhmx dal = new vTotalJxckhmx();
		// int housecostbj = htp.getHousecostbj(); // 1= 分店铺计算成本
		int qxbj = htp.getQxbj();
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
		int maxday = htp.getMaxday();
		// ==========================
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAccbegindate(htp.getAccdate());
		dal.setServerdatetime(htp.getNowdatetime());
		dal.setPriceprec(priceprec);
		dal.setCalcdate(htp.getCalcdate());
		if (dal.Total(qxbj, cxfs, maxday) < 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 分页查询进销存汇总数据
	protected void ListJxchz(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// int cxfs = jsonObject.has("cxfs") ?
		// Integer.parseInt(jsonObject.getString("cxfs")) : 0;
		// hzfs:0=商品，1=商品+颜色 , 2=商品+颜色+尺码,3=区位
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vTotalJxchz dal = new vTotalJxchz();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam();
		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		Table tb = new Table();

		if (page < 0) {// 导出excel
			String retcs = dal.GetTable2Excel(qp, jsonObject);
			// String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 分页查询客户进销存汇总数据
	protected void ListJxckhhz(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// int cxfs = jsonObject.has("cxfs") ?
		// Integer.parseInt(jsonObject.getString("cxfs")) : 0;
		// hzfs:0=商品，1=商品+颜色 , 2=商品+颜色+尺码,3=区位
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vTotalJxckhhz dal = new vTotalJxckhhz();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam();
		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		Table tb = new Table();

		tb = dal.GetTable(qp);

		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 查询库存明细账
	protected void ListJxcmx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int cxfs = jsonObject.has("cxfs") ? Integer.parseInt(jsonObject.getString("cxfs")) : 0;
		// cxfs 0=单据，1=商品，2=商品+颜色，3=商品+颜色+尺码
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
//		int housecostbj = htp.getHousecostbj(); // 1= 分店铺计算成本

		vTotalJxcmx dal = new vTotalJxcmx();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());

		QueryParam qp = new QueryParam();
		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		Table tb = new Table();

		tb = dal.GetTable(qp, cxfs);

		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 查询客户库存明细账
	protected void ListJxckhmx(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int cxfs = jsonObject.has("cxfs") ? Integer.parseInt(jsonObject.getString("cxfs")) : 0;
		// cxfs 0=单据，1=商品，2=商品+颜色，3=商品+颜色+尺码
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		vTotalJxckhmx dal = new vTotalJxckhmx();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());

		QueryParam qp = new QueryParam();
		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		Table tb = new Table();

		tb = dal.GetTable(qp, cxfs);

		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 查询收支经营
	protected void ListSzjyhz(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "xmid";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		if (sort.length() <= 0)
			sort = "xmid";
		sort = "jllb,xmlb," + sort + " " + order + ",id";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		vTotalSzjyhz dal = new vTotalSzjyhz();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// qp.setPageIndex(page);
		// qp.setPageSize(pagesize);
		// qp.setSortString(sort);
		Table tb = new Table();

		if (page < 0) {// 导出excel
			// String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			String retcs = dal.GetTable2Excel(qp, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			// aaaaa

			return;
		}
		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 经营收支汇总表
	protected void TotalSzjyhz(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// int housecostbj = htp.getHousecostbj();
		vTotalSzjyhz dal = new vTotalSzjyhz();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAccbegindate(htp.getAccdate());
		dal.setQxbj(htp.getQxbj());
		// WriteResult(response, dal.doTotal(), dal.getErrmess());
		if (dal.doTotal() == 0) {
			WriteResult(response, 0, dal.getErrmess());
		} else {
			WriteResultJson(response, 1, dal.getErrmess());
		}

	}

	// 汇总店角铺利润表
	protected void TotalShopcost(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int housecostbj = htp.getHousecostbj();
		vShopcostfx dal = new vShopcostfx();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());

		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setQxbj(htp.getQxbj());
		
		//		dal.setAccbegindate(htp.getAccdate());
		WriteResult(response, dal.Total(housecostbj), dal.getErrmess());

	}

	// 分页显示库存商品报警
	protected void ListWarn(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// int minxsday = jsonObject.has("minxsday") ?
		// Integer.parseInt(jsonObject.getString("minxsday")) : -1;
		int cxfs = jsonObject.has("cxfs") ? Integer.parseInt(jsonObject.getString("cxfs")) : 3;
		// cxfs:0=下限，1=上限，2=上下限，3=所有
		// int minjxrate = jsonObject.has("minjxrate") ?
		// Integer.parseInt(jsonObject.getString("minjxrate")) : -1;
		// int maxjxrate = jsonObject.has("maxjxrate") ?
		// Integer.parseInt(jsonObject.getString("maxjxrate")) : -1;
		// String maxssdate = jsonObject.has("maxssdate") ?
		// jsonObject.getString("maxssdate") : "";
		// String minssdate = jsonObject.has("minssdate") ?
		// jsonObject.getString("minssdate") : "";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "wareno";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		sort += " " + order + ",id";
		// 、、1=收入，2=支出，0=转账
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vTotalCxkczy dal = new vTotalCxkczy();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		// aaa
		if (page < 0) {// 导出excel
			// String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			String retcs = dal.doListWarn2Excel(qp, cxfs, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		tb = dal.doListWarn(qp, cxfs);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	protected void ListJxctj(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int hzfs = jsonObject.has("hzfs") ? Integer.parseInt(jsonObject.getString("hzfs")) : 1;
		// hzfs:0=商品，1=商品+颜色，2=商品+颜色+尺码
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "wareno";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		String sortlist = jsonObject.has("sortlist") ? jsonObject.getString("sortlist") : "";

		if (fieldlist.length() <= 0 || fieldlist.equals("*")) {
			fieldlist = "a.houseid,d.housename,f.provname,i.locano,j.areaname,g.brandname";
			fieldlist += ",a.ssdate,a.xsday,a.maxxsday,a.jxrate,a.avgxs,e.shdate,a.sxrate";
			fieldlist += ",a.amountjh,a.numjh,a.amountjt,a.numjt,a.amountxs,a.amountkc,b.prodno,b.retailsale";
		}

		if (sortlist.length() > 0)
			sort = sortlist;
		else
			sort += " " + order;
		sort += ",id";

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		vTotalJxctj dal = new vTotalJxctj();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		if (page < 0) {// 导出excel
			// System.out.println("1111");
			String retcs = dal.GetTable2Excel(qp, hzfs, jsonObject);
			// String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			// System.out.println("2222");
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		tb = dal.GetTable(qp, hzfs, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 汇总进销存统计(上下衣的供应商使用)
	protected void TotalJxctj(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int hzfs = jsonObject.has("hzfs") ? Integer.parseInt(jsonObject.getString("hzfs")) : 1;
		// hzfs:0=商品，1=商品+颜色，2=商品+颜色+尺码
		int havehouse = jsonObject.has("havehouse") ? Integer.parseInt(jsonObject.getString("havehouse")) : 1;
		//havehouse=1 要汇总店铺,当显示项目中有店铺的时候，传入1，否则传入0
		vTotalJxctj dal = new vTotalJxctj();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setQxbj(htp.getQxbj());
		dal.setMaxday(htp.getMaxday());
		dal.setHousecostbj(htp.getHousecostbj());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setCalcdate(htp.getCalcdate());
		if (dal.Total(hzfs, havehouse, jsonObject) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 汇总库存资源
	protected void TotalCxkczy(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : "";
		if (nowdate.equals(""))
			nowdate = htp.getNowdatetime();
		vTotalCxkczy dal = new vTotalCxkczy();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setCxdatetime(nowdate);
		dal.setQxbj(htp.getQxbj());
		dal.setServerdatetime(htp.getNowdatetime());
		dal.setAccbegindate(htp.getAccdate());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.doCxkczy(), dal.getErrmess());
	}

	// 汇总客户库存资源
	protected void TotalKhkczy(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : "";

		// String houseidlist = jsonObject.has("houseidlist") ?
		// jsonObject.getString("houseidlist") : "";
		if (nowdate.equals(""))
			nowdate = htp.getNowdatetime();
		vTotalkhkczy dal = new vTotalkhkczy();
		// 读取json数据到表类
		DbHelperSQL.JsonConvertObject(dal, jsonObject);
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setCxdatetime(nowdate);
		dal.setQxbj(htp.getQxbj());
		dal.setServerdatetime(htp.getNowdatetime());
		dal.setAccbegindate(htp.getAccdate());
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.doCxkczy(), dal.getErrmess());

	}

	// 查询店铺利润
	protected void ListShopcost(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int hzfs = jsonObject.has("hzfs") ? Integer.parseInt(jsonObject.getString("hzfs")) : 0;
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		// hzfs:0=店铺，1=日期
		// int sizenum = jsonObject.has("sizenum") ?
		// Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// 如果sizenum>0,表示按尺码横向展开显示
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		sort += " " + order;
		vShopcostfx dal = new vShopcostfx();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());

		QueryParam qp = new QueryParam();
		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		Table tb = new Table();

		tb = dal.GetTable(qp, hzfs, sort);

		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 查询库存资源
	protected void repCxkczy(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : "";
		if (nowdate.equals(""))
			nowdate = htp.getNowdatetime();
		// int xls = jsonObject.has("xls") ?
		// Integer.parseInt(jsonObject.getString("xls")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// 如果sizenum>0,表示按尺码横向展开显示
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int housecostbj = htp.getHousecostbj(); // 分店铺计算成本
		vTotalCxkczy dal = new vTotalCxkczy();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setServerdatetime(htp.getNowdatetime());
		dal.setCxdatetime(nowdate);

		QueryParam qp = new QueryParam();
		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		Table tb = new Table();

		if (sizenum > 0) {
			String jsonstr = dal.GetTable2Json(qp, housecostbj, sizenum);
			// System.out.println(jsonstr);
			if (page < 0) {// 导出excel

				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
			return;
		}

		if (page < 0) {// 导出excel
			// String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			String retcs = dal.GetTable2Excel(qp, 0, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		tb = dal.GetTable(qp, housecostbj);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 查询客户库存资源
	protected void repKhkczy(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// int xls = jsonObject.has("xls") ?
		// Integer.parseInt(jsonObject.getString("xls")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// 如果sizenum>0,表示按尺码横向展开显示
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// int housecostbj = htp.getHousecostbj(); // 分店铺计算成本

		vTotalkhkczy dal = new vTotalkhkczy();

		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());

		QueryParam qp = new QueryParam();
		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		Table tb = new Table();

		if (sizenum > 0) {
			String jsonstr = dal.GetTable2Json(qp, sizenum);
			// System.out.println(jsonstr);
			if (page < 0) {// 导出excel

				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
			return;
		}

		if (page < 0) {// 导出excel
			// String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			String retcs = dal.GetTable2Excel(qp, 0, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 查询库存资源，尺码横向展开
	/*
	 * protected void repCxkczySize(HttpServletResponse response, HttpInfo htp)
	 * throws ServletException, IOException { JSONObject jsonObject =
	 * JSONObject.fromObject(htp.getDatajson()); // int xls =
	 * jsonObject.has("xls") ? Integer.parseInt(jsonObject.getString("xls")) :
	 * 0; int sizenum = jsonObject.has("sizenum") ?
	 * Integer.parseInt(jsonObject.getString("sizenum")) : 0; if (sizenum == 0)
	 * sizenum = 8; // 如果sizenum>0,表示按尺码横向展开显示 int page = jsonObject.has("page")
	 * ? Integer.parseInt(jsonObject.getString("page")) : 1; int pagesize =
	 * jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) :
	 * 10; if (pagesize > 50) pagesize = 10; String accpublic =
	 * htp.getAccpublic(); // ACCPUBLIC账套后台控制参数 原qxpublic 31-40位参数对应 accpublic
	 * 1-10位参数 // 1234567890123456789012345678901234567890 //
	 * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX // |||||_5 1=开通订货会功能 // ||||__4
	 * 1=订货会截屏锁住 // |||___3 1=允许更改单据日期 // ||____2 1=表示分店铺算成本 // |_____1
	 * 1=表示允许转枫杨果 int housecostbj = 0; // 分店铺计算成本 if
	 * (Func.subString(accpublic, 2, 1).equals("1")) housecostbj = 1;
	 * vTotalCxkczy dal = new vTotalCxkczy(); DbHelperSQL.JsonConvertObject(dal,
	 * jsonObject);// 读取json数据到表类 dal.setAccid(htp.getMaccid());
	 * dal.setUserid(htp.getUserid());
	 * 
	 * QueryParam qp = new QueryParam(); qp.setPageIndex(page);
	 * qp.setPageSize(pagesize); // Table tb = new Table();
	 * 
	 * String jsonstr = dal.GetTable2Json(qp, housecostbj, sizenum);
	 * 
	 * if (page < 0) {// 导出excel
	 * 
	 * String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
	 * WriteResult(response, Integer.parseInt(retcs.substring(0, 1)),
	 * retcs.substring(1)); return; } Write(response, jsonstr);
	 * 
	 * }
	 */

	// 分页查询库存资源数据 ,根据xsid返回合计,解决合计显示不对的问题
	protected void ListCxkczy(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		int hzfs = jsonObject.has("hzfs") ? Integer.parseInt(jsonObject.getString("hzfs")) : 0;
		// hzfs:0=货号，1=货号+颜色，2=货号+颜色+尺码
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		// 排序方式0=汇总项目， 1=数量 2=金额
		int xsid = jsonObject.has("xsid") ? Integer.parseInt(jsonObject.getString("xsid")) : 0;
		// xsid: 0=有库存，1=无库存 ，2=指定范围 ,3=所有

		String nowdate = jsonObject.has("nowdate") ? jsonObject.getString("nowdate") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		float minamt = jsonObject.has("minamt") ? Float.parseFloat(jsonObject.getString("minamt")) : -999999;
		float maxamt = jsonObject.has("maxamt") ? Float.parseFloat(jsonObject.getString("maxamt")) : 999999;

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		if (nowdate.equals(""))
			nowdate = htp.getNowdate();
		int housecostbj = htp.getHousecostbj();

		vTotalCxkczy dal = new vTotalCxkczy();
		dal.setUserid(htp.getUserid());

		Table tb = new Table();
		QueryParam qp = new QueryParam();
		qp.setPageIndex(page);
		qp.setPageSize(pagesize);

		// public Table doListcxkczy(QueryParam qp, String nowdate, String
		// order, int hzfs, int sortid, int xsid, int housecostbj, float minamt,
		// float maxamt) {
		tb = dal.doListcxkczy(qp, nowdate, order, hzfs, sortid, xsid, housecostbj, minamt, maxamt);
		// System.out.println("aaa" + qp.getTotalString());

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 增加打印机设备
	protected void AddPrintdevRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String prtdevno = jsonObject.has("prtdevno") ?
		// jsonObject.getString("prtdevno") : "*";
		Printdev dal = new Printdev();

		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类

		// dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.Append(), dal.getErrmess());
	}

	// 修改打印设备
	protected void UpdatePrintdev(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		Printdev dal = new Printdev();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类

		// dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 查找打印设备
	protected void FindPrintdev(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String prtdevno = jsonObject.has("prtdevno") ? jsonObject.getString("prtdevno") : "";
		Printdev dal = new Printdev();
		dal.setPrtdevno(prtdevno);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Find(), dal.getErrmess());
	}

	// 打印设备列表
	protected void ListPrintdev(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "regdate";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " desc ";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		sort += " " + order + ",rowid ";
		String fieldlist = " a.id,a.prtdevno,a.regdate,a.remark,b.accname,b.company,a.statetag";
		String strwhere = " a.statetag<=1";
		// qry += "\n where a.notedate>=to_date('" + mindate + "','yyyy-mm-dd')
		// and a.notedate<=to_date('" + maxdate + " 23:59:59','yyyy-mm-dd
		// hh24:mi:ss')";
		if (!findbox.equals(""))
			strwhere += " and (a.prtdevno like '%" + findbox + "%' or b.accname like '%" + findbox.toUpperCase() + "')";
		Printdev dal = new Printdev();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();

		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取售价范围
	protected void GetSalerangeList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String qry = " select distinct salerange from WARECODE ";
		qry += " where ACCID=" + htp.getMaccid() + " and length(salerange)>0 and statetag=1 and noused=0 ";
		qry += " and rownum<=20 ";
		Table tb = new Table();

		tb = DbHelperSQL.GetTable(qry);
		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 获取商品波次列表
	protected void GetWarewaveList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "WAVEID";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " asc ";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		String strwhere = " statetag=1 and accid=" + htp.getMaccid();

		if (!findbox.equals(""))
			strwhere += " and (waveNAME like '%" + findbox + "%')";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "WAVEID,WAVENAME,ACCID,BEGINDATE,ENDDATE,STATETAG,LASTOP,LASTDATE";
		fieldlist += ",to_char(BEGINDATE,'yyyy-mm-dd') as begindatestr,to_char(ENDDATE,'yyyy-mm-dd') as enddatestr";
		sort += " " + order;
		Warewave dal = new Warewave();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();

		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取指定商品波次id信息
	protected void GetWarewaveByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long waveid = jsonObject.has("waveid") ? Long.parseLong(jsonObject.getString("waveid")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "WAVEID,WAVENAME,ACCID,BEGINDATE,ENDDATE,STATETAG,LASTOP,LASTDATE";
		fieldlist += ",to_char(BEGINDATE,'yyyy-mm-dd') as begindatestr,to_char(ENDDATE,'yyyy-mm-dd') as enddatestr";
		String strwhere = "  WAVEID=" + waveid + " and accid=" + htp.getMaccid();
		Warewave dal = new Warewave();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 删除指定商品波次id信息
	protected void DelWarewaveByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long waveid = jsonObject.has("waveid") ? Long.parseLong(jsonObject.getString("waveid")) : 0;

		if (htp.getMaccid() == 1000 && htp.getUsername().equals("演示")) {
			WriteResult(response, 0, "这是演示套账，不允许删除波次！");
			return;
		}

		Warewave dal = new Warewave();
		dal.setWaveid(waveid);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Delete(), dal.getErrmess());

	}

	// 更新指定商品波次id信息
	protected void UpdateWarewaveByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long waveid = jsonObject.has("waveid") ?
		// Long.parseLong(jsonObject.getString("waveid")) : 0;

		if (htp.getMaccid() == 1000 && htp.getUsername().equals("演示")) {
			WriteResult(response, 0, "这是演示套账，不允许修改波次！");
			return;
		}
		Warewave dal = new Warewave();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 增加商品波次信息
	protected void AddWarewaveRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long waveid = jsonObject.has("waveid") ?
		// Long.parseLong(jsonObject.getString("waveid")) : 0;

		Warewave dal = new Warewave();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setStatetag(1);
		WriteResult(response, dal.Append(), dal.getErrmess());
	}

	// 保存支付宝微信接口参数
	protected void SavePayparam(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// htp.datajson={"flyang":"20150107","pay_zfb":[{"key1":"zfbvalue1","key2":"zfbvalue2","key3":"zfbvalue3"}],"pay_wx":[{"key1":"wxvalue1","key2":"wxvalue2","key3":"wxvalue3"}]}
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		int zfbok = jsonObject.has("zfbok") ? Integer.parseInt(jsonObject.getString("zfbok")) : -1;
		int wxok = jsonObject.has("wxok") ? Integer.parseInt(jsonObject.getString("wxok")) : -1;
		Uparameter dal = new Uparameter();
		dal.setAccid(accid);
		WriteResult(response, dal.doSavePayparam(jsonObject, zfbok, wxok), dal.getErrmess());

	}

	// 载入支付宝，微信接口参数
	protected void LoadPayparam(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		Uparameter dal = new Uparameter();
		dal.setAccid(accid);
		WriteResultJson(response, 1, dal.doLoadPayparam());
	}

	// 盘点单载入库存
	protected void LoadWarecheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		int change = jsonObject.has("change") ? Integer.parseInt(jsonObject.getString("change")) : 0;
		// change=1,只载入负库存商品
		int loadbj = jsonObject.has("loadbj") ? Integer.parseInt(jsonObject.getString("loadbj")) : 0;
		// loadbj:0清空原记录 1追加新记录
		int qxbj = htp.getQxbj();
		Warecheckh dal = new Warecheckh();
		dal.setUserid(htp.getUserid());
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Load(jsonObject, loadbj, change, qxbj), dal.getErrmess());

	}

	// 客户盘点单载入库存
	protected void LoadCustcheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		int change = jsonObject.has("change") ? Integer.parseInt(jsonObject.getString("change")) : 0;
		// change=1,只载入负库存商品
		int loadbj = jsonObject.has("loadbj") ? Integer.parseInt(jsonObject.getString("loadbj")) : 0;
		// loadbj:0清空原记录 1追加新记录
		int qxbj = htp.getQxbj();
		Custcheckh dal = new Custcheckh();
		dal.setUserid(htp.getUserid());
		dal.setAccid(htp.getMaccid());
		// dal.setCustid(custid));
		dal.setNoteno(noteno);
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Load(jsonObject, loadbj, change, qxbj), dal.getErrmess());

	}

	// 计算盘点单账面数
	protected void CalcWarecheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int calc = jsonObject.has("calc") ? Integer.parseInt(jsonObject.getString("calc")) : 0;
		// calc：0:实盘数不变，1:实盘数=账面数 2=实盘数清零
		Warecheckh dal = new Warecheckh();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Calc(calc), dal.getErrmess());
	}

	// 计算客户盘点单账面数
	protected void CalcCustcheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int calc = jsonObject.has("calc") ? Integer.parseInt(jsonObject.getString("calc")) : 0;
		// calc：0:实盘数不变，1:实盘数=账面数 2=实盘数清零
		Custcheckh dal = new Custcheckh();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Calc(calc), dal.getErrmess());
	}

	// 实时盘点
	protected void ActualWarecheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		Warecheckh dal = new Warecheckh();
		dal.setAccid(htp.getMaccid());
		dal.setHouseid(houseid);
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.doActualWarecheck(wareid, jsonObject.getJSONArray("rows")), dal.getErrmess());

	}

	// 增加支付宝，微信交易记录
	protected void AddDealrecord(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long vipid = jsonObject.has("vipid") ?
		// Long.parseLong(jsonObject.getString("vipid")) : 0;

		Dealrecord dal = new Dealrecord();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 更改支付宝，微信交易记录
	protected void UpdateDealrecord(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long vipid = jsonObject.has("vipid") ? Long.parseLong(jsonObject.getString("vipid")) : 0;

		Dealrecord dal = new Dealrecord();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Update(vipid), dal.getErrmess());
	}

	// 获取支付记录状态
	protected void GetDealrecordbyno(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		long vipid = jsonObject.has("vipid") ? Long.parseLong(jsonObject.getString("vipid")) : 0;
		int payfs = jsonObject.has("payfs") ? Integer.parseInt(jsonObject.getString("payfs")) : -1;
		// payfs:0=支付宝，1=微信,2=拉卡拉，3=盛付通
		int ywtag = jsonObject.has("ywtag") ? Integer.parseInt(jsonObject.getString("ywtag")) : 0;
		// if (noteno == "") {
		// WriteResult(response, 0, "单据号无效！");
		// return;
		// }

		// ywtag:0=店铺零售，1=商场零售，2=线上,3=批发销售
		Dealrecord dal = new Dealrecord();
		dal.setPayfs(payfs);
		dal.setYwtag(ywtag);
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		if (dal.doGetDealrecordbyno(vipid) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
		// Write(response,dal.doGetDealrecordbyno(vipid));
	}

	// 分页显示交易记录
	protected void ListDealrecord(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : " notedate ";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : " desc ";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;

		String accname = jsonObject.has("accname") ? jsonObject.getString("accname") : "";
		String ywnoteno = jsonObject.has("ywnoteno") ? jsonObject.getString("ywnoteno") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String payaccno = jsonObject.has("payaccno") ? jsonObject.getString("payaccno") : "";
		String payidstr = jsonObject.has("payidstr") ? jsonObject.getString("payidstr") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : htp.getNowdate();
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : mindate;
		int ywtag = jsonObject.has("ywtag") ? Integer.parseInt(jsonObject.getString("ywtag")) : 9;
		// ywtag:0=店铺零售，1=商场零售，2=线上,3=批发销售,9=所有
		int payfs = jsonObject.has("payfs") ? Integer.parseInt(jsonObject.getString("payfs")) : 9;
		// payfs:0=支付宝，1=微信，2=拉卡拉，3=盛付通,9=所有
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 3;
		// statetag:0=待付，1=已付，2=取消,3=所有

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.id,a.noteno,a.notedate,a.ywnoteno,a.curr,b.accname,b.company,a.remark";
		fieldlist += ",case ywtag when 0 then '店铺零售' when 1 then '商场零售' when 2 then '订单' when 3 then '批发销售' else '******'  end as notename";
		fieldlist += ",case ywtag when 0 then 'XX' when 1 then 'XC' when 3 then 'XS' else '**' end as notetype";
		fieldlist += ",case payfs when 0 then '支付宝' when 1 then '微信' when 2 then '拉卡拉' else '******'  end as payfsname";
		sort += " " + order + ",id ";

		String strwhere = " a.notedate>=to_date('" + mindate + "','yyyy-mm-dd') and a.notedate<=to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";
		if (statetag < 3)
			strwhere += " and a.statetag=" + statetag;
		if (payfs < 9)
			strwhere += " and a.payfs=" + payfs;
		if (ywtag < 9)
			strwhere += " and a.ywtag=" + ywtag;
		if (!payaccno.equals(""))
			strwhere += " and a.payaccno like '%" + payaccno + "%'";

		if (!payidstr.equals(""))
			strwhere += " and a.payidstr like '%" + payidstr + "%'";

		if (!ywnoteno.equals(""))
			strwhere += " and a.ywnoteno like '%" + ywnoteno + "%'";

		if (!noteno.equals(""))
			strwhere += " and a.noteno like '%" + noteno + "%'";

		if (!remark.equals(""))
			strwhere += " and a.remark like '%" + remark + "%'";

		if (accid == 0) {
			if (!accname.equals(""))
				strwhere += " and b.accname like '%" + accname + "%'";
		} else {
			strwhere += " and a.accid=" + accid;
		}

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Dealrecord dal = new Dealrecord();

		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 分页显示操作日志
	protected void ListLogrecord(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		String accname = jsonObject.has("accname") ? jsonObject.getString("accname") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : htp.getNowdate();
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : mindate;
		String lastop = jsonObject.has("lastop") ? jsonObject.getString("lastop") : "";
		String progname = jsonObject.has("progname") ? jsonObject.getString("progname") : "";
		String fieldlist = "a.id,a.progname,a.remark,b.accname,a.lastdate,a.lastop";
		String strwhere = " a.lastdate>=to_date('" + mindate + "','yyyy-mm-dd') and a.lastdate<=to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (!findbox.equals(""))
			strwhere += " and a.remark like '%" + findbox + "%'";

		if (!remark.equals(""))
			strwhere += " and a.remark like '%" + remark + "%'";
		if (!lastop.equals(""))
			strwhere += " and a.lastop like '%" + lastop + "%'";
		if (!progname.equals(""))
			strwhere += " and a.progname like '%" + progname + "%'";
		if (accid == 0) {
			if (!accname.equals(""))
				strwhere += " and b.accname like '%" + accname + "%'";
		} else {
			strwhere += " and a.accid=" + accid;
		}

		String sort = " lastdate desc,id ";
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Logrecord dal = new Logrecord();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 传送指定单据的商品条码到后台打印
	protected void SendNotebartoBackprint(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long progid = jsonObject.has("progid") ? Long.parseLong(jsonObject.getString("progid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Backprint dal = new Backprint();
		dal.setNoteno(noteno);
		dal.setProgid(progid);
		dal.setLastop(htp.getUsername());
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());

		WriteResult(response, dal.SendBartoBack(), dal.getErrmess());
	}

	// 查询销售历史
	protected void ListSaleHistory(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		// String findbox = jsonObject.has("findbox") ?
		// jsonObject.getString("findbox").trim().replace("'", "''") : "";
		// String strwhere = " a.accid=" + htp.getMaccid() + " and a.custid=" +
		// custid + " and b.wareid=" + wareid;
		// String fieldlist = jsonObject.has("fieldlist") ?
		// jsonObject.getString("fieldlist") : "*";
		String sort = "notedate desc,id";
		String qry = " select a.notedate,a.noteno,a.operant,a.ntid,b.colorid,c.colorname,a.remark";
		qry += " ,sum(b.amount) as amount,sum(b.curr) as curr,sum(b.amount*b.price0) as curr0,min(b.id) as id,max(b.remark0) as remark0";
		qry += ",case sum(b.amount) when 0 then 0 else round(sum(b.curr)/sum(b.amount),2) end as price";
		// qry += ",sum(b.amount*b.price0)/sum(b.amount) as price0";
		// qry += ",round(sum(b.curr)/sum(b.amount*b.price0),2) as discount";
		qry += " ,case sum(b.amount) when 0 then 0 else round(sum(b.amount*b.price0)/sum(b.amount),2) end as price0";
		qry += " ,case sum(b.amount*b.price0) when 0 then 0 else round(sum(b.curr)/sum(b.amount*b.price0),2) end as discount";
		qry += "\n from wareouth a join wareoutm b on a.accid=b.accid and a.noteno=b.noteno";
		qry += "\n join colorcode c on b.colorid=c.colorid";
		qry += "\n where a.accid=" + htp.getMaccid() + " and b.wareid=" + wareid;
		if (houseid > 0)
			qry += " and a.houseid=" + houseid;
		if (custid > 0)
			qry += " and a.custid=" + custid;
		qry += " and a.ntid=1 and a.statetag=1";
		qry += "\n group by a.notedate,a.noteno,a.operant,a.ntid,b.colorid,c.colorname,a.remark";

		qry += "\n union all";
		qry += "\n select a.notedate,a.noteno,a.operant,a.ntid,b.colorid,c.colorname,a.remark";
		qry += " ,-sum(b.amount) as amount,-sum(b.curr) as curr,-sum(b.amount*b.price0) as curr0,min(b.id) as id,max(b.remark0) as remark0";
		qry += ",case sum(b.amount) when 0 then 0 else round(sum(b.curr)/sum(b.amount),2) end as price";
		// qry += ",sum(b.amount*b.price0)/sum(b.amount) as price0";
		// qry += ",round(sum(b.curr)/sum(b.amount*b.price0),2) as discount";
		qry += " ,case sum(b.amount) when 0 then 0 else round(sum(b.amount*b.price0)/sum(b.amount),2) end as price0";
		qry += " ,case sum(b.amount*b.price0) when 0 then 0 else round(sum(b.curr)/sum(b.amount*b.price0),2) end as discount";

		qry += "\n from wareouth a join wareoutm b on a.accid=b.accid and a.noteno=b.noteno";
		qry += "\n join colorcode c on b.colorid=c.colorid";
		qry += "\n where a.accid=" + htp.getMaccid() + " and b.wareid=" + wareid;
		qry += " and a.ntid=2 and a.statetag=1";
		if (houseid > 0)
			qry += " and a.houseid=" + houseid;
		if (custid > 0)
			qry += " and a.custid=" + custid;
		qry += "\n group by a.notedate,a.noteno,a.operant,a.ntid,b.colorid,c.colorname,a.remark";
		// System.out.println(qry);

		QueryParam qp = new QueryParam();
		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		qp.setQueryString(qry);
		qp.setSortString(sort);

		Table tb = new Table();
		Wareouth dal = new Wareouth();
		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 查询采购历史
	protected void ListBuyHistory(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = "notedate desc,id";
		String qry = " select a.notedate,a.noteno,a.operant,a.ntid,b.colorid,c.colorname,a.remark";
		qry += " ,sum(b.amount) as amount,sum(b.curr) as curr,sum(b.amount*b.price0) as curr0,min(b.id) as id";
		qry += ",case sum(b.amount) when 0 then 0 else round(sum(b.curr)/sum(b.amount),2) end as price";
		// qry += ",sum(b.amount*b.price0)/sum(b.amount) as price0";
		// qry += ",round(sum(b.curr)/sum(b.amount*b.price0),2) as discount";
		qry += " ,case sum(b.amount) when 0 then 0 else round(sum(b.amount*b.price0)/sum(b.amount),2) end as price0";
		qry += " ,case sum(b.amount*b.price0) when 0 then 0 else round(sum(b.curr)/sum(b.amount*b.price0),2) end as discount";
		qry += "\n from wareinh a join wareinm b on a.accid=b.accid and a.noteno=b.noteno";
		qry += "\n join colorcode c on b.colorid=c.colorid";
		qry += "\n where a.accid=" + htp.getMaccid() + "  and b.wareid=" + wareid;
		if (provid > 0)
			qry += " and a.provid=" + provid;
		if (houseid > 0)
			qry += " and a.houseid=" + houseid;
		qry += "\n and a.ntid=0 and a.statetag=1";
		qry += "\n group by a.notedate,a.noteno,a.operant,a.ntid,b.colorid,c.colorname,a.remark";

		qry += "\n union all";
		qry += "\n select a.notedate,a.noteno,a.operant,a.ntid,b.colorid,c.colorname,a.remark";
		qry += " ,-sum(b.amount) as amount,-sum(b.curr) as curr,-sum(b.amount*b.price0) as curr0,min(b.id) as id";
		qry += ",case sum(b.amount) when 0 then 0 else round(sum(b.curr)/sum(b.amount),2) end as price";
		// qry += ",sum(b.amount*b.price0)/sum(b.amount) as price0";
		// qry += ",round(sum(b.curr)/sum(b.amount*b.price0),2) as discount";
		qry += " ,case sum(b.amount) when 0 then 0 else round(sum(b.amount*b.price0)/sum(b.amount),2) end as price0";
		qry += " ,case sum(b.amount*b.price0) when 0 then 0 else round(sum(b.curr)/sum(b.amount*b.price0),2) end as discount";

		qry += "\n from wareinh a join wareinm b on a.accid=b.accid and a.noteno=b.noteno";
		qry += "\n join colorcode c on b.colorid=c.colorid";
		qry += "\n where a.accid=" + htp.getMaccid() + " and b.wareid=" + wareid;
		qry += "\n and a.ntid=1 and a.statetag=1";
		if (provid > 0)
			qry += " and a.provid=" + provid;
		if (houseid > 0)
			qry += " and a.houseid=" + houseid;
		qry += "\n group by a.notedate,a.noteno,a.operant,a.ntid,b.colorid,c.colorname,a.remark";
		// System.out.println(qry);

		QueryParam qp = new QueryParam();
		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		qp.setQueryString(qry);
		qp.setSortString(sort);

		Table tb = new Table();
		Wareouth dal = new Wareouth();
		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 查询调出历史
	protected void ListAllotHistory(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long tohouseid = jsonObject.has("tohouseid") ? Long.parseLong(jsonObject.getString("tohouseid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = "notedate desc,id";
		String qry = " select a.notedate,a.noteno,a.operant,b.colorid,c.colorname,a.remark";
		qry += " ,sum(b.amount) as amount,sum(b.curr) as curr,min(b.id) as id";
		qry += "\n from allotouth a join allotoutm b on a.accid=b.accid and a.noteno=b.noteno";
		qry += "\n join colorcode c on b.colorid=c.colorid";
		qry += "\n where a.accid=" + htp.getMaccid() + " and a.statetag=1  and b.wareid=" + wareid;
		if (houseid > 0)
			qry += "\n and a.houseid=" + houseid + " ";

		if (tohouseid > 0)
			qry += "\n and a.tohouseid=" + tohouseid + " ";
		qry += "\n group by a.notedate,a.noteno,a.operant,b.colorid,c.colorname,a.remark";

		// System.out.println(qry);

		QueryParam qp = new QueryParam();
		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		qp.setQueryString(qry);
		qp.setSortString(sort);

		Table tb = new Table();
		Wareouth dal = new Wareouth();
		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取职员客户授权表
	protected void GetEmployecustList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		Employecust dal = new Employecust();
		dal.setEpid(epid);
		dal.setAccid(htp.getMaccid());
		dal.setFindbox(findbox);

		// QueryParam qp = new QueryParam();
		// qp.setPageIndex(page);
		// qp.setPageSize(pagesize);
		// qp.setSortString("SELBJ DESC,custid");

		QueryParam qp = new QueryParam(page, pagesize, "SELBJ DESC,custid");

		Table tb = new Table();
		tb = dal.GetTable(qp, 0);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取职员已有客户授权表
	protected void GetEmployecustexistsList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		Employecust dal = new Employecust();
		dal.setEpid(epid);
		dal.setAccid(htp.getMaccid());
		QueryParam qp = new QueryParam(page, pagesize, "custid");

		// QueryParam qp = new QueryParam();
		// qp.setPageIndex(page);
		// qp.setPageSize(pagesize);
		// qp.setSortString("custid");
		Table tb = new Table();
		tb = dal.GetTable(qp, 1);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 写职员客户授权记录
	protected void WriteEmployecust(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Employecust dal = new Employecust();
		dal.setEpid(epid);
		dal.setCustid(custid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Append(value), dal.getErrmess());

	}

	// 成批写职员客户授权记录
	protected void WriteAllemployecust(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Employecust dal = new Employecust();
		dal.setEpid(epid);
		// dal.setCustid(custid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.AppendAll(value), dal.getErrmess());
	}

	// 获取职员供应商授权表
	protected void GetEmployeprovList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		Employeprov dal = new Employeprov();
		dal.setEpid(epid);
		dal.setAccid(htp.getMaccid());
		dal.setFindbox(findbox);

		// QueryParam qp = new QueryParam();
		// qp.setPageIndex(page);
		// qp.setPageSize(pagesize);
		// qp.setSortString("SELBJ DESC,provid");

		QueryParam qp = new QueryParam(page, pagesize, "SELBJ DESC,provid");

		Table tb = new Table();
		tb = dal.GetTable(qp, 0);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取职员已有供应商授权表
	protected void GetEmployeprovexistsList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		Employeprov dal = new Employeprov();
		dal.setEpid(epid);
		dal.setAccid(htp.getMaccid());
		// QueryParam qp = new QueryParam();
		//
		// qp.setPageIndex(page);
		// qp.setPageSize(pagesize);
		// qp.setSortString("provid");
		QueryParam qp = new QueryParam(page, pagesize, "provid");

		Table tb = new Table();
		tb = dal.GetTable(qp, 1);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 写职员供应商授权记录
	protected void WriteEmployeprov(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Employeprov dal = new Employeprov();
		dal.setEpid(epid);
		dal.setProvid(provid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Append(value), dal.getErrmess());

	}

	// 成批写职员供应商授权记录
	protected void WriteAllemployeprov(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Employeprov dal = new Employeprov();
		dal.setEpid(epid);
		// dal.setCustid(provid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.AppendAll(value), dal.getErrmess());
	}

	/// 将单据传入后台打印服务
	/// </summary>
	protected void AddBackprint(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Backprint dal = new Backprint();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// long epid = jsonObject.has("epid") ?
		// Long.parseLong(jsonObject.getString("epid")) : 0;
		// if (epid==0) epid=htp.getUserid();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		int ret = dal.Append(htp.getUserid());
		WriteResult(response, ret, dal.getErrmess());
	}

	// 取后台打印服务队列
	protected void GetBackprintlist(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String lastop = jsonObject.has("lastop") ?
		// jsonObject.getString("lastop") : "";
		long prtid = jsonObject.has("prtid") ? Long.parseLong(jsonObject.getString("prtid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = "id,progid,noteno,noteid,prtid,houseid";
		String strwhere = " accid=" + htp.getMaccid() + " and printok=0 ";
		// if (!lastop.equals(""))
		// strwhere += " and lastop='" + lastop + "'";
		// if (prtid == 0) {// 老打印方式
		// strwhere += " and (1=2 ";
		// if (jsonObject.has("houseidlist")) {
		// String houseidlist = jsonObject.getString("houseidlist");
		// if (houseidlist != "")
		// strwhere += houseidlist;
		// }
		// strwhere += " ) ";
		// } else
		strwhere += " and prtid=" + prtid;
		String sort = " id ";
		Backprint dal = new Backprint();

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 设置后台打印服务完成标志
	protected void OverBackprint(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String lastop = jsonObject.has("lastop") ?
		// jsonObject.getString("lastop") : "";
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		Backprint dal = new Backprint();
		dal.setId(id);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// =========================================================
	// 载入指定调拨订单明细记录到调拨出库
	protected void AllotOrderToOut(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";// 调拨出库单号
		String orderno = jsonObject.has("orderno") ? jsonObject.getString("orderno") : "";// 调拨订单号
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0; // 调出店铺id
		// long tohouseid = jsonObject.has("tohouseid") ?
		// Long.parseLong(jsonObject.getString("tohouseid")) : 0; //调入店铺id
		Allotouth dal = new Allotouth();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setOrderno(orderno);
		dal.setHouseid(houseid);
		dal.setCalcdate(htp.getCalcdate());
		// dal.setTohouseid(tohouseid);
		WriteResult(response, dal.doOrdertoOut(), dal.getErrmess());

	}

	// 调拨出库中分页显示当前可以载入的调拨订单列表 .net GetAllotorderhList(1);
	protected void GetAllotorderhNotOver(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String housename = jsonObject.has("housename") ? jsonObject.getString("housename") : "";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.HOUSEID,a.REMARK,a.HANDNO,a.totalamt,a.totalfactamt,a.totalcurr,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,b.HOUSENAME";
		String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (findbox != null && !findbox.equals(""))
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox + "%' or b.housename like '%" + findbox + "%' or b.shortname like '%"
					+ findbox + "%' )";

		strwhere += " and a.STATETAG=1 and a.overbj=0 ";
		// strwhere += " and not exists (select 1 from allotouth a1 where
		// a.accid=a1.accid and a.noteno=a1.orderno and a1.statetag<=1) "; //
		// 已经对应调入单的单据不再显示

		if (houseid > 0)
			strwhere += " and a.HOUSEID = " + houseid;
		else if (!housename.equals(""))
			strwhere += " and (b.housename like '%" + housename + "%' or b.shortname like '%" + housename.toUpperCase() + "%' )";
		// System.out.println("GetAllotorderhNotOver 1 " + strwhere);
		// QueryParam qp = new QueryParam();
		// qp.setPageIndex(page);
		// qp.setPageSize(pagesize);
		// qp.setSortString(sort);
		QueryParam qp = new QueryParam(page, pagesize, sort);

		qp.setSumString("nvl(sum(totalamt),0) as totalamt,nvl(sum(totalfactamt),0) as totalfactamt,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		Allotorderh dal = new Allotorderh();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 分页显示收银台销售单列表
	protected void ListWareoutcash(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long salemanid = jsonObject.has("salemanid") ? Long.parseLong(jsonObject.getString("salemanid")) : 0;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";
		// String nowdatestr = htp.getNowdate();
		int jzbj = jsonObject.has("jzbj") ? Integer.parseInt(jsonObject.getString("jzbj")) : 2;
		// jzbj:0未结，1=已结，2=所有
		int ntid = jsonObject.has("ntid") ? Integer.parseInt(jsonObject.getString("ntid")) : 3;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = " notedate desc,id ";// +order;
		String strwhere = "  a.ACCID=" + htp.getMaccid() + " and a.ntid=" + ntid;
		strwhere += " and a.NOTEDATE >= to_date('" + htp.getAccdate() + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		// jzbj:0未结，1=已结，2=所有
		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";
		if (ntid == 0) {// 零售
			String vipno = jsonObject.has("vipno") ? jsonObject.getString("vipno").replace("'", "''") : "";
			String guestname = jsonObject.has("guestname") ? jsonObject.getString("guestname").replace("'", "''") : "";
			if (vipno.length() > 0)
				strwhere += " and b.vipno like '%" + vipno + "%'";
			if (guestname.length() > 0)
				strwhere += " and b.guestname like '%" + guestname + "%'";
		}
		if (jzbj == 0)
			strwhere += "  and a.statetag=3 ";
		else if (jzbj == 1)
			strwhere += "  and a.statetag=1 and  a.notedate>=to_date(to_char(sysdate,'yyyy-mm-dd')||' 00:00:00','yyyy-mm-dd hh24:mi:ss') ";
		else
			strwhere += "  and (a.statetag=3 or a.statetag=1 and  a.notedate>=to_date(to_char(sysdate,'yyyy-mm-dd')||' 00:00:00','yyyy-mm-dd hh24:mi:ss') )";
		// 只显示授权店铺的单据
		strwhere += " and exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + ")";
		if (salemanid > 0)
			strwhere += " and exists (select 1 from waresaleman x1 where a.accid=x1.accid and a.noteno=x1.noteno and x1.EPID=" + salemanid + ")";
		if (houseid > 0) // 是批发或退货
			strwhere += " and a.houseid=" + houseid;

		if (ntid > 0 && custid > 0) // 是批发或退货
			strwhere += " and a.custid=" + custid;

		if (findbox.length() > 0) {
			if (ntid == 0) {
				strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" //
						+ findbox + "%' or b.guestname like '%" + findbox + "%' or c.housename like '%" + findbox + "%')";
			} else {
				strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" //
						+ findbox + "%' or b.custname like '%" + findbox + "%' or c.housename like '%" + findbox + "%')";
			}
		}
		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamt,nvl(sum(totalcurr),0) as totalcurr");
		Wareouth dal = new Wareouth();
		Table tb = new Table();
		if (ntid == 0) // 零售
		{
			if (fieldlist.length() <= 0 || fieldlist.equals("*"))
				fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.GUESTID,a.HOUSEID,a.NTID,a.HANDNO,a.REMARK,a.OPERANT,a.CHECKMAN,a.CASHIER,a.STATETAG,a.LASTDATE,B.GUESTNAME,a.TOTALAMT,a.TOTALCURR,d.DISCOUNT";
			tb = dal.GetTable0(qp, strwhere, fieldlist);
		} else // 批发出库
		{
			if (fieldlist.length() <= 0 || fieldlist.equals("*"))
				fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.CUSTID,a.HOUSEID,a.NTID,a.HANDNO,a.REMARK,a.OPERANT,a.CHECKMAN,a.CASHIER,a.STATETAG,a.LASTDATE,B.CUSTNAME,B.DISCOUNT,B.PRICETYPE,C.HOUSENAME,a.TOTALAMT,a.TOTALCURR";
			tb = dal.GetTable1(qp, strwhere, fieldlist);
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 取采购单结算信息
	protected void GetWareincheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		if (htp.getHousezkbj() == 0) // 0= 不分销售帐款分店铺核对
			houseid = 0;
		Wareinh dal = new Wareinh();
		dal.setAccid(htp.getMaccid());
		dal.setHouseid(houseid);
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());
		if (dal.doGetcheck() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 取采购入库单付款记录及余额
	protected void GetWareinpaye(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		if (htp.getHousezkbj() == 0) // 0= 不分销售帐款分店铺核对
			houseid = 0;
		Wareinh dal = new Wareinh();
		dal.setAccid(htp.getMaccid());
		dal.setHouseid(houseid);
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());
		if (dal.doGetpaye() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 分页显示当前可以载入的客户订单列表 (配货调用)
	protected void GetCustorderhNotPei(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String custname = jsonObject.has("custname") ? jsonObject.getString("custname").replace("'", "''") : "";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.CUSTID,a.REMARK,a.HANDNO,a.totalamt,a.totalpeiamt,a.totalcurr,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,b.CustNAME";
		String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (findbox != null && !findbox.equals(""))
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox + "%' or b.custname like '%" + findbox + "%' or b.shortname like '%"
					+ findbox + "%' )";

		strwhere += " and a.STATETAG=1 and a.overbj=0 and a.totalamt-a.totalpeiamt>0 ";
		// strwhere += " and not exists (select 1 from allotouth a1 where
		// a.accid=a1.accid and a.noteno=a1.orderno and a1.statetag<=1) "; //
		// 已经对应调入单的单据不再显示

		if (custid > 0)
			strwhere += " and a.custid = " + custid;
		else if (!custname.equals(""))
			strwhere += " and (b.custename like '%" + custname + "%' or b.shortname like '%" + custname.toUpperCase() + "%' )";
		// System.out.println("GetAllotorderhNotOver 1 " + strwhere);
		// QueryParam qp = new QueryParam();
		// qp.setPageIndex(page);
		// qp.setPageSize(pagesize);
		// qp.setSortString(sort);
		// System.out.println(strwhere);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamt,nvl(sum(totalpeiamt),0) as totalpeiamt,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		Custorderh dal = new Custorderh();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 分页显示当前可以载入的客户订单列表 (批发出库调用) .net GetCustorderhList(1);
	protected void GetCustorderhNotOver(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String nowdatestr = htp.getNowdate();
		// String mindate = jsonObject.has("mindate") ?
		// jsonObject.getString("mindate") : nowdatestr;
		// String maxdate = jsonObject.has("maxdate") ?
		// jsonObject.getString("maxdate") : nowdatestr;

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String custname = jsonObject.has("custname") ? jsonObject.getString("custname").replace("'", "''") : "";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.CUSTID,a.REMARK,a.HANDNO,a.totalamt,a.totalfactamt,a.totalcurr,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,b.CustNAME";
		String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (findbox != null && !findbox.equals(""))
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox + "%' or b.custname like '%" + findbox + "%' or b.shortname like '%"
					+ findbox + "%' )";

		strwhere += " and a.STATETAG=1 and a.overbj=0 ";
		// strwhere += " and not exists (select 1 from allotouth a1 where
		// a.accid=a1.accid and a.noteno=a1.orderno and a1.statetag<=1) "; //
		// 已经对应调入单的单据不再显示

		if (custid > 0)
			strwhere += " and a.custid = " + custid;
		else if (!custname.equals(""))
			strwhere += " and (b.custename like '%" + custname + "%' or b.shortname like '%" + custname.toUpperCase() + "%' )";
		// System.out.println("GetAllotorderhNotOver 1 " + strwhere);
		// QueryParam qp = new QueryParam();
		// qp.setPageIndex(page);
		// qp.setPageSize(pagesize);
		// qp.setSortString(sort);
		// System.out.println(strwhere);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamt,nvl(sum(totalfactamt),0) as totalfactamt,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		Custorderh dal = new Custorderh();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 更改商场销售商品的赠送状态
	protected void ChangeShopsalemzp(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		long guestid = jsonObject.has("guestid") ? Long.parseLong(jsonObject.getString("guestid")) : 0;
		Float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		int iszp = jsonObject.has("iszp") ? Integer.parseInt(jsonObject.getString("iszp")) : 0;
		int priceprec = htp.getPriceprec();
		Shopsalem dal = new Shopsalem();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setIszp(iszp);
		dal.setId(id);
		if (dal.ChangeZp(guestid, priceprec) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 成批更改商场销售出库折扣
	protected void ChangeShopsalemdisc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		long guestid = jsonObject.has("guestid") ? Long.parseLong(jsonObject.getString("guestid")) : 0;
		Float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 1;
		int priceprec = htp.getPriceprec();
		int vippricetype = htp.getVipPricetype();//24位：会员价方式:会员价方式:0=零售价，1=售价1，2=售价2，3=售价3
		Shopsalem dal = new Shopsalem();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setDiscount(discount);
		WriteResult(response, dal.ChangeDisc(guestid, priceprec, vippricetype), dal.getErrmess());

	}

	// 成批更改采购订单折扣
	protected void ChangeProvordermdisc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 1;
		Long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		int priceprec = htp.getPriceprec();
		Provorderm dal = new Provorderm();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setDiscount(discount);
		WriteResult(response, dal.ChangeDisc(provid, priceprec), dal.getErrmess());

	}

	// 成批更改采购入库折扣
	protected void ChangeWareinmdisc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 1;
		Long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		int priceprec = htp.getPriceprec();
		Wareinm dal = new Wareinm();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setDiscount(discount);
		WriteResult(response, dal.ChangeDisc(provid, priceprec), dal.getErrmess());

	}

	// 取零售商品售价
	protected void GetSaleoutprice(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();
		int vippricetype = htp.getVipPricetype();//24位：会员价方式:会员价方式:0=零售价，1=售价1，2=售价2，3=售价3
		Wareoutm dal = new Wareoutm();
		dal.setAccid(htp.getMaccid());
		if (dal.doGetSaleoutprice(jsonObject, priceprec, vippricetype) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 取指定客户商品的销售类型
	protected void GetWareoutmsaleid(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		Wareoutm dal = new Wareoutm();
		dal.setAccid(htp.getMaccid());
		if (dal.doGetWareoutmsaleid(jsonObject) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 取最近售价 未用
	protected void GetWareoutnearsale(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();
		int nearsaleok = htp.getNearsale();
		if (nearsaleok == 0) {
			WriteResult(response, 0, "未启用最近售价！");
			return;
		}
		Wareoutm dal = new Wareoutm();
		dal.setAccid(htp.getMaccid());
		if (dal.doGetWareoutnearsale(jsonObject, priceprec, nearsaleok) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 取批发商品售价
	protected void GetWareoutprice(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();
		int nearsaleok = htp.getNearsale();

		Wareoutm dal = new Wareoutm();
		dal.setAccid(htp.getMaccid());
		if (dal.doGetWareoutprice(jsonObject, priceprec, nearsaleok) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 0, dal.getErrmess());
	}

	// 成批更改客户退货申请单折扣
	protected void ChangeRefundaskmdisc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 1;
		Long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		int priceprec = htp.getPriceprec();
		Refundoutm dal = new Refundoutm();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setDiscount(discount);
		WriteResult(response, dal.ChangeDisc(custid, priceprec), dal.getErrmess());

	}

	// 成批更改销售出库折扣
	protected void ChangeWareoutmdisc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 1;
		Long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		int priceprec = htp.getPriceprec();
		Wareoutm dal = new Wareoutm();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setDiscount(discount);
		WriteResult(response, dal.ChangeDisc(custid, priceprec), dal.getErrmess());
	}

	// 成批更改客户订单折扣
	protected void ChangeCustordermdisc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 0;
		Long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		int priceprec = htp.getPriceprec();
		Custorderm dal = new Custorderm();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setDiscount(discount);
		WriteResult(response, dal.ChangeDisc(custid, priceprec), dal.getErrmess());

	}

	// 成批更改客户销售折扣
	protected void ChangeCustsalemdisc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 0;
		Long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		int priceprec = htp.getPriceprec();
		Custsalem dal = new Custsalem();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setDiscount(discount);
		WriteResult(response, dal.ChangeDisc(custid, priceprec), dal.getErrmess());

	}

	// 分页显示当前可以载入的采购订单列表 (采购入库调用) .net GetCustorderhList(1);
	protected void GetProvorderhNotOver(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String nowdatestr = htp.getNowdate();
		// String mindate = jsonObject.has("mindate") ?
		// jsonObject.getString("mindate") : nowdatestr;
		// String maxdate = jsonObject.has("maxdate") ?
		// jsonObject.getString("maxdate") : nowdatestr;

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String provname = jsonObject.has("provname") ? jsonObject.getString("provname").replace("'", "''") : "";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.PROVID,a.REMARK,a.HANDNO,a.totalamt,a.totalfactamt,a.totalcurr,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,b.PROVNAME";
		String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (findbox != null && !findbox.equals(""))
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox + "%' or b.provname like '%" + findbox + "%' or b.shortname like '%"
					+ findbox + "%' )";

		strwhere += " and a.STATETAG=1 and a.overbj=0 ";
		// strwhere += " and not exists (select 1 from allotouth a1 where
		// a.accid=a1.accid and a.noteno=a1.orderno and a1.statetag<=1) "; //
		// 已经对应调入单的单据不再显示

		if (provid > 0)
			strwhere += " and a.provid = " + provid;
		else if (!provname.equals(""))
			strwhere += " and (b.provname like '%" + provname + "%' or b.shortname like '%" + provname.toUpperCase() + "%' )";
		// System.out.println("GetAllotorderhNotOver 1 " + strwhere);
		// QueryParam qp = new QueryParam();
		// qp.setPageIndex(page);
		// qp.setPageSize(pagesize);
		// qp.setSortString(sort);
		QueryParam qp = new QueryParam(page, pagesize, sort);

		qp.setSumString("nvl(sum(totalamt),0) as totalamt,nvl(sum(totalfactamt),0) as totalfactamt,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		Provorderh dal = new Provorderh();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 调拨出库单撤单
	protected void AllotouthCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";

		int changedatebj = htp.getChangedatebj();

		Allotouth dal = new Allotouth();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 调拨入库单撤单
	protected void AllotinhCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = htp.getChangedatebj();

		Allotinh dal = new Allotinh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 临时盘点撤单
	protected void TempcheckhCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";

		int changedatebj = htp.getChangedatebj();

		Tempcheckh dal = new Tempcheckh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 商品盘点撤单
	protected void WarecheckhCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";

		int changedatebj = htp.getChangedatebj();

		Warecheckh dal = new Warecheckh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 客户盘点撤单
	protected void CustcheckhCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";

		int changedatebj = htp.getChangedatebj();

		Custcheckh dal = new Custcheckh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 商品配货单撤单
	protected void WarepeihCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";

		int changedatebj = htp.getChangedatebj();// 1=允许更改单据日期

		Warepeih dal = new Warepeih();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 期初入库撤单
	protected void FirsthousehCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = 0;// htp.getChangedatebj();// 1=允许更改单据日期

		Firsthouseh dal = new Firsthouseh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 客户销售撤单
	protected void CustsalehCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = 0;// htp.getChangedatebj();// 1=允许更改单据日期

		Custsaleh dal = new Custsaleh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 期初客户入库撤单
	protected void FirstcusthCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = 0;// htp.getChangedatebj();// 1=允许更改单据日期

		Firstcusth dal = new Firstcusth();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 调价单撤单
	protected void WareadjusthCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = htp.getChangedatebj();
		// System.out.println("aaaa1 " + qxpublic.substring(0));

		Wareadjusth dal = new Wareadjusth();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 调拨订单撤单
	protected void AllotorderhCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = htp.getChangedatebj();
		// System.out.println("aaaa1 " + qxpublic.substring(0));

		Allotorderh dal = new Allotorderh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 采购订单撤单
	protected void ProvorderhCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";

		int changedatebj = htp.getChangedatebj();

		Provorderh dal = new Provorderh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 销售收款撤单
	protected void IncomecurrCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = htp.getChangedatebj();

		Incomecurr dal = new Incomecurr();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 客户缴款撤单
	protected void CustcurrCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = htp.getChangedatebj();

		Custcurr dal = new Custcurr();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 采购付款撤单
	protected void PaycurrCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = htp.getChangedatebj();
		Paycurr dal = new Paycurr();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 期初应收款撤单
	protected void FirstIncomecurrCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = htp.getChangedatebj();
		Firstincomecurr dal = new Firstincomecurr();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 应收款勾单
	protected void IncomecurrCheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String pnoteno = jsonObject.has("pnoteno") ? jsonObject.getString("pnoteno") : "";// 收款单号
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";// 销售单号
		Float curr = jsonObject.has("curr") ? Float.parseFloat(jsonObject.getString("curr")) : 0;
		// opid=1时，传入 销售单勾单余额；opid=0时，传入本单勾单金额
		int fs = jsonObject.has("fs") ? Integer.parseInt(jsonObject.getString("fs")) : 0;
		// Incomelink-> fs:0销售收款勾销售单1销售收款勾退货单2销售退款勾退货单
		int opid = jsonObject.has("opid") ? Integer.parseInt(jsonObject.getString("opid")) : 0;
		// opid:1=勾单，0=取消勾单
		Incomelink dal = new Incomelink();
		dal.setAccid(htp.getMaccid());
		dal.setPnoteno(pnoteno);
		dal.setNoteno(noteno);
		// incomelink-> notetype:0销售(退库) 1物料销售（
		dal.setNotetype(0);// 单据类型
		dal.setCurr(curr);
		dal.setLastop(htp.getUsername());
		dal.setFs(fs);
		if (dal.doCheck(opid) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResult(response, 1, dal.getErrmess());
	}

	// 应付款勾单
	protected void PaycurrCheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String pnoteno = jsonObject.has("pnoteno") ? jsonObject.getString("pnoteno") : "";// 收款单号
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";// 销售单号
		Float curr = jsonObject.has("curr") ? Float.parseFloat(jsonObject.getString("curr")) : 0;// 销售单勾单余额
		int fs = jsonObject.has("fs") ? Integer.parseInt(jsonObject.getString("fs")) : 0;
		// currlink-> fs:0采购付款勾采购单1采购付款勾退货单2采购退款勾退货单
		int opid = jsonObject.has("opid") ? Integer.parseInt(jsonObject.getString("opid")) : 0;
		// opid:1=勾单，0=取消勾单
		Paylink dal = new Paylink();
		dal.setAccid(htp.getMaccid());
		dal.setPnoteno(pnoteno);
		dal.setNoteno(noteno);
		// paylink-> notetype:0采购(退货) 1物料采购(退货)
		dal.setNotetype(0);// 单据类型
		dal.setCurr(curr);
		dal.setLastop(htp.getUsername());
		dal.setFs(fs);
		if (dal.doCheck(opid) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResult(response, 1, dal.getErrmess());
	}

	// 分页显示销售单收款记录
	protected void WareoutIncomecurrList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Wareouth dal = new Wareouth();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		String sort = "notedate desc,noteno";
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		tb = dal.GetTableLink(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 分页显示配货单收款记录
	protected void WarepeiIncomecurrList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Warepeih dal = new Warepeih();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		String sort = "notedate desc,noteno";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();
		tb = dal.GetTable(qp);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 分页显示采购单付款记录
	protected void WareinPaycurrList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Wareinh dal = new Wareinh();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		String sort = "notedate desc,noteno";
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		tb = dal.GetTableLink(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 分页显示应收款勾兑记录
	protected void IncomecurrLink(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String pnoteno = jsonObject.has("pnoteno") ? jsonObject.getString("pnoteno") : "";
		// String notedate = jsonObject.has("notedate") ?
		// jsonObject.getString("notedate") : "";
		String sort = " notedate desc,noteno";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		if (htp.getHousezkbj() == 0)
			houseid = 0;
		Incomelink dal = new Incomelink();
		dal.setAccid(htp.getMaccid());
		dal.setHouseid(houseid);
		dal.setCustid(custid);
		dal.setLastop(htp.getUsername());
		dal.setPnoteno(pnoteno);
		dal.setAccbegindate(htp.getAccdate());
		// if (notedate.length() <= 0)
		// notedate = htp.getNowdate();
		// dal.setNotedate(notedate);

		Table tb = new Table();
		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 分页显示应付款勾兑记录
	protected void PaycurrLink(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		String pnoteno = jsonObject.has("pnoteno") ? jsonObject.getString("pnoteno") : "";
		// String notedate = jsonObject.has("notedate") ?
		// jsonObject.getString("notedate") : "";
		String sort = " notedate";
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Paylink dal = new Paylink();
		dal.setAccid(htp.getMaccid());
		dal.setProvid(provid);
		dal.setLastop(htp.getUsername());
		dal.setPnoteno(pnoteno);
		dal.setAccbegindate(htp.getAccdate());
		// if (notedate.length() <= 0)
		// notedate = htp.getNowdate();
		// dal.setNotedate(notedate);

		Table tb = new Table();
		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 期初应付款撤单
	protected void FirstPaycurrCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = htp.getChangedatebj();

		Firstpaycurr dal = new Firstpaycurr();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 销售费用撤单
	protected void IncomecostCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = htp.getChangedatebj();

		Incomecost dal = new Incomecost();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 采购费用撤单
	protected void PaycostCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = htp.getChangedatebj();

		Paycost dal = new Paycost();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 店铺费用撤单
	protected void HousecostCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = htp.getChangedatebj();
		Housecost dal = new Housecost();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 商场开票撤单
	protected void ShopsalehCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = htp.getChangedatebj();

		Shopsaleh dal = new Shopsaleh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 采购入库,退库撤单
	protected void WareinhCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = htp.getChangedatebj();
		Wareinh dal = new Wareinh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 零售出库，批发出库，批发退货撤单
	protected void WareouthCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = htp.getChangedatebj();
		Wareouth dal = new Wareouth();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 获取指定客户订单记录id信息
	protected void GetCustorderhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";// 调拨出库单号
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";// 调拨出库单号
		String strwhere = " a.NOTENO='" + noteno + "' and a.ACCID=" + htp.getMaccid();
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.CUSTID,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,b.CUSTNAME";
		Table tb = new Table();
		Custorderh dal = new Custorderh();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取指定客户订单记录id信息
	protected void GetProvorderhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";// 调拨出库单号
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";// 调拨出库单号
		String strwhere = " a.NOTENO='" + noteno + "' and a.ACCID=" + htp.getMaccid();
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.PROVID,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,b.PROVNAME";
		// fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" +
		// htp.getCalcdate() + "' then '1' else '0' end as istoday";
		Table tb = new Table();
		Provorderh dal = new Provorderh();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 载入指定客户订单明细记录到配货单 客户订单->配货单
	protected void CustOrderToPei(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";// 配货单号
		String orderno = jsonObject.has("orderno") ? jsonObject.getString("orderno") : "";// 客户订单号
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0; // 调出店铺id
		// long tohouseid = jsonObject.has("tohouseid") ?
		// Long.parseLong(jsonObject.getString("tohouseid")) : 0; //调入店铺id
		Warepeih dal = new Warepeih();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setOrderno(orderno);
		dal.setHouseid(houseid);
		dal.setCalcdate(htp.getCalcdate());
		// dal.setTohouseid(tohouseid);
		WriteResult(response, dal.doOrdertoPei(), dal.getErrmess());

	}

	// 载入指定客户订单明细记录到批发出库
	protected void CustOrderToOut(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";// 出库单号
		String orderno = jsonObject.has("orderno") ? jsonObject.getString("orderno") : "";// 客户订单号
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0; // 调出店铺id
		// long tohouseid = jsonObject.has("tohouseid") ?
		// Long.parseLong(jsonObject.getString("tohouseid")) : 0; //调入店铺id
		Wareouth dal = new Wareouth();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setOrderno(orderno);
		dal.setHouseid(houseid);
		dal.setCalcdate(htp.getCalcdate());
		// dal.setTohouseid(tohouseid);
		WriteResult(response, dal.doOrdertoOut(), dal.getErrmess());

	}

	/// 载入所有经销商的采购订单(我的买家订单) 采购订单转客户订单
	/// 载入我的经销商的采购订单（转为当前的客户订单）
	protected void LoadBuyerOrder(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long accid = jsonObject.has("accid") ?
		// Long.parseLong(jsonObject.getString("accid")) : 0; // 调出店铺id

		int nearsale = htp.getNearsale();
		int priceprec = htp.getPriceprec();
		Custorderh dal = new Custorderh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		WriteResult(response, dal.doLoadBuyerOrder(priceprec, nearsale), dal.getErrmess());

	}

	// 经销商采购退货列表
	protected void BuyerWareretinhlist(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		String qry = "select a.id,a.accid,a.noteno,a.notedate,a.totalamt,a.totalcurr,c.custid,c.custname ";
		qry += " from wareinh a ";
		qry += " join accconnect b on a.accid=b.buyaccid and a.provid=b.buyprovid ";
		qry += " join customer c on b.sellcustid=c.custid";

		qry += " where a.bj=0 and a.statetag=1 and a.ntid=1 and b.sellaccid=" + htp.getMaccid();
		qry += " and a.notedate>b.firstdate";
		String sort = " notedate,noteno,id";
		Wareinh dal = new Wareinh();
		QueryParam qp = new QueryParam(page, pagesize, sort, qry);
		Table tb = new Table();
		tb = dal.GetTable(qp);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 载入我的供应商发货单,生成采购入库单
	protected void LoadSellerWareout(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		long sellaccid = jsonObject.has("sellaccid") ? Long.parseLong(jsonObject.getString("sellaccid")) : 0;
		long accid = htp.getMaccid();
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";// 调拨出库单号
		if (noteno.equals("")) {
			WriteResult(response, 0, "单据号无效！");
			return;
		}
		//		System.out.println("000");
		// create or replace procedure p_wareout2in(
		// v_accid in number,v_houseid in number,v_sellaccid in number
		// ,v_outnoteno in varchar2,v_operant in varchar2,v_statetag in number
		// ,v_priceprec in number,v_retbj out varchar2,v_notenolist out varchar2
		// )
		Map<String, ProdParam> param = new HashMap<String, ProdParam>();
		//		System.out.println("111");
		param.put("v_accid", new ProdParam(Types.BIGINT, accid, 1));// 输入参数
		param.put("v_houseid", new ProdParam(Types.BIGINT, houseid, 2));// 输入参数
		param.put("v_sellaccid", new ProdParam(Types.BIGINT, sellaccid, 3));// 输入参数
		param.put("v_outnoteno", new ProdParam(Types.VARCHAR, noteno, 4));// 输入参数
		param.put("v_operant", new ProdParam(Types.VARCHAR, htp.getUsername(), 5));// 输入参数
		param.put("v_statetag", new ProdParam(Types.INTEGER, 0, 6));// 输入参数
		param.put("v_priceprec", new ProdParam(Types.INTEGER, htp.getPriceprec(), 7));// 输入参数
		//		System.out.println("222");

		param.put("v_retbj", new ProdParam(Types.VARCHAR, 8)); // 输出参数
		param.put("v_notenolist", new ProdParam(Types.VARCHAR, 9));// 输出参数
		String qry = "{call p_wareout2in(?,?,?,?,?,?,?,?,?)}";
		//		System.out.println("333");

		int ret = DbHelperSQL.ExecuteProcIn(qry, param); // 带输入参数
		if (ret >= 0) {
			// return 0;
			ret = Integer.parseInt(param.get("v_retbj").getParamvalue().toString());
			String mess = param.get("v_notenolist").getParamvalue().toString();
			WriteResultJson(response, ret, mess);
			// return 1;
		} else {
			WriteResult(response, 0, "操作异常！");

		}

	}

	/// 载入经销商的采购退货单 转为批发退货单
	protected void LoadBuyerWareretin(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long buyaccid = jsonObject.has("buyaccid") ? Long.parseLong(jsonObject.getString("buyaccid")) : 0;
		long accid = htp.getMaccid();
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";// 调拨出库单号
		if (noteno.equals("")) {
			WriteResult(response, 0, "单据号无效！");
			return;
		}
		// create or replace procedure p_wareretin2out(
		// v_accid in number,v_houseid in number,v_buyaccid in number
		// ,v_cgnoteno in varchar2,v_operant in varchar2,v_statetag in number
		// ,v_retbj out varchar2,v_notenolist out varchar2 )
		Map<String, ProdParam> param = new HashMap<String, ProdParam>();
		param.put("v_accid", new ProdParam(Types.BIGINT, accid, 1));// 输入参数
		param.put("v_houseid", new ProdParam(Types.BIGINT, houseid, 2));// 输入参数
		param.put("v_buyaccid", new ProdParam(Types.BIGINT, buyaccid, 3));// 输入参数
		param.put("v_cgnoteno", new ProdParam(Types.VARCHAR, noteno, 4));// 输入参数
		param.put("v_operant", new ProdParam(Types.VARCHAR, htp.getUsername(), 5));// 输入参数
		param.put("v_statetag", new ProdParam(Types.INTEGER, 0, 6));// 输入参数

		param.put("v_retbj", new ProdParam(Types.VARCHAR, 7)); // 输出参数
		param.put("v_notenolist", new ProdParam(Types.VARCHAR, 8));// 输出参数
		String qry = "";
		qry = "{call p_wareretin2out(?,?,?,?,?,?,?,?)}";
		// System.out.println(qry);
		int ret = DbHelperSQL.ExecuteProcIn(qry, param); // 带输入参数
		if (ret >= 0) {
			// return 0;
			ret = Integer.parseInt(param.get("v_retbj").getParamvalue().toString());
			String mess = param.get("v_notenolist").getParamvalue().toString();
			WriteResultJson(response, ret, mess);
			// return 1;
		} else {
			WriteResult(response, 0, "操作异常！");

		}

	}

	// 供应商发货单列表
	protected void SellerWareouthlist(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String qry = "select a.id,a.accid,a.noteno,a.notedate,a.totalamt,a.totalcurr,c.provid,c.provname ";
		qry += " from wareouth a ";
		qry += " join accconnect b on a.accid=b.sellaccid and a.custid=b.sellcustid ";
		qry += " join provide c on b.buyprovid=c.provid";

		qry += " where a.bj=0 and a.statetag=1 and a.ntid=1 and b.buyaccid=" + htp.getMaccid();
		qry += " and a.notedate>b.firstdate";

		String sort = " notedate,noteno,id";
		QueryParam qp = new QueryParam(page, pagesize, sort, qry);
		qp.setSumString("nvl(sum(totalcurr),0) as totalcurr,nvl(sum(totalamt),0) as totalamt");

		Table tb = new Table();
		Wareouth dal = new Wareouth();

		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 载入退货申请到批发退货单
	protected void LoadRefundaskm(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";// 调拨出库单号
		String orderno = jsonObject.has("orderno") ? jsonObject.getString("orderno") : "";// 调拨订单号
		Wareouth dal = new Wareouth();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setOrderno(orderno);
		// dal.setHouseid(houseid);
		// dal.setTohouseid(tohouseid);
		WriteResult(response, dal.doLoadRefundaskm(), dal.getErrmess());

	}

	// 批发出库载入商品配货明细
	protected void LoadWarepeim(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";// 调拨出库单号
		String phnoteno = jsonObject.has("phnoteno") ? jsonObject.getString("phnoteno") : "";// 调拨订单号
		// long custid = jsonObject.has("custid") ?
		// Long.parseLong(jsonObject.getString("custid")) : 0;
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		// String qxpublic = htp.getQxpublic();
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));// 单价精度
		Wareouth dal = new Wareouth();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		WriteResult(response, dal.doLoadWarepeim(phnoteno, priceprec), dal.getErrmess());

	}

	// 载入指定采购订单明细记录到采购入库
	protected void ProvOrderToIn(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";// 调拨出库单号
		String orderno = jsonObject.has("orderno") ? jsonObject.getString("orderno") : "";// 调拨订单号
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0; // 调出店铺id
		// long tohouseid = jsonObject.has("tohouseid") ?
		// Long.parseLong(jsonObject.getString("tohouseid")) : 0; //调入店铺id
		Wareinh dal = new Wareinh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		dal.setOrderno(orderno);
		// dal.setHouseid(houseid);
		// dal.setTohouseid(tohouseid);
		WriteResult(response, dal.doOrdertoIn(), dal.getErrmess());

	}

	// 客户订单撤单
	protected void CustorderhCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";

		int changedatebj = htp.getChangedatebj();

		Custorderh dal = new Custorderh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// 退货申请撤单
	protected void RefundaskhCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";

		int changedatebj = htp.getChangedatebj();

		Refundouth dal = new Refundouth();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Cancel(changedatebj), dal.getErrmess());
	}

	// =========================================================
	// 设置调拨订单完成标志
	protected void SetAllotorderhover(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int overbj = jsonObject.has("overbj") ? Integer.parseInt(jsonObject.getString("overbj")) : 0;
		Allotorderh dal = new Allotorderh();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setOverbj(overbj);
		WriteResult(response, dal.doSetOver(), dal.getErrmess());

	}

	// 分页显示调拨订单列表;
	protected void GetAllotorderhList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		String currdate = htp.getNowdate();

		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 2;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String housename = jsonObject.has("housename") ? jsonObject.getString("housename") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "desc";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "notedate";
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";
		sort += " " + order + ",id ";// +order;
		String lastop = htp.getUsername();
		int qxbj = htp.getQxbj();
		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================

		// System.out.println("GetAllotorderhList 2 mindate=" + mindate + "
		// mess=" + mess);

		// sort += " " + order;
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.HOUSEID,a.REMARK,a.HANDNO,a.totalamt,a.totalcurr,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,b.HOUSENAME";
		// String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (findbox != null && !findbox.equals(""))
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox + "%' or b.housename like '%" + findbox + "%' or b.shortname like '%"
					+ findbox + "%' )";

		// strwhere += " and a.STATETAG=1 ";
		if (ywly == 0) {// ywly=0 只查询手机端增加的单据，用于向erp传数据
			strwhere += " and a.ywly=" + ywly;
			if (statetag < 2)
				strwhere += " and a.statetag=" + statetag; // 已提 交
		} else {
			if (htp.getLevelid() == 0) // 系统管理员允许看所有用户的单据
			{
				if (statetag == 0)
					strwhere += " and a.statetag=0 "; // 未提 交
				else if (statetag == 1)
					strwhere += " and a.statetag=1"; // 已提 交
				else
					strwhere += " and (a.STATETAG=1 or a.STATETAG=0)"; // 所有
			} else {
				if (statetag == 0)
					strwhere += " and a.statetag=0 and a.operant='" + lastop + "'"; // 未提
				// 交
				else if (statetag == 1)
					strwhere += " and a.statetag=1"; // 已提 交
				else
					strwhere += " and (a.STATETAG=1 or a.STATETAG=0 and a.operant='" + lastop + "')"; // 所有
			}
		}
		//		if (ywly < 2)
		//			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据

		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (houseid != 0)
			strwhere += " and a.HOUSEID = " + houseid;
		else if (!housename.equals(""))
			strwhere += " and (b.housename like '%" + housename + "%' or b.shortname like '%" + housename.toUpperCase() + "%' )";
		if (!handno.equals(""))
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (!noteno.equals(""))
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (!remark.equals(""))
			strwhere += " and a.remark like '%" + remark + "%'";
		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";

		if (qxbj == 1) // 1 启用权限控制
			strwhere += " and (a.houseid=0 or  exists (select 1 from employehouse x where a.houseid=x.houseid and x.epid=" + htp.getUserid() + "))";
		if (wareid > 0) {
			strwhere += " and exists (select 1 from allotorderm x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (!wareno.equals("")) {
			strwhere += " and exists (select 1 from allotorderm x,warecode y where x.wareid=y.wareid and a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno.toUpperCase() + "%')";
		}
		String sumstring = "nvl(sum(totalamt),0) as totalamt,nvl(sum(totalcurr),0) as totalcurr";
		// if (!mess.equals(""))
		// sumstring += ",'" + mess + "' as warning";
		// QueryParam qp = new QueryParam();
		// qp.setPageIndex(page);
		// qp.setPageSize(pagesize);
		// qp.setSortString(sort);
		QueryParam qp = new QueryParam(page, pagesize, sort);

		qp.setSumString(sumstring);
		Table tb = new Table();
		Allotorderh dal = new Allotorderh();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		// Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString() + ",\"warning\":\"" + mess + "\""));

	}

	// 设置采购订单完成标志
	protected void SetProvorderhover(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int overbj = jsonObject.has("overbj") ? Integer.parseInt(jsonObject.getString("overbj")) : 0;
		Provorderh dal = new Provorderh();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setOverbj(overbj);
		WriteResult(response, dal.doSetOver(), dal.getErrmess());

	}

	// =========================================================
	// 设置客户订单完成标志
	protected void SetCustorderhover(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int overbj = jsonObject.has("overbj") ? Integer.parseInt(jsonObject.getString("overbj")) : 0;
		Custorderh dal = new Custorderh();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setOverbj(overbj);
		WriteResult(response, dal.doSetOver(), dal.getErrmess());
	}

	// =========================================================
	// 查询店铺费用
	protected void repHousecost(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		int qxbj = htp.getQxbj();
		int maxday = htp.getMaxday();

		vHousecost dal = new vHousecost();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setMaxday(maxday);
		dal.setQxbj(qxbj);
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		QueryParam qp = new QueryParam();
		Table tb = new Table();

		qp.setPageIndex(page);
		qp.setPageSize(pagesize);

		tb = dal.GetTable(qp);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 查询收款汇总
	protected void repCxskhz(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// int page = jsonObject.has("page") ?
		// Integer.parseInt(jsonObject.getString("page")) : 1;
		// int pagesize = jsonObject.has("rows") ?
		// Integer.parseInt(jsonObject.getString("rows")) : 10;
		// if (pagesize > 50)
		// pagesize = 10;
		//
		// int qxbj = htp.getQxbj();
		// int maxday = htp.getMaxday();
		//
		// vCxcgrk dal = new vCxcgrk();
		// DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setAccid(htp.getMaccid());
		// dal.setUserid(htp.getUserid());
		// dal.setMaxday(maxday);
		// dal.setQxbj(qxbj);
		// dal.setNowdate(htp.getNowdate());
		// dal.setAccbegindate(htp.getAccdate());
		// QueryParam qp = new QueryParam();
		// Table tb = new Table();
		// qp.setPageIndex(page);
		// qp.setPageSize(pagesize);
		//
		// tb = dal.GetTable(qp);
		// if (page < 0) {// 导出excel
		// String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
		// WriteResult(response, Integer.parseInt(retcs.substring(0, 1)),
		// retcs.substring(1));
		// return;
		// }
		// Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 查询采购入库
	protected void repCxcgrk(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		int qxbj = htp.getQxbj();
		int maxday = htp.getMaxday();

		vCxcgrk dal = new vCxcgrk();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setMaxday(maxday);
		dal.setQxbj(qxbj);
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		QueryParam qp = new QueryParam();
		Table tb = new Table();

		qp.setPageIndex(page);
		qp.setPageSize(pagesize);

		if (sizenum > 0) // 如果尺码大于0，表示尺码横向展开方式
		{
			String jsonstr = dal.GetTable2Json(qp, sizenum);
			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
			return;
		}
		if (page < 0) {// 导出excel
			// String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			String retcs = dal.GetTable2Excel(qp, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		tb = dal.GetTable(qp);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 查询客户销售
	protected void repCxkhxs(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int qxbj = htp.getQxbj();
		int maxday = htp.getMaxday();
		vCxkhxs dal = new vCxkhxs();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setQxbj(qxbj);
		dal.setMaxday(maxday);
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam();
		Table tb = new Table();

		qp.setPageIndex(page);
		qp.setPageSize(pagesize);

		if (sizenum > 0) // 如果尺码大于0，表示尺码横向展开方式
		{
			String jsonstr = dal.GetTable2Json(qp, sizenum);
			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
			return;
		}

		tb = dal.GetTable(qp);
		// 导出excel
		if (page < 0) {
			// qp.setPageIndex(-1);
			// tb = dal.GetTable1(qp); // 所有数据
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 查询批发出库
	protected void repCxpfck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int qxbj = htp.getQxbj();
		int maxday = htp.getMaxday();
		vCxxsck dal = new vCxxsck();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setQxbj(qxbj);
		dal.setMaxday(maxday);
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam();
		Table tb = new Table();

		qp.setPageIndex(page);
		qp.setPageSize(pagesize);

		if (sizenum > 0) // 如果尺码大于0，表示尺码横向展开方式
		{
			String jsonstr = dal.GetTable2Json1(qp, sizenum);
			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
			return;
		}

		tb = dal.GetTable1(qp);
		// 导出excel
		if (page < 0) {
			// qp.setPageIndex(-1);
			// tb = dal.GetTable1(qp); // 所有数据
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 查询零售出库
	protected void repCxlsck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int qxbj = htp.getQxbj();
		int maxday = htp.getMaxday();
		vCxxsck dal = new vCxxsck();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setQxbj(qxbj);
		dal.setMaxday(maxday);
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setUserid(htp.getUserid());
		Table tb = new Table();
		QueryParam qp = new QueryParam();

		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		// System.out.println("sizenum="+sizenum);

		if (sizenum > 0) // 如果尺码大于0，表示尺码横向展开方式
		{

			// System.out.println("00000");
			String jsonstr = dal.GetTable2Json0(qp, sizenum);
			// System.out.println("11111");
			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
			return;
		}

		tb = dal.GetTable0(qp);

		// 导出excel
		if (page < 1) {
			// "columns":[{"brandid":"品牌id"},{"brandname":"品牌名称"}]
			// qp.setPageIndex(-1);
			// tb = dal.GetTable0(qp); // 所有数据
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 查询零售出库
	protected void repCxlsck0(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int qxbj = htp.getQxbj();
		int maxday = htp.getMaxday();
		vCxxsck dal = new vCxxsck();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setQxbj(qxbj);
		dal.setMaxday(maxday);
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setUserid(htp.getUserid());
		Table tb = new Table();
		QueryParam qp = new QueryParam();
		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		if (sizenum > 0) // 如果尺码大于0，表示尺码横向展开方式
		{
			String jsonstr = dal.GetTable2Json00(qp, sizenum);
			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
			return;
		}
		tb = dal.GetTable00(qp);
		if (page < 1) {
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 查询销售出库(零售+批发+客户销售)
	protected void repCxxsck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int qxbj = htp.getQxbj();
		int maxday = htp.getMaxday();
		vCxxsck dal = new vCxxsck();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setQxbj(qxbj);
		dal.setMaxday(maxday);
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setUserid(htp.getUserid());
		dal.setHousecostbj(htp.getHousecostbj());

		Table tb = new Table();
		QueryParam qp = new QueryParam();

		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		// System.out.println("sizenum="+sizenum);

		if (sizenum > 0) // 如果尺码大于0，表示尺码横向展开方式
		{
			// System.out.println("00000");
			String jsonstr = dal.GetTable2JsonXs(qp, sizenum);
			// System.out.println("11111");
			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
			return;
		}
		tb = dal.GetTableXs(qp);
		// 导出excel
		if (page < 1) {
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 查询客户订货
	protected void repCxkhdh(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int qxbj = htp.getQxbj();
		int maxday = htp.getMaxday();
		vCxkhdh dal = new vCxkhdh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setQxbj(qxbj);
		dal.setNowdate(htp.getNowdate());
		dal.setMaxday(maxday);
		dal.setAccbegindate(htp.getAccdate());
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam();
		Table tb = new Table();

		qp.setPageIndex(page);
		qp.setPageSize(pagesize);

		if (sizenum > 0) // 如果尺码大于0，表示尺码横向展开方式
		{
			String jsonstr = dal.GetTable2Json(qp, sizenum);
			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
			return;
		}

		tb = dal.GetTable(qp);

		if (page < 0) {// 导出excel
			// qp.setPageIndex(-1);
			// tb = dal.GetTable(qp); // 所有数据
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 查询客户配货
	protected void repCxkhph(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int qxbj = htp.getQxbj();
		int maxday = htp.getMaxday();

		vCxkhph dal = new vCxkhph();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setQxbj(qxbj);
		dal.setNowdate(htp.getNowdate());
		dal.setMaxday(maxday);
		dal.setAccbegindate(htp.getAccdate());
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam();
		Table tb = new Table();

		qp.setPageIndex(page);
		qp.setPageSize(pagesize);

		if (sizenum > 0) // 如果尺码大于0，表示尺码横向展开方式
		{
			String jsonstr = dal.GetTable2Json(qp, sizenum);
			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
			return;
		}

		tb = dal.GetTable(qp);

		if (page < 0) {// 导出excel
			// qp.setPageIndex(-1);
			// tb = dal.GetTable(qp); // 所有数据
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 查询调拨订货
	protected void repCxdbdh(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int qxbj = htp.getQxbj();
		int maxday = htp.getMaxday();
		vCxdbdh dal = new vCxdbdh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setQxbj(qxbj);
		dal.setNowdate(htp.getNowdate());
		dal.setMaxday(maxday);
		dal.setAccbegindate(htp.getAccdate());
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam();
		Table tb = new Table();

		qp.setPageIndex(page);
		qp.setPageSize(pagesize);

		if (sizenum > 0) // 如果尺码大于0，表示尺码横向展开方式
		{
			String jsonstr = dal.GetTable2Json(qp, sizenum);
			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
			return;
		}

		tb = dal.GetTable(qp);

		if (page < 0) {// 导出excel
			// qp.setPageIndex(-1);
			// tb = dal.GetTable(qp); // 所有数据
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		// {"page":1,"row":10,"mindate":"2016-01-01","maxdate":"2017-03-10",
		// "fieldlist":"sum(case a.ntid when 0 then b.amount else -b.amount end)
		// as amount,sum(b.curr) as curr",
		// "sortlist":"noteno desc","flyang":"20150107",
		// "grouplist":"to_char(a.notedate,'yyyy-MM-dd') as
		// notedate,a.noteno,a.provid"}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 查询调拨入库
	protected void repCxdbrk(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int qxbj = htp.getQxbj();
		int maxday = htp.getMaxday();
		vCxdbrk dal = new vCxdbrk();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setQxbj(qxbj);
		dal.setNowdate(htp.getNowdate());
		dal.setMaxday(maxday);
		dal.setAccbegindate(htp.getAccdate());
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam();
		Table tb = new Table();

		qp.setPageIndex(page);
		qp.setPageSize(pagesize);

		if (sizenum > 0) // 如果尺码大于0，表示尺码横向展开方式
		{
			String jsonstr = dal.GetTable2Json(qp, sizenum);
			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
			return;
		}

		tb = dal.GetTable(qp);

		if (page < 0) {// 导出excel
			// qp.setPageIndex(-1);
			// tb = dal.GetTable(qp); // 所有数据
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 查询调拨出库
	protected void repCxdbck(HttpServletResponse response, HttpInfo htp, int ztbj) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int qxbj = htp.getQxbj();
		int maxday = htp.getMaxday();
		vCxdbck dal = new vCxdbck();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setQxbj(qxbj);
		dal.setZtbj(ztbj);
		dal.setNowdate(htp.getNowdate());
		dal.setMaxday(maxday);
		dal.setAccbegindate(htp.getAccdate());
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam();
		Table tb = new Table();

		qp.setPageIndex(page);
		qp.setPageSize(pagesize);

		if (sizenum > 0) // 如果尺码大于0，表示尺码横向展开方式
		{
			String jsonstr = dal.GetTable2Json(qp, sizenum);
			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
			return;
		}

		tb = dal.GetTable(qp);

		if (page < 0) {// 导出excel
			// qp.setPageIndex(-1);
			// tb = dal.GetTable(qp); // 所有数据
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 查询临时盘点
	protected void repCxlspd(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// int ntid = jsonObject.has("ntid") ?
		// Integer.parseInt(jsonObject.getString("ntid")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int qxbj = htp.getQxbj();
		int maxday = htp.getMaxday();
		vCxlspd dal = new vCxlspd();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setQxbj(qxbj);
		// dal.setNtid(ntid);

		dal.setNowdate(htp.getNowdate());
		dal.setMaxday(maxday);
		dal.setAccbegindate(htp.getAccdate());
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam();
		Table tb = new Table();

		qp.setPageIndex(page);
		qp.setPageSize(pagesize);

		if (sizenum > 0) // 如果尺码大于0，表示尺码横向展开方式
		{
			String jsonstr = dal.GetTable2Json(qp, sizenum);
			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
			return;
		}

		tb = dal.GetTable(qp);

		if (page < 0) {// 导出excel
			// qp.setPageIndex(-1);
			// tb = dal.GetTable(qp); // 所有数据
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 查询库存盘点
	protected void repCxkcpd(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int qxbj = htp.getQxbj();
		int maxday = htp.getMaxday();
		vCxkcpd dal = new vCxkcpd();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setMaxday(maxday);
		dal.setQxbj(qxbj);
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam();
		Table tb = new Table();

		qp.setPageIndex(page);
		qp.setPageSize(pagesize);

		if (sizenum > 0) // 如果尺码大于0，表示尺码横向展开方式
		{
			String jsonstr = dal.GetTable2Json(qp, sizenum);
			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
			return;
		}

		if (page < 0) {// 导出excel
			// aaa
			// qp.setPageIndex(-1);
			// tb = dal.GetTable(qp); // 所有数据
			// String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			String retcs = dal.GetTable2Excel(qp, jsonObject);

			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		tb = dal.GetTable(qp);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 查询采购订货
	protected void repCxcgdh(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int qxbj = htp.getQxbj();
		int maxday = htp.getMaxday();
		vCxcgdh dal = new vCxcgdh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setQxbj(qxbj);
		dal.setNowdate(htp.getNowdate());
		dal.setMaxday(maxday);
		dal.setAccbegindate(htp.getAccdate());
		dal.setUserid(htp.getUserid());
		QueryParam qp = new QueryParam();
		qp.setPageIndex(page);
		qp.setPageSize(pagesize);
		Table tb = new Table();
		// System.out.println("sizenum="+sizenum);
		if (sizenum > 0) // 如果尺码大于0，表示尺码横向展开方式
		{
			String jsonstr = dal.GetTable2Json(qp, sizenum);
			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
			return;
		}

		tb = dal.GetTable(qp);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 执行传入的sql语句(接收ERP采购入库单)
	protected void DoExecsql(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String qry = jsonObject.has("sql") ? jsonObject.getString("sql") : "";

		if (qry.length() <= 0) {
			WriteResult(response, 0, "未传入可执行的语句！");
			return;
		}
		if (DbHelperSQL.ExecuteSql(qry) < 0) {
			WriteResult(response, 0, "操作异常！");

		} else {
			WriteResult(response, 1, "操作成功！");

		}
	}

	// 根据销售单号生成二维码
	protected void NoteTwobarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// int bmpsize = jsonObject.has("bmpsize") ?
		// Integer.parseInt(jsonObject.getString("bmpsize")) : 200;
		String ywnoteno = jsonObject.has("ywnoteno") ? jsonObject.getString("ywnoteno") : "";
		float curr = jsonObject.has("curr") ? Float.parseFloat(jsonObject.getString("curr")) : 0;
		float totalcurr = jsonObject.has("totalcurr") ? Float.parseFloat(jsonObject.getString("totalcurr")) : 0;
		int ywtag = jsonObject.has("ywtag") ? Integer.parseInt(jsonObject.getString("ywtag")) : 0;
		// ywtag:0=店铺零售，1=商场零售，2=线上，3=批发销售
		if (ywnoteno.equals("")) {
			WriteResult(response, 0, "单据号无效！");
			return;
		}
		if (curr == 0 || totalcurr == 0) {
			WriteResult(response, 0, "刷卡或总金额无效！");
			return;
		}
		String path = Func.getRootPath();
		// String filename = "n2bar_" + htp.getMaccid() + "_" + ywnoteno +
		// ".jpeg";// +"_" + num.ToString() + ".jpeg";//
		// string.Format(DateTime.Now.ToString(), "yyyymmddhhmmss") + ".jpg";
		String content = "\"payfs\":2,\"ywnoteno\":\"" + ywnoteno + "\",\"ywtag\":" + ywtag + ",\"curr\":" + curr + ",\"totalcurr\":" + totalcurr + ",\"accid\":" + htp.getMaccid();
		// String barfile = Func.TwoBarcode(notenostr, bmpsize);

		// String logfilename = "img/logo.png";
		String desfilename = "temp/ss_" + htp.getMaccid() + "_" + ywnoteno + ".png";// +"_"
																					// +
																					// num.ToString()
																					// +
																					// ".jpeg";//
																					// string.Format(DateTime.Now.ToString(),
																					// "yyyymmddhhmmss")
																					// +
																					// ".jpg";
																					// String
																					// link
																					// =
																					// "SKYDVIP-WWW.SKYDISPARK.COM-FLYANGTECH#"
																					// +
																					// Func.desEncode(Vipid.toString());
																					//
																					//
																					// if
																					// (TwoBarCode.encode(link,
																					// path+logfilename,
																					// path+desfilename,true))
																					// {

		if (TwoBarCode.encode(content, path + desfilename)) {
			WriteResult(response, 1, desfilename);
		} else {
			WriteResult(response, 0, "二维码生成失败！");
		}
	}

	// 取零售、批发、退货单结算信息 结账前调用
	protected void GetWareoutcheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		if (htp.getHousezkbj() == 0) // 0= 不分销售帐款分店铺核对
			houseid = 0;
		Wareouth dal = new Wareouth();
		dal.setHouseid(houseid);
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setCalcdate(htp.getCalcdate());
		if (dal.doGetcheck() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 取批发销售单收款记录及应收余额 已结账的单据查看用
	protected void GetWareoutpaye(HttpServletResponse response, HttpInfo htp, int fs) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		if (htp.getHousezkbj() == 0) // 0= 不分销售帐款分店铺核对
			houseid = 0;

		Wareouth dal = new Wareouth();
		dal.setHouseid(houseid);
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setCalcdate(htp.getCalcdate());
		if (dal.doGetpaye(fs) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 取采购入库单据付款记录
	protected void GetWareinpay(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Wareinh dal = new Wareinh();
		// dal.setHouseid(houseid);
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		Table tb = new Table();
		tb = dal.GetTable();
		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// ==================================================
	// 取我的买家列表(我的经销商列表)
	protected void GetMybuyerList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = " accname,id desc ";// +order;
		String strwhere = " a.sellaccid=" + htp.getMaccid(); // b.noused=0 and
		if (!findbox.equals(""))
			strwhere += " and (b.accname like '%" + findbox.toUpperCase() + "%' or c.custname like '%" + findbox + "%')";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "A.ID,B.ACCID,B.ACCNAME,B.COMPANY,C.CUSTID,C.CUSTNAME,A.LASTDATE";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// qp.setQueryString(qry);

		Table tb = new Table();
		Accconnect dal = new Accconnect();

		tb = dal.GetTableBuyer(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 取我的买家记录id
	protected void GetMybuyerbyid(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "A.ID,B.ACCID,B.ACCNAME,B.COMPANY,C.CUSTID,C.CUSTNAME,A.LASTDATE";
		String strwhere = " a.sellaccid=" + accid + " and a.id=" + id;
		Table tb = new Table();
		Accconnect dal = new Accconnect();

		tb = dal.GetListBuyer(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 新增买家申请记录 给经销商发送加入申请
	protected void AddMybuyeracclinkRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long sellaccid = jsonObject.has("sellaccid") ?
		// Long.parseLong(jsonObject.getString("sellaccid")) : 0;
		String buyaccname = jsonObject.has("buyaccname") ? jsonObject.getString("buyaccname") : "";
		Acclink dal = new Acclink();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setSellaccid(htp.getMaccid());
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.AppendBuyer(buyaccname), dal.getErrmess());

	}

	// 根据id取我的买家申请记录
	protected void GetMybuyeracclinkbyid(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long accid = jsonObject.has("accid") ?
		// Long.parseLong(jsonObject.getString("accid")) : 0;
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,A.BUYACCID,a.TAG,a.APPLYDATE,a.REQUEST,a.REFUSE,a.LASTDATE,A.APPLYOP";
		String strwhere = "  a.id=" + id;
		Table tb = new Table();
		Acclink dal = new Acclink();

		tb = dal.GetList(strwhere, fieldlist, 0).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 根据id取我的卖家申请记录
	protected void GetMyselleracclinkbyid(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long accid = jsonObject.has("accid") ?
		// Long.parseLong(jsonObject.getString("accid")) : 0;
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,A.SELLACCID,a.TAG,a.APPLYDATE,a.REQUEST,a.REFUSE,a.LASTDATE,A.APPLYOP";
		String strwhere = "  a.id=" + id;
		Table tb = new Table();
		Acclink dal = new Acclink();

		tb = dal.GetList(strwhere, fieldlist, 1).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 新增买家记录 (买家申请回复)
	protected void AddMybuyerRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long buyaccid = jsonObject.has("buyaccid") ?
		// Long.parseLong(jsonObject.getString("buyaccid")) : 0;
		// long sellaccid = jsonObject.has("sellaccid") ?
		// Long.parseLong(jsonObject.getString("sellaccid")) : 0;
		int tag = jsonObject.has("tag") ? Integer.parseInt(jsonObject.getString("tag")) : 0;
		// tag:1=通过，0=拒绝
		Accconnect dal = new Accconnect();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setLastop(htp.getUsername());
		// dal.setBuyaccid(buyaccid);
		// dal.setSellaccid(sellaccid);
		WriteResult(response, dal.Append(tag), dal.getErrmess());

	}

	// 新增我的卖家记录 (卖家申请回复)
	protected void AddMysellerRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long buyaccid = jsonObject.has("buyaccid") ?
		// Long.parseLong(jsonObject.getString("buyaccid")) : 0;
		// long sellaccid = jsonObject.has("sellaccid") ?
		// Long.parseLong(jsonObject.getString("sellaccid")) : 0;
		int tag = jsonObject.has("tag") ? Integer.parseInt(jsonObject.getString("tag")) : 0;
		// tag:1=通过，2=拒绝
		Accconnect dal = new Accconnect();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setLastop(htp.getUsername());
		// dal.setBuyaccid(buyaccid);
		// dal.setSellaccid(sellaccid);
		WriteResult(response, dal.Append(tag), dal.getErrmess());

	}

	// 删除指定我的买家id信息
	protected void DelMybuyerByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		Accconnect dal = new Accconnect();
		// dal.setLastop(htp.getUsername());
		dal.setId(id);
		// dal.setBuyaccid(buyaccid);
		// dal.setSellaccid(sellaccid);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 删除指定我的卖家id信息
	protected void DelMysellerByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		Accconnect dal = new Accconnect();
		// dal.setLastop(htp.getUsername());
		dal.setId(id);
		// dal.setBuyaccid(buyaccid);
		// dal.setSellaccid(sellaccid);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 更新我的买家id信息
	protected void UpdateMybuyerByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		Accconnect dal = new Accconnect();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 更新我的卖家id信息
	protected void UpdateMysellerByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Accconnect dal = new Accconnect();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 保存商家关联信息
	protected void WriteAccconnect(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Accconnect dal = new Accconnect();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		WriteResult(response, dal.Update1(), dal.getErrmess());
	}

	// 取我的买家申请记录列表
	protected void GetMybuyeracclinkList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// " poleid ";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : " asc ";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		long accid = htp.getMaccid();
		String sort = " applydate desc,id";// +order;
		String strwhere = " a.sellaccid=" + accid + " and a.tag=0 and a.accid<>" + accid;
		if (!findbox.equals(""))
			strwhere += " and b.accname like '%" + findbox.toUpperCase() + "%'";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "A.ID,A.BUYACCID,A.TAG,A.APPLYDATE,A.REQUEST,A.REFUSE,A.LASTDATE,A.APPLYOP";
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();
		Acclink dal = new Acclink();

		tb = dal.GetTable(qp, strwhere, fieldlist, 0);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 取我的卖家申请记录列表
	protected void GetMyselleracclinkList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long accid = htp.getMaccid();// jsonObject.has("accid") ?
										// Long.parseLong(jsonObject.getString("accid"))
										// : 0;
										// float id = jsonObject.has("id") ?
										// Float.parseFloat(jsonObject.getString("id"))
										// : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String sort = " applydate desc,id";// +order;

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,A.SELLACCID,a.TAG,a.APPLYDATE,a.REQUEST,a.REFUSE,a.LASTDATE";
		// String strwhere = " a.id=" + id;
		String strwhere = " a.buyaccid=" + accid + " and a.TAG=0 and a.accid<>" + accid;

		if (!findbox.equals(""))
			strwhere += " and b.accname like '%" + findbox.toUpperCase() + "%'";
		Table tb = new Table();
		Acclink dal = new Acclink();
		QueryParam qp = new QueryParam(page, pagesize, sort);

		tb = dal.GetTable(qp, strwhere, fieldlist, 1);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

		// tb = dal.GetList(strwhere, fieldlist, 1).getTable(1);
		//
		// Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 取我的卖家列表(我的供应商)
	protected void GetMysellerList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = " accname,id desc ";// +order;
		String strwhere = " a.buyaccid=" + htp.getMaccid(); // b.noused=0 and
		if (!findbox.equals(""))
			strwhere += " and (b.accname like '%" + findbox.toUpperCase() + "%' or c.provname like '%" + findbox + "%')";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "A.ID,B.ACCID,B.ACCNAME,B.COMPANY,C.PROVID,C.PROVNAME,A.LASTDATE";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// qp.setQueryString(qry);

		Table tb = new Table();
		Accconnect dal = new Accconnect();

		tb = dal.GetTableSeller(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 取我的卖家记录id
	protected void GetMysellerbyid(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "A.ID,B.ACCID,B.ACCNAME,B.COMPANY,C.PROVID,C.PROVNAME,A.LASTDATE";
		String strwhere = " a.buyaccid=" + accid + " and a.id=" + id;
		Table tb = new Table();
		Accconnect dal = new Accconnect();

		tb = dal.GetListSeller(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 新增卖家申请记录 向供应商发送申请信息
	protected void AddMyselleracclinkRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long sellaccid = jsonObject.has("sellaccid") ?
		// Long.parseLong(jsonObject.getString("sellaccid")) : 0;
		String sellaccname = jsonObject.has("sellaccname") ? jsonObject.getString("sellaccname") : "";
		Acclink dal = new Acclink();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setBuyaccid(htp.getMaccid());
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.AppendSeller(sellaccname), dal.getErrmess());

	}

	// ==================================================
	// 店铺收银交班表
	protected void HouseWorktotal(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		float classid = jsonObject.has("classid") ? Float.parseFloat(jsonObject.getString("classid")) : 0;
		String enddate = jsonObject.has("enddate") ? jsonObject.getString("enddate") : "";
		String lastop = jsonObject.has("lastop") ? jsonObject.getString("lastop") : "";
		int jbtag = htp.getJbtag();
		Daycheck dal = new Daycheck();
		dal.setEpid(htp.getUserid());
		dal.setEnddate(enddate);
		if (lastop.length() > 0)
			dal.setLastop(lastop);
		else
			dal.setLastop(htp.getUsername());
		dal.setClassid(classid);
		dal.setNowdatetime(htp.getNowdatetime());
		if (dal.End(htp.getMaccid(), jbtag) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 店铺交班
	protected void HouseWorkClose(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// float classid = jsonObject.has("classid") ?
		// Float.parseFloat(jsonObject.getString("classid")) : 0;
		Daycheck dal = new Daycheck();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setEpid(htp.getUserid());
		dal.setLastop(htp.getUsername());
		// dal.setClassid(classid);
		WriteResult(response, dal.WorkClose(), dal.getErrmess());
	}

	// 取消当前收银交班
	protected void HouseWorkCancel(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		float classid = jsonObject.has("classid") ? Float.parseFloat(jsonObject.getString("classid")) : 0;
		Daycheck dal = new Daycheck();
		dal.setEpid(htp.getUserid());
		dal.setLastop(htp.getUsername());
		dal.setClassid(classid);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 店铺收银开班
	protected void HouseWorkopen(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int jbtag = htp.getJbtag();
		Daycheck dal = new Daycheck();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		// dal.setHouseid(houseid);
		dal.setEpid(htp.getUserid());
		dal.setLastop(htp.getUsername());
		dal.setStatetag(0);
		WriteResult(response, dal.Append(jbtag), dal.getErrmess());

	}

	// 店铺班次是否存在
	protected void HouseWorkExists(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long userid = htp.getUserid();
		int jbtag = htp.getJbtag();

		Daycheck dal = new Daycheck();
		dal.setHouseid(houseid);
		dal.setEpid(userid);
		WriteResult(response, dal.Exists(jbtag), dal.getErrmess());

	}

	// 店铺班次列表
	protected void HouseWorkList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String nowdatestr = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
												// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : nowdatestr;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : nowdatestr;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		if (mindate.compareTo(htp.getAccdate()) < 0)
			mindate = htp.getAccdate();

		String fieldlist = "a.CLASSID,A.HOUSEID,B.HOUSENAME,A.BEGINDATE,A.ENDDATE,A.LASTOP,A.REMARK,a.currqc,a.currxs,a.currfy,a.currye,a.curryk,a.curryh,a.currjc,a.currxj ";
		fieldlist += "  ,case when a.curryk<>0 then 1 else 0 end as numyk ,case when a.curryh<>0 then 1 else 0 end  as numyh";
		// qry += " FROM DAYCHECK a ";
		// qry += " left outer join warehouse b on a.houseid=b.houseid";
		String strwhere = " b.accid=" + htp.getMaccid() + " and a.statetag=1";
		if (mindate.length() <= 0)
			strwhere += " and a.BEGINDATE >= to_date(to_char(sysdate,'yyyy-mm-dd')||' 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		else
			strwhere += " and a.BEGINDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";

		if (maxdate.length() <= 0)
			strwhere += " and a.BEGINDATE <= to_date(to_char(sysdate,'yyyy-mm-dd')||' 23:59:59','yyyy-mm-dd hh24:mi:ss')";
		else
			strwhere += " and a.BEGINDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (houseid > 0)
			strwhere += " and a.houseid=" + houseid;
		// if (lastop != null && lastop != "") qry += " and a.lastop like '%" +
		// lastop + "%'";
		if (!findbox.equals(""))
			strwhere += " and (a.lastop like '%" + findbox + "%' or b.housename like '%" + findbox + "%')";
		String sort = " begindate desc,classid";

		String sumString = "nvl(sum(currxs),0) as currxs,nvl(sum(curryk),0) as curryk,nvl(sum(curryh),0) as curryh ";
		sumString += "  ,nvl(sum(numyk),0) as numyk ,nvl(sum(numyh),0)  as numyh";

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString(sumString);
		Table tb = new Table();
		Daycheck dal = new Daycheck();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// =======================================================
	// 新增商品颜色记录(从excel中导入)
	protected void AddWarecolorRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String colorname = jsonObject.has("colorname") ? jsonObject.getString("colorname") : "";
		int barfs = htp.getBarfs();
		if (htp.getAutobar() == 0)// 不自动产生条码
			barfs = 0;
		Warecolor dal = new Warecolor();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.LoadFromXLS(wareno, colorname, barfs), dal.getErrmess());
	}

	// 清除商品的颜色记录
	protected void ClearWarecolor(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		Warecolor dal = new Warecolor();
		dal.setWareid(wareid);
		WriteResult(response, dal.Clear(), dal.getErrmess());
	}

	// 成批写商品颜色记录
	protected void WriteWarecolorbatch(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 0;
		Warecolor dal = new Warecolor();
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setYwly(ywly);
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Append(jsonObject), dal.getErrmess());
	}

	// 更改商品颜色使用状态
	protected void UpdateWarecolor(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		int noused = jsonObject.has("noused") ? Integer.parseInt(jsonObject.getString("noused")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		Warecolor dal = new Warecolor();
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setAccid(htp.getMaccid());
		dal.setNoused(noused);
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 写商品颜色记录
	protected void WriteWarecolor(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		Warecolor dal = new Warecolor();
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setAccid(htp.getMaccid());
		dal.setYwly(ywly);
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Append(value), dal.getErrmess());
	}

	// 获取所有商品已选及可选颜色表 app->erp专用
	protected void GetWarecolorAllList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long wareid = jsonObject.has("wareid") ?
		// Long.parseLong(jsonObject.getString("wareid")) : 0;
		// int rdbj = jsonObject.has("rdbj") ?
		// Integer.parseInt(jsonObject.getString("rdbj")) : 0;
		// String findbox = jsonObject.has("findbox") ?
		// jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String lastdate = jsonObject.has("lastdate") ? jsonObject.getString("lastdate") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = " id";
		String strwhere = "";
		if (!lastdate.equals(""))
			strwhere += " a.lastdate>to_date('" + lastdate + "','yyyy-mm-dd hh24:mi:ss')";
		String fieldlist = "a.id,a.wareid,a.colorid,b.colorname,b.colorno";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Warecolor dal = new Warecolor();
		dal.setAccid(htp.getMaccid());

		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取商品已有的颜色表
	protected void GetWarecolorexistsList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		// int rdbj = jsonObject.has("rdbj") ?
		// Integer.parseInt(jsonObject.getString("rdbj")) : 0;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = " COLORID";
		String strwhere = " b.statetag=1 and b.noused=0 ";
		if (!findbox.equals(""))
			strwhere += " and (b.COLORNAME like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase() + "%' or b.COLORNO like '%" + findbox.toUpperCase() + "%') ";
		String fieldlist = " a.colorid,b.colorname,b.colorno,a.id";

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Warecolor dal = new Warecolor();
		dal.setAccid(htp.getMaccid());
		dal.setWareid(wareid);
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取商品已选及可选颜色表
	protected void GetWarecolorList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long brandid = jsonObject.has("brandid") ? Long.parseLong(jsonObject.getString("brandid")) : -1;
		int rdbj = jsonObject.has("rdbj") ? Integer.parseInt(jsonObject.getString("rdbj")) : 0;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = " SELBJ DESC,COLORID";
		String strwhere = " b.statetag=1 and b.noused=0 ";
		if (!findbox.equals(""))
			strwhere += " and (b.COLORNAME like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase() + "%' or b.COLORNO like '%" + findbox.toUpperCase() + "%') ";
		String strwhere1 = strwhere;

		if (brandid > 0)
			strwhere1 += " and (b.brandid=" + brandid + " or b.brandid=0)";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Warecolor dal = new Warecolor();
		dal.setAccid(htp.getMaccid());
		dal.setWareid(wareid);
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, strwhere1, rdbj);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}
	// ===================================================

	// 删除指定付款记录id信息
	protected void DelPaycurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Paycurr dal = new Paycurr();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		// dal.setId(id);
		dal.setNoteno(noteno);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 更新指定付款记录id信息
	protected void UpdatePaycurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Paycurr dal = new Paycurr();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 新增付款记录
	protected void AddPaycurrRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Paycurr dal = new Paycurr();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		// dal.setStatetag(0);
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取指定付款记录id信息
	protected void GetPaycurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int showbalcurr = jsonObject.has("showbalcurr") ? Integer.parseInt(jsonObject.getString("showbalcurr")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";

		String strwhere = " a.noteno='" + noteno + "' and a.ACCID=" + htp.getMaccid();

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.provid,a.HANDNO,a.PAYID,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.PROVNAME,C.PAYNAME";
		if (showbalcurr == 1)// 要显示余额
		{
			if (htp.getHousezkbj() == 1) // 分店铺核算账款
				fieldlist += ",f_getpaybaltimex(to_char(a.notedate,'yyyy-mm-dd hh24:mi:ss'),a.accid,a.provid,a.houseid,'" + htp.getCalcdate() + "') as balcurr";
			else
				fieldlist += ",f_getpaybaltimex(to_char(a.notedate,'yyyy-mm-dd hh24:mi:ss'),a.accid,a.provid,0,'" + htp.getCalcdate() + "') as balcurr";
		}
		fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";
		fieldlist += ",decode(a.payid,0,'<折让>',c.payname) as payname0";

		Table tb = new Table();
		Paycurr dal = new Paycurr();

		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取付款记录列表
	protected void GetPaycurrList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : "";
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long payid = jsonObject.has("payid") ? Long.parseLong(jsonObject.getString("payid")) : 0;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int cxfs = jsonObject.has("cxfs") ? Integer.parseInt(jsonObject.getString("cxfs")) : -1;
		// cxfs:0=付款，1=折让，2=所有
		// String lastop = jsonObject.has("username") ?
		// jsonObject.getString("username") : "";
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		if (mindate.compareTo(htp.getAccdate()) < 0)
			mindate = htp.getAccdate();
		int qxbj = htp.getQxbj();
		String accbegindate = htp.getAccdate();// 账套开始使用日期
		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, accbegindate, maxday);
		mindate = mdv.getMindate();
		String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String sort = " notedate desc,id ";// +order;
		// sort += " " + order;
		String strwhere = " a.ACCID=" + htp.getMaccid() + " and (a.STATETAG=1 or a.STATETAG=0 and a.OPERANT='" + htp.getUsername() + "')";
		// cxfs:0=付款，1=折让，2=所有
		if (cxfs <= 0)
			strwhere += " and a.payid>0";
		else if (cxfs == 1)
			strwhere += " and a.payid=0";

		if (ywly < 2)
			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据

		if (!Func.isNull(findbox)) {
			strwhere += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.operant like '%" + findbox + "%' or b.provname like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase()
					+ "%' or C.PAYNAME like '%" + findbox + "%')";
		}
		if (provid > 0)
			strwhere += " and a.provid = " + provid;
		if (payid > 0)
			strwhere += " and a.payid = " + payid;
		if (houseid > 0)
			strwhere += " and a.houseid = " + houseid;
		if (!handno.equals(""))
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (!noteno.equals(""))
			strwhere += " and a.NOTENO like '%" + noteno + "%'";
		if (!operant.equals(""))
			strwhere += " and a.operant like '%" + operant + "%'";
		if (!remark.equals(""))
			strwhere += " and a.remark like '%" + remark + "%'";
		strwhere += "\n and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += "\n and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (qxbj == 1) // 1 启用权限控制
		{
			strwhere += "\n and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
			strwhere += " and (a.provid=0 or exists (select 1 from employeprov x where a.provid=x.provid and x.EPID=" + htp.getUserid() + "))";
		}
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.PROVID,a.HANDNO,a.PAYID,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.PROVNAME,C.PAYNAME";
		fieldlist += ",decode(a.payid,0,'<折让>',c.payname) as payname0";
		// fieldlist += ",decode(a.payid,0,-a.curr,a.curr) as curr0";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(curr),0) as totalcurr");
		qp.setCalcfield("case when To_Char(notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday");

		Table tb = new Table();
		Paycurr dal = new Paycurr();

		tb = dal.GetTable(qp, strwhere, fieldlist);

		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		// System.out.println(qp.getTotalString());
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString() + ",\"warning\":\"" + mess + "\""));

	}

	// 删除指定采购折让记录id信息
	protected void DelPaydiscByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int delbj = jsonObject.has("delbj") ? Integer.parseInt(jsonObject.getString("delbj")) : 0;
		//delbj=1,强制删除
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Paycurr dal = new Paycurr();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setFs(1);
		dal.setNoteno(noteno);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 更新指定采购折让记录id信息
	protected void UpdatePaydiscByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Paycurr dal = new Paycurr();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setFs(1);
		dal.setPayid((long) 0);
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 新增采购折让记录
	protected void AddPaydiscRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Paycurr dal = new Paycurr();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setFs(1);
		// dal.setPayid((long) 0);
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取指定采购折让记录id信息
	protected void GetPaydiscByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// int showbalcurr = jsonObject.has("showbalcurr") ?
		// Integer.parseInt(jsonObject.getString("showbalcurr")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";

		String strwhere = " a.noteno='" + noteno + "' and a.ACCID=" + htp.getMaccid();
		// if (!noteno.equals(""))
		// strwhere += " and a.noteno='" + noteno + "'";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.provid,a.HANDNO,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.PROVNAME";
		fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";

		Table tb = new Table();
		Paycurr dal = new Paycurr();
		dal.setFs(1);

		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取采购折让记录列表
	protected void GetPaydiscList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : "";
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		// long payid = jsonObject.has("payid") ?
		// Long.parseLong(jsonObject.getString("payid")) : 0;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		// String lastop = jsonObject.has("username") ?
		// jsonObject.getString("username") : "";
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		if (mindate.compareTo(htp.getAccdate()) < 0)
			mindate = htp.getAccdate();
		int qxbj = htp.getQxbj();
		// ==========================
		String accbegindate = htp.getAccdate();// 账套开始使用日期
		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, accbegindate, maxday);
		mindate = mdv.getMindate();
		String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String sort = " notedate desc,id ";// +order;
		// sort += " " + order;
		String strwhere = " a.payid=0 and a.ACCID=" + htp.getMaccid() + " and (a.STATETAG=1 or a.STATETAG=0 and a.OPERANT='" + htp.getUsername() + "')";
		if (ywly < 2)
			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据

		if (!Func.isNull(findbox)) {
			strwhere += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.operant like '%" + findbox + "%' or b.provname like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase() + "%' )";
		}
		if (provid > 0)
			strwhere += " and a.provid = " + provid;
		// if (payid > 0)
		// strwhere += " and a.payid = " + payid;
		if (houseid > 0)
			strwhere += " and a.houseid = " + houseid;
		if (!handno.equals(""))
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (!noteno.equals(""))
			strwhere += " and a.NOTENO like '%" + noteno + "%'";
		if (!operant.equals(""))
			strwhere += " and a.operant like '%" + operant + "%'";
		if (!remark.equals(""))
			strwhere += " and a.remark like '%" + remark + "%'";
		strwhere += "\n and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += "\n and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (qxbj == 1) // 1 启用权限控制
			strwhere += "\n and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.PROVID,a.HANDNO,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.PROVNAME";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(curr),0) as totalcurr");
		qp.setCalcfield("case when To_Char(notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday");
		Table tb = new Table();
		Paycurr dal = new Paycurr();
		dal.setFs(1);

		tb = dal.GetTable(qp, strwhere, fieldlist);

		// System.out.println(qp.getTotalString());
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString() + ",\"warning\":\"" + mess + "\""));

	}

	// ====================================

	// 删除指定采购费用记录id信息
	protected void DelPaycostByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int delbj = jsonObject.has("delbj") ? Integer.parseInt(jsonObject.getString("delbj")) : 0;
		//delbj=1,强制删除
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Paycost dal = new Paycost();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		// dal.setId(id);
		dal.setNoteno(noteno);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 更新指定采购费用记录id信息
	protected void UpdatePaycostByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Paycost dal = new Paycost();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 新增采购费用记录
	protected void AddPaycostRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Paycost dal = new Paycost();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		// dal.setStatetag(0);
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取指定采购费用记录id信息
	protected void GetPaycostByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// int showbalcurr = jsonObject.has("showbalcurr") ?
		// Integer.parseInt(jsonObject.getString("showbalcurr")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";

		String strwhere = " a.noteno='" + noteno + "' and a.ACCID=" + htp.getMaccid();

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.PROVID,a.CGID,a.HANDNO,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,b.PROVNAME,C.CGNAME";
		fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";

		Table tb = new Table();
		Paycost dal = new Paycost();

		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取采购费用记录列表
	protected void GetPaycostList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : "";
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long cgid = jsonObject.has("cgid") ? Long.parseLong(jsonObject.getString("cgid")) : 0;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		// String lastop = jsonObject.has("username") ?
		// jsonObject.getString("username") : "";
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		if (mindate.compareTo(htp.getAccdate()) < 0)
			mindate = htp.getAccdate();
		int qxbj = htp.getQxbj();
		String accbegindate = htp.getAccdate();// 账套开始使用日期
		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, accbegindate, maxday);
		mindate = mdv.getMindate();
		String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String sort = " notedate desc,id ";// +order;
		// sort += " " + order;
		String strwhere = " a.ACCID=" + htp.getMaccid() + " and (a.STATETAG=1 or a.STATETAG=0 and a.OPERANT='" + htp.getUsername() + "')";
		if (ywly < 2)
			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据

		if (!Func.isNull(findbox)) {
			strwhere += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.operant like '%" + findbox + "%' or b.provname like '%" + findbox //
					+ "%' or b.shortname like '%" + findbox.toUpperCase() + "%' or c.cgname like '%" + findbox + "%')";
		}
		if (provid > 0)
			strwhere += " and a.provid = " + provid;
		if (cgid > 0)
			strwhere += " and a.cgid = " + cgid;
		if (houseid > 0)
			strwhere += " and a.houseid = " + houseid;
		if (!handno.equals(""))
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (!noteno.equals(""))
			strwhere += " and a.NOTENO like '%" + noteno + "%'";
		if (!operant.equals(""))
			strwhere += " and a.operant like '%" + operant + "%'";
		if (!remark.equals(""))
			strwhere += " and a.remark like '%" + remark + "%'";
		strwhere += "\n and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += "\n and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (qxbj == 1) // 1 启用权限控制
		{
			strwhere += "\n and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
			strwhere += " and (a.provid=0 or exists (select 1 from employeprov x where a.provid=x.provid and x.EPID=" + htp.getUserid() + "))";
		}
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.PROVID,a.CGID,a.HANDNO,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.PROVNAME,C.CGNAME";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(curr),0) as totalcurr");
		qp.setCalcfield("case when To_Char(notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday");
		Table tb = new Table();
		Paycost dal = new Paycost();

		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		// System.out.println(qp.getTotalString());
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString() + ",\"warning\":\"" + mess + "\""));

	}

	// ==================================================
	// 删除指定期初应付记录id信息
	protected void DelFirstPaycurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		//		int delbj = jsonObject.has("delbj") ? Integer.parseInt(jsonObject.getString("delbj")) : 0;
		//delbj=1,强制删除
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Firstpaycurr dal = new Firstpaycurr();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setNoteno(noteno);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 更新指定期初应付记录id信息
	protected void UpdateFirstPaycurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Firstpaycurr dal = new Firstpaycurr();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 新增期初应付记录
	protected void AddFirstPaycurrRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Firstpaycurr dal = new Firstpaycurr();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		// dal.setStatetag(0);
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取指定期初应付记录id信息
	protected void GetFirstPaycurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// int showbalcurr = jsonObject.has("showbalcurr") ?
		// Integer.parseInt(jsonObject.getString("showbalcurr")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";

		String strwhere = " a.noteno='" + noteno + "' and a.ACCID=" + htp.getMaccid();
		// if (!noteno.equals(""))
		// strwhere += " and a.noteno='" + noteno + "'";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.PROVID,a.HANDNO,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.PROVNAME";
		fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";

		Table tb = new Table();
		Firstpaycurr dal = new Firstpaycurr();

		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取期初应付记录列表
	protected void GetFirstPaycurrList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : "";
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		// long payid = jsonObject.has("payid") ?
		// Long.parseLong(jsonObject.getString("payid")) : 0;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		// String lastop = jsonObject.has("username") ?
		// jsonObject.getString("username") : "";
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		if (mindate.compareTo(htp.getAccdate()) < 0)
			mindate = htp.getAccdate();
		int qxbj = htp.getQxbj();
		// ==========================
		String accbegindate = htp.getAccdate();// 账套开始使用日期
		int maxday = htp.getMaxday();

		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, accbegindate, maxday);
		mindate = mdv.getMindate();
		String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String sort = " notedate desc,id ";// +order;
		// sort += " " + order;
		String strwhere = " a.ACCID=" + htp.getMaccid() + " and (a.STATETAG=1 or a.STATETAG=0 and a.OPERANT='" + htp.getUsername() + "')";

		if (ywly < 2)
			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据

		if (!Func.isNull(findbox)) {
			strwhere += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.operant like '%" + findbox + "%' or b.provname like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase() + "%' )";
		}
		if (provid > 0)
			strwhere += " and a.provid = " + provid;
		if (houseid > 0)
			strwhere += " and a.houseid = " + houseid;
		if (!handno.equals(""))
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (!noteno.equals(""))
			strwhere += " and a.NOTENO like '%" + noteno + "%'";
		if (!operant.equals(""))
			strwhere += " and a.operant like '%" + operant + "%'";
		if (!remark.equals(""))
			strwhere += " and a.remark like '%" + remark + "%'";
		strwhere += "\n and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += "\n and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (qxbj == 1) // 1 启用权限控制
		{
			strwhere += "\n and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
			strwhere += " and (a.provid=0 or exists (select 1 from employeprov x where a.provid=x.provid and x.EPID=" + htp.getUserid() + "))";
		}
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.PROVID,a.HANDNO,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.PROVNAME";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(curr),0) as totalcurr");
		qp.setCalcfield("case when To_Char(notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday");
		Table tb = new Table();
		Firstpaycurr dal = new Firstpaycurr();

		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		// System.out.println(qp.getTotalString());
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString() + ",\"warning\":\"" + mess + "\""));

	}

	// ===================================================
	// 删除指定收款记录id信息
	protected void DelIncomecurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		//		int delbj = jsonObject.has("delbj") ? Integer.parseInt(jsonObject.getString("delbj")) : 0;
		//delbj=1,强制删除
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Incomecurr dal = new Incomecurr();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		// dal.setId(id);
		dal.setNoteno(noteno);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 删除指定客户缴款记录id信息
	protected void DelCustcurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Custcurr dal = new Custcurr();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		// dal.setId(id);
		dal.setNoteno(noteno);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 更新指定收款记录id信息
	protected void UpdateIncomecurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Incomecurr dal = new Incomecurr();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 更新指定客户缴款记录id信息
	protected void UpdateCustcurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Custcurr dal = new Custcurr();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 新增收款记录
	protected void AddIncomecurrRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Incomecurr dal = new Incomecurr();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		//配货单收款时必须传入phno
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		// dal.setStatetag(0);
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 新增客户缴款记录
	protected void AddCustcurrRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Custcurr dal = new Custcurr();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		// dal.setStatetag(0);
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取指定收款记录id信息
	protected void GetIncomecurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int showbalcurr = jsonObject.has("showbalcurr") ? Integer.parseInt(jsonObject.getString("showbalcurr")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int housezkbj = htp.getHousezkbj(); // 1=销售帐款分店铺核对

		String strwhere = " a.noteno='" + noteno + "' and a.ACCID=" + htp.getMaccid();
		// if (!noteno.equals(""))
		// strwhere += " and a.noteno='" + noteno + "'";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.CUSTID,a.HANDNO,a.PAYID,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.CUSTNAME,C.PAYNAME";
		if (showbalcurr == 1)// 要显示余额
		{
			if (housezkbj == 1)
				fieldlist += ",f_getincomebaltimex(to_char(a.notedate,'yyyy-mm-dd hh24:mi:ss'),a.accid,a.custid,a.houseid,'" + htp.getCalcdate() + "') as balcurr";
			else
				fieldlist += ",f_getincomebaltimex(to_char(a.notedate,'yyyy-mm-dd hh24:mi:ss'),a.accid,a.custid,0,'" + htp.getCalcdate() + "') as balcurr";
		}
		fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";
		fieldlist += ",decode(a.payid,0,'<折让>',c.payname) as payname0";
		Table tb = new Table();
		Incomecurr dal = new Incomecurr();

		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取指定客户缴款记录id信息
	protected void GetCustcurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// int showbalcurr = jsonObject.has("showbalcurr") ?
		// Integer.parseInt(jsonObject.getString("showbalcurr")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		// int housezkbj = htp.getHousezkbj(); // 1=销售帐款分店铺核对

		String strwhere = " a.noteno='" + noteno + "' and a.ACCID=" + htp.getMaccid();
		// if (!noteno.equals(""))
		// strwhere += " and a.noteno='" + noteno + "'";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.CUSTID,a.HANDNO,a.PAYID,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.CUSTNAME,C.PAYNAME";

		Table tb = new Table();
		Custcurr dal = new Custcurr();

		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 删除指定销售出库费用明细id信息
	protected void DelWareoutcostByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		Wareoutcost dal = new Wareoutcost();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setId(id);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 删除指定采购入库费用明细id信息
	protected void DelWareincostByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		Wareincost dal = new Wareincost();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setId(id);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 新增批发出库费用记录
	protected void AddWareoutcostRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Wareoutcost dal = new Wareoutcost();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 新增采购入库费用记录
	protected void AddWareincostRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Wareincost dal = new Wareincost();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 保存采购入库费用明细 新
	protected void SaveWareincost(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Wareincost dal = new Wareincost();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		WriteResult(response, dal.Save(jsonObject), dal.getErrmess());
	}

	// 获取采购入库费用明细列表 新
	protected void ListWareincost(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int all = jsonObject.has("all") ? Integer.parseInt(jsonObject.getString("all")) : 0;
		// all:1=显示所有费用项目，增加时用
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		QueryParam qp = new QueryParam(page, pagesize, "cgid");
		Wareincost dal = new Wareincost();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		Table tb = new Table();
		tb = dal.GetTable(qp, all);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 保存批发出库费用明细 新
	protected void SaveWareoutcost(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Wareoutcost dal = new Wareoutcost();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		WriteResult(response, dal.Save(jsonObject), dal.getErrmess());

	}

	// 获取批发出库费用明细列表 新
	protected void ListWareoutcost(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int all = jsonObject.has("all") ? Integer.parseInt(jsonObject.getString("all")) : 0;
		// all:1=显示所有费用项目，增加时用
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		QueryParam qp = new QueryParam(page, pagesize, "cgid");
		Wareoutcost dal = new Wareoutcost();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		Table tb = new Table();
		tb = dal.GetTable(qp, all);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取批发出库费用明细列表
	protected void GetWareoutcostList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String sort = " id";
		String strwhere = " a.accid=" + htp.getMaccid() + " and a.noteno='" + noteno + "'";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.CGID,A.CURR,B.CGNAME";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Wareoutcost dal = new Wareoutcost();
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取采购入库费用明细列表
	protected void GetWareincostList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String sort = " id";
		String strwhere = " a.accid=" + htp.getMaccid() + " and a.noteno='" + noteno + "'";

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.CGID,A.CURR,B.CGNAME";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Wareincost dal = new Wareincost();
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取收款记录列表
	protected void GetIncomecurrList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : "";
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long payid = jsonObject.has("payid") ? Long.parseLong(jsonObject.getString("payid")) : 0;
		long handmanid = jsonObject.has("handmanid") ? Long.parseLong(jsonObject.getString("handmanid")) : 0;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int cxfs = jsonObject.has("cxfs") ? Integer.parseInt(jsonObject.getString("cxfs")) : -1;
		// cxfs:0=收款，1=折让，2=所有
		// String lastop = jsonObject.has("username") ?
		// jsonObject.getString("username") : "";
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		if (mindate.compareTo(htp.getAccdate()) < 0)
			mindate = htp.getAccdate();
		int qxbj = htp.getQxbj();

		// ==========================
		String accbegindate = htp.getAccdate();// 账套开始使用日期
		int maxday = htp.getMaxday();
		// try {
		// maxday = Integer.parseInt(Func.subString(rolepublic, 4, 3));
		// } catch (Exception e) {
		// maxday = 0;
		// }

		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, accbegindate, maxday);
		mindate = mdv.getMindate();
		String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String sort = " notedate desc,id ";// +order;
		// sort += " " + order;
		String strwhere = " a.ACCID=" + htp.getMaccid() + " and (a.STATETAG=1 or a.STATETAG=0 and a.OPERANT='" + htp.getUsername() + "')";
		// cxfs:0=收款，1=折让，2=所有
		if (cxfs <= 0)
			strwhere += " and a.payid>0";
		else if (cxfs == 1)
			strwhere += " and a.payid=0";

		if (ywly < 2)
			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据

		if (!Func.isNull(findbox)) {
			strwhere += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.operant like '%" + findbox + "%' or b.custname like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase()
					+ "%' or C.PAYNAME like '%" + findbox + "%')";
		}
		if (custid > 0)
			strwhere += " and a.custid = " + custid;
		if (handmanid > 0)
			strwhere += " and a.handmanid = " + handmanid;
		if (payid > 0)
			strwhere += " and a.payid = " + payid;
		if (houseid > 0)
			strwhere += " and a.houseid = " + houseid;
		if (!handno.equals(""))
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (!noteno.equals(""))
			strwhere += " and a.NOTENO like '%" + noteno + "%'";
		if (!operant.equals(""))
			strwhere += " and a.operant like '%" + operant + "%'";
		if (!remark.equals(""))
			strwhere += " and a.remark like '%" + remark + "%'";
		strwhere += "\n and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += "\n and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (qxbj == 1) // 1 启用权限控制
		{
			strwhere += "\n and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
			strwhere += " and (a.custid=0 or exists (select 1 from employecust x where a.custid=x.custid and x.EPID=" + htp.getUserid() + "))";
		}
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.CUSTID,a.HANDNO,a.PAYID,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.CUSTNAME,C.PAYNAME";
		fieldlist += ",decode(a.payid,0,'<折让>',c.payname) as payname0";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(curr),0) as totalcurr");
		qp.setCalcfield("case when To_Char(notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday");

		Table tb = new Table();
		Incomecurr dal = new Incomecurr();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		// System.out.println(qp.getTotalString());
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString() + ",\"warning\":\"" + mess + "\""));

	}

	// 获取客户缴款记录列表
	protected void GetCustcurrList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : "";
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long payid = jsonObject.has("payid") ? Long.parseLong(jsonObject.getString("payid")) : 0;
		// long handmanid = jsonObject.has("handmanid") ?
		// Long.parseLong(jsonObject.getString("handmanid")) : 0;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		// String lastop = jsonObject.has("username") ?
		// jsonObject.getString("username") : "";
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		if (mindate.compareTo(htp.getAccdate()) < 0)
			mindate = htp.getAccdate();
		int qxbj = htp.getQxbj();

		// ==========================
		String accbegindate = htp.getAccdate();// 账套开始使用日期
		int maxday = htp.getMaxday();
		// try {
		// maxday = Integer.parseInt(Func.subString(rolepublic, 4, 3));
		// } catch (Exception e) {
		// maxday = 0;
		// }

		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, accbegindate, maxday);
		mindate = mdv.getMindate();
		String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String sort = " notedate desc,id ";// +order;
		// sort += " " + order;
		String strwhere = " a.payid>0 and a.ACCID=" + htp.getMaccid() + " and (a.STATETAG=1 or a.STATETAG=0 and a.OPERANT='" + htp.getUsername() + "')";
		if (ywly < 2)
			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据

		if (!Func.isNull(findbox)) {
			strwhere += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.operant like '%" + findbox + "%' or b.custname like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase()
					+ "%' or C.PAYNAME like '%" + findbox + "%')";
		}
		if (custid > 0)
			strwhere += " and a.custid = " + custid;
		// if (handmanid > 0)
		// strwhere += " and a.handmanid = " + handmanid;
		if (payid > 0)
			strwhere += " and a.payid = " + payid;
		if (houseid > 0)
			strwhere += " and a.houseid = " + houseid;
		if (!handno.equals(""))
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (!noteno.equals(""))
			strwhere += " and a.NOTENO like '%" + noteno + "%'";
		if (!operant.equals(""))
			strwhere += " and a.operant like '%" + operant + "%'";
		if (!remark.equals(""))
			strwhere += " and a.remark like '%" + remark + "%'";
		strwhere += "\n and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += "\n and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (qxbj == 1) // 1 启用权限控制
			strwhere += "\n and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.CUSTID,a.HANDNO,a.PAYID,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.CUSTNAME,C.PAYNAME";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(curr),0) as totalcurr");
		qp.setCalcfield("case when To_Char(notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday");
		Table tb = new Table();
		Custcurr dal = new Custcurr();

		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		// System.out.println(qp.getTotalString());
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString() + ",\"warning\":\"" + mess + "\""));

	}

	// ==================================================
	// 删除指定收款折让记录id信息
	protected void DelIncomediscByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		//		int delbj = jsonObject.has("delbj") ? Integer.parseInt(jsonObject.getString("delbj")) : 0;
		//delbj=1,强制删除

		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Incomecurr dal = new Incomecurr();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setFs(1);
		dal.setNoteno(noteno);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 更新指定收款折让记录id信息
	protected void UpdateIncomediscByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Incomecurr dal = new Incomecurr();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setFs(1);
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 新增收款折让记录
	protected void AddIncomediscRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Incomecurr dal = new Incomecurr();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		dal.setFs(1);
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取指定收款折让记录id信息
	protected void GetIncomediscByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// int showbalcurr = jsonObject.has("showbalcurr") ?
		// Integer.parseInt(jsonObject.getString("showbalcurr")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";

		String strwhere = " a.noteno='" + noteno + "' and a.ACCID=" + htp.getMaccid();
		// if (!noteno.equals(""))
		// strwhere += " and a.noteno='" + noteno + "'";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.CUSTID,a.HANDNO,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.CUSTNAME";
		fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";
		Table tb = new Table();
		Incomecurr dal = new Incomecurr();
		dal.setFs(1);

		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取收款折让记录列表
	protected void GetIncomediscList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : "";
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		// long payid = jsonObject.has("payid") ?
		// Long.parseLong(jsonObject.getString("payid")) : 0;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		// String lastop = jsonObject.has("username") ?
		// jsonObject.getString("username") : "";
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		if (mindate.compareTo(htp.getAccdate()) < 0)
			mindate = htp.getAccdate();
		int qxbj = htp.getQxbj();
		// ==========================
		String accbegindate = htp.getAccdate();// 账套开始使用日期
		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, accbegindate, maxday);
		mindate = mdv.getMindate();
		String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String sort = " notedate desc,id ";// +order;
		// sort += " " + order;
		String strwhere = " a.payid=0 and a.ACCID=" + htp.getMaccid() + " and (a.STATETAG=1 or a.STATETAG=0 and a.OPERANT='" + htp.getUsername() + "')";
		if (ywly < 2)
			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据

		if (!Func.isNull(findbox)) {
			strwhere += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.operant like '%" + findbox + "%' or b.custname like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase() + "%' )";
		}
		if (custid > 0)
			strwhere += " and a.custid = " + custid;
		// if (payid > 0)
		// strwhere += " and a.payid = " + payid;
		if (houseid > 0)
			strwhere += " and a.houseid = " + houseid;
		if (!handno.equals(""))
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (!noteno.equals(""))
			strwhere += " and a.NOTENO like '%" + noteno + "%'";
		if (!operant.equals(""))
			strwhere += " and a.operant like '%" + operant + "%'";
		if (!remark.equals(""))
			strwhere += " and a.remark like '%" + remark + "%'";
		strwhere += "\n and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += "\n and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (qxbj == 1) // 1 启用权限控制
			strwhere += "\n and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.CUSTID,a.HANDNO,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.CUSTNAME";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(curr),0) as totalcurr");
		qp.setCalcfield("case when To_Char(notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday");
		Table tb = new Table();
		Incomecurr dal = new Incomecurr();
		dal.setFs(1);

		tb = dal.GetTable(qp, strwhere, fieldlist);

		// System.out.println(qp.getTotalString());
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString() + ",\"warning\":\"" + mess + "\""));

	}

	// ==================================================
	// 删除指定期初应付记录id信息
	protected void DelFirstIncomecurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int delbj = jsonObject.has("delbj") ? Integer.parseInt(jsonObject.getString("delbj")) : 0;
		//delbj=1,强制删除
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Firstincomecurr dal = new Firstincomecurr();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setNoteno(noteno);
		WriteResult(response, dal.Delete(delbj), dal.getErrmess());
	}

	// 更新指定期初应付记录id信息
	protected void UpdateFirstIncomecurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Firstincomecurr dal = new Firstincomecurr();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 新增期初应付记录
	protected void AddFirstIncomecurrRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Firstincomecurr dal = new Firstincomecurr();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		// dal.setStatetag(0);
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取指定期初应付记录id信息
	protected void GetFirstIncomecurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";

		String strwhere = " a.noteno='" + noteno + "' and a.ACCID=" + htp.getMaccid();
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.CUSTID,a.HANDNO,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.CUSTNAME";
		fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";
		Table tb = new Table();
		Firstincomecurr dal = new Firstincomecurr();

		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取期初应付记录列表
	protected void GetFirstIncomecurrList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : "";
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		// long payid = jsonObject.has("payid") ?
		// Long.parseLong(jsonObject.getString("payid")) : 0;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		// String lastop = jsonObject.has("username") ?
		// jsonObject.getString("username") : "";
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		if (mindate.compareTo(htp.getAccdate()) < 0)
			mindate = htp.getAccdate();
		int qxbj = htp.getQxbj();

		// ==========================
		String accbegindate = htp.getAccdate();// 账套开始使用日期
		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, accbegindate, maxday);
		mindate = mdv.getMindate();
		String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String sort = " notedate desc,id ";// +order;
		// sort += " " + order;
		String strwhere = " a.ACCID=" + htp.getMaccid() + " and (a.STATETAG=1 or a.STATETAG=0 and a.OPERANT='" + htp.getUsername() + "')";
		if (ywly < 2)
			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据

		if (!Func.isNull(findbox)) {
			strwhere += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.operant like '%" + findbox + "%' or b.custname like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase() + "%' )";
		}
		if (custid > 0)
			strwhere += " and a.custid = " + custid;
		// if (payid > 0)
		// strwhere += " and a.payid = " + payid;
		if (houseid > 0)
			strwhere += " and a.houseid = " + houseid;
		if (!handno.equals(""))
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (!noteno.equals(""))
			strwhere += " and a.NOTENO like '%" + noteno + "%'";
		if (!operant.equals(""))
			strwhere += " and a.operant like '%" + operant + "%'";
		if (!remark.equals(""))
			strwhere += " and a.remark like '%" + remark + "%'";
		strwhere += "\n and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += "\n and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (qxbj == 1) // 1 启用权限控制
		{
			strwhere += "\n and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
			strwhere += " and (a.custid=0 or exists (select 1 from employecust x where a.custid=x.custid and x.EPID=" + htp.getUserid() + "))";
		}
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.CUSTID,a.HANDNO,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.CUSTNAME";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(curr),0) as totalcurr");
		qp.setCalcfield("case when To_Char(notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday");
		Table tb = new Table();
		Firstincomecurr dal = new Firstincomecurr();

		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		// System.out.println(qp.getTotalString());
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString() + ",\"warning\":\"" + mess + "\""));

	}

	// ==================================
	// 删除指定销售费用记录id信息
	protected void DelIncomecostByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		//		int delbj = jsonObject.has("delbj") ? Integer.parseInt(jsonObject.getString("delbj")) : 0;
		//delbj=1,强制删除
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Incomecost dal = new Incomecost();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		// dal.setId(id);
		dal.setNoteno(noteno);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 更新指定销售费用记录id信息
	protected void UpdateIncomecostByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Incomecost dal = new Incomecost();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 新增销售费用记录
	protected void AddIncomecostRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Incomecost dal = new Incomecost();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		// dal.setStatetag(1);
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取指定销售费用记录id信息
	protected void GetIncomecostByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// int showbalcurr = jsonObject.has("showbalcurr") ?
		// Integer.parseInt(jsonObject.getString("showbalcurr")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String strwhere = " a.noteno='" + noteno + "' and a.ACCID=" + htp.getMaccid();
		// if (!noteno.equals(""))
		// strwhere += " and a.noteno='" + noteno + "'";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.CUSTID,a.HANDNO,a.CGID,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.CUSTNAME,C.CGNAME";
		fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";

		Table tb = new Table();
		Incomecost dal = new Incomecost();

		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取销售费用记录列表
	protected void GetIncomecostList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : "";
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		// long payid = jsonObject.has("payid") ?
		// Long.parseLong(jsonObject.getString("payid")) : 0;
		long cgid = jsonObject.has("cgid") ? Long.parseLong(jsonObject.getString("cgid")) : 0;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		// String lastop = jsonObject.has("username") ?
		// jsonObject.getString("username") : "";
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		if (mindate.compareTo(htp.getAccdate()) < 0)
			mindate = htp.getAccdate();
		int qxbj = htp.getQxbj();
		// ==========================
		String accbegindate = htp.getAccdate();// 账套开始使用日期
		int maxday = htp.getMaxday();

		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, accbegindate, maxday);
		mindate = mdv.getMindate();
		String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String sort = " notedate desc,id ";// +order;
		// sort += " " + order;
		String strwhere = " a.ACCID=" + htp.getMaccid() + " and (a.STATETAG=1 or a.STATETAG=0 and a.OPERANT='" + htp.getUsername() + "')";
		if (ywly < 2)
			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据

		if (!Func.isNull(findbox)) {
			strwhere += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.operant like '%" + findbox + "%' or b.custname like '%" + findbox //
					+ "%' or b.shortname like '%" + findbox.toUpperCase() + "%' or c.cgname like '%" + findbox + "%')";
		}
		if (custid > 0)
			strwhere += " and a.custid = " + custid;
		if (cgid > 0)
			strwhere += " and a.cgid = " + cgid;
		if (houseid > 0)
			strwhere += " and a.houseid = " + houseid;
		if (!handno.equals(""))
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (!noteno.equals(""))
			strwhere += " and a.NOTENO like '%" + noteno + "%'";
		if (!operant.equals(""))
			strwhere += " and a.operant like '%" + operant + "%'";
		if (!remark.equals(""))
			strwhere += " and a.remark like '%" + remark + "%'";
		strwhere += "\n and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += "\n and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (qxbj == 1) // 1 启用权限控制
		{
			strwhere += "\n and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
			strwhere += " and (a.custid=0 or exists (select 1 from employecust x where a.custid=x.custid and x.EPID=" + htp.getUserid() + "))";
		}
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,a.CUSTID,a.HANDNO,a.CGID,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.CUSTNAME,C.CGNAME";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(curr),0) as totalcurr");
		qp.setCalcfield("case when To_Char(notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday");
		Table tb = new Table();
		Incomecost dal = new Incomecost();

		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		// System.out.println(qp.getTotalString());
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString() + ",\"warning\":\"" + mess + "\""));

	}

	// ====================================

	// 删除指定店铺费用记录id信息
	protected void DelHousecostByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Housecost dal = new Housecost();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setNoteno(noteno);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 更新指定店铺费用记录id信息
	protected void UpdateHousecostByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Housecost dal = new Housecost();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 新增店铺费用记录
	protected void AddHousecostRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Housecost dal = new Housecost();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		// dal.setStatetag(1);
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取指定店铺费用记录id信息
	protected void GetHousecostByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// int showbalcurr = jsonObject.has("showbalcurr") ?
		// Integer.parseInt(jsonObject.getString("showbalcurr")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String strwhere = " a.noteno='" + noteno + "' and a.ACCID=" + htp.getMaccid();
		// if (!noteno.equals(""))
		// strwhere += " and a.noteno='" + noteno + "'";
		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,A.FS,a.HOUSEID,a.CGID,a.HANDNO,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.HOUSENAME,C.CGNAME,A.PAYID,D.PAYNAME";
		fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";
		Table tb = new Table();
		Housecost dal = new Housecost();

		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取店铺费用记录列表
	protected void GetHousecostList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : "";
		long payid = jsonObject.has("payid") ? Long.parseLong(jsonObject.getString("payid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long cgid = jsonObject.has("cgid") ? Long.parseLong(jsonObject.getString("cgid")) : 0;
		long dptid = jsonObject.has("dptid") ? Long.parseLong(jsonObject.getString("dptid")) : 0;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int fs = jsonObject.has("fs") ? Integer.parseInt(jsonObject.getString("fs")) : 2;
		// String lastop = jsonObject.has("username") ?
		// jsonObject.getString("username") : "";
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		if (mindate.compareTo(htp.getAccdate()) < 0)
			mindate = htp.getAccdate();
		int qxbj = htp.getQxbj();
		String accbegindate = htp.getAccdate();// 账套开始使用日期
		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, accbegindate, maxday);
		mindate = mdv.getMindate();
		String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String sort = " notedate desc,id ";// +order;
		// sort += " " + order;
		String strwhere = " a.payid>0 and a.ACCID=" + htp.getMaccid() + " and (a.STATETAG=1 or a.STATETAG=0 and a.OPERANT='" + htp.getUsername() + "')";
		if (ywly < 2)
			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据
		if (fs < 2)
			strwhere += " and a.fs=" + fs;

		if (!Func.isNull(findbox)) {
			strwhere += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.operant like '%" + findbox//
					+ "%' or b.housename like '%" + findbox + "%' or c.cgname like '%" + findbox + "%' or d.payname like '%" + findbox + "%')";
		}
		if (dptid > 0)
			strwhere += " and a.dptid = " + dptid;
		if (payid > 0)
			strwhere += " and a.payid = " + payid;
		if (cgid > 0)
			strwhere += " and a.cgid = " + cgid;
		if (houseid > 0)
			strwhere += " and a.houseid = " + houseid;
		if (!handno.equals(""))
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (!noteno.equals(""))
			strwhere += " and a.NOTENO like '%" + noteno + "%'";
		if (!operant.equals(""))
			strwhere += " and a.operant like '%" + operant + "%'";
		if (!remark.equals(""))
			strwhere += " and a.remark like '%" + remark + "%'";
		strwhere += "\n and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += "\n and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (qxbj == 1) // 1 启用权限控制
			strwhere += "\n and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";

		if (fieldlist.equals("*") || fieldlist.equals(""))
			fieldlist = "a.ID,a.ACCID,a.NOTENO,a.NOTEDATE,A.FS,a.HOUSEID,a.CGID,a.HANDNO,a.CURR,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTOP,a.LASTDATE,B.HOUSENAME,C.CGNAME,A.PAYID,D.PAYNAME";

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(decode(fs,0,curr,-curr)),0) as totalcurr");
		qp.setCalcfield("case when To_Char(notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday");
		Table tb = new Table();
		Housecost dal = new Housecost();

		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}

		// System.out.println(qp.getTotalString());
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString() + ",\"warning\":\"" + mess + "\""));

	}

	// ===================================================
	// 扫二维码获取销售单信息。拉卡拉
	// protected void GetSalebyTwobarcode(HttpServletResponse response, HttpInfo
	// htp) throws ServletException, IOException {
	// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
	// String notenostr = jsonObject.has("notenostr") ?
	// jsonObject.getString("notenostr") : "";
	//
	// }
	// ===========================================
	/// <summary>
	/// 同步我的供应商卖家的基础资料记录(下载卖家基础资料)同步供应商
	/// </summary>
	private String Func_DownSellerparams(long selleraccid, long buyeraccid, String lastop, int priceprec, int fs) {
		// fs:0=同步基础资料 1=同步价格 2=同步商品图片 3=处理默认颜色及尺码 4=所有 5=0或1
		String qry = "declare ";
		qry += "\n     v_accid number(10); ";
		qry += "\n     v_buyeraccid number(10); ";
		qry += "\n     v_lastop varchar2(20); ";
		qry += "\n     v_accname varchar2(12); ";
		qry += "\n     v_pricetype number(2); ";
		qry += "\n     v_wareid number(10); ";
		qry += "\n     v_provid number(10); ";
		qry += "\n     v_custid number(10); ";
		qry += "\n     v_count number(10); ";
		qry += "\n     v_discount number(10,4); ";
		qry += "\n     v_retcs varchar2(200); ";
		qry += "\n     v_groupno varchar2(40);";
		qry += "\n     v_sizename varchar2(40);";
		qry += "\n     v_sizeno varchar2(10);";
		qry += "\n   begin ";
		qry += "\n   v_provid:=0; ";
		if (fs == 0 || fs == 1 || fs == 4 || fs == 5)// 1=同步价格  查找买家在卖家中的客户id,取客户价格方式
		{
			qry += "\n     begin";
			qry += "\n       select a.buyprovid,b.pricetype,b.discount,a.sellcustid into v_provid,v_pricetype,v_discount,v_custid from accconnect a join customer b on a.sellcustid=b.custid where sellaccid=" //
					+ selleraccid + " and buyaccid=" + buyeraccid + "; ";
			qry += "\n     EXCEPTION WHEN NO_DATA_FOUND THEN";
			// 未建客户资料
			// qry += " v_pricetype:=0; v_discount:=0; ";
			qry += "\n       v_retcs:= '0供应商未指定我的客户资料，不允许同步！'; ";
			qry += "\n       goto exit; ";
			qry += "\n     end; ";
		}
		if (fs == 0 || fs == 4 || fs == 5) // 同步基础资料
		{
			qry += "\n     select accname into v_accname from accreg where accid=" + selleraccid + ";";
			// --更新品牌
			qry += "\n     v_count:=0;";
			qry += "\n     declare cursor cur_data is";
			qry += "\n       select a.brandname,a.brandid,a.shortname from brand a";
			qry += "\n       where a.accid=" + selleraccid + " and a.statetag=1 and a.noused=0 ";
			qry += "\n       and exists (select 1 from buyerbrand a1 where a1.accid=" + selleraccid + " and a1.buyaccid=" + buyeraccid + " and a1.brandid=a.brandid) ";
			qry += "\n       and not exists (select 1 from brand a2 where a2.accid=" + buyeraccid + " and a2.accid1=" + selleraccid + " and a2.brandid1=a.brandid); ";
			qry += "\n       v_row cur_data%rowtype;";
			qry += "\n     begin";
			qry += "\n       for v_row in cur_data loop";
			qry += "\n          insert into brand (brandid,brandname,shortname,accid,lyfs,accid1,brandid1,noused,statetag,lastop,lastdate)";
			qry += "\n          values (brand_brandid.nextval,v_row.brandname,v_row.shortname," + buyeraccid + ",1," + selleraccid + ",v_row.brandid,0,1,'sysdba',sysdate);";
			qry += "\n          v_count:=v_count+1;";
			qry += "\n          if v_count>1000 then ";
			qry += "\n             commit;";
			qry += "\n             v_count:=0;";
			qry += "\n          end if;";
			qry += "\n       end loop;";
			qry += "\n     end;";
			qry += "\n     commit;";

			// --更新颜色编码
			qry += "\n    v_count:=0;";
			qry += "\n    declare cursor cur_data is ";
			qry += "\n       select a.colorid,a.colorname,a.colorno," + buyeraccid + ",1," + selleraccid + ",a.shortname from colorcode a ";
			qry += "\n       where a.accid=" + selleraccid + " and a.statetag=1 and a.noused=0 ";
			qry += "\n       and exists ( ";
			qry += "\n         select 1 from warecolor a1  ";
			qry += "\n         join warecode b1 on a1.wareid=b1.wareid ";
			qry += "\n         join buyerbrand c1 on b1.brandid=c1.brandid ";
			qry += "\n         where b1.accid=" + selleraccid + " and c1.accid=" + selleraccid + " and c1.buyaccid=" + buyeraccid + " and a1.colorid=a.colorid ";
			qry += "\n       ) ";
			qry += "\n       and not exists (select 1 from colorcode a2 where a2.accid=" + buyeraccid + " and a2.accid1=" + selleraccid + " and a2.colorid1=a.colorid); ";
			qry += "\n       v_row cur_data%rowtype;";
			qry += "\n     begin";
			qry += "\n       for v_row in cur_data loop";
			qry += "\n          insert into colorcode (colorid,colorname,shortname,colorno,accid,lyfs,accid1,colorid1,noused,statetag,lastop,lastdate) ";
			qry += "\n          values (colorcode_colorid.nextval,v_row.colorname,v_row.shortname,v_row.colorno," + buyeraccid + ",1," + selleraccid + ",v_row.colorid,0,1,'" + lastop + "',sysdate); ";
			qry += "\n          v_count:=v_count+1;";
			qry += "\n          if v_count>1000 then ";
			qry += "\n             commit;";
			qry += "\n             v_count:=0;";
			qry += "\n          end if;";
			qry += "\n       end loop;";
			qry += "\n     end;";
			qry += "\n     commit;";

			// --更新尺码
			qry += "\n    v_count:=0;";
			qry += "\n    declare cursor cur_data is ";
			qry += "\n       select a.sizeid,a.sizename,a.sizeno";
			//			qry += "\n       ,v_accname||'_'||substr(a.groupno,INSTR(a.groupno,'_',-1)+1,length(a.groupno)-INSTR(a.groupno,'_',-1)) as groupno";
			qry += "\n       ,a.groupno||'.'||v_accname as groupno";
			qry += "\n       from sizecode a ";
			qry += "\n       where a.accid=" + selleraccid + " and a.statetag=1 and a.noused=0 ";
			qry += "\n       and exists ( ";
			qry += "\n         select 1 from sizecode a1  ";
			qry += "\n         join warecode b1 on a1.accid=b1.accid and a1.groupno=b1.sizegroupno ";
			qry += "\n         join buyerbrand c1 on b1.brandid=c1.brandid ";
			qry += "\n         where b1.accid=" + selleraccid + " and c1.accid=" + selleraccid + " and c1.buyaccid=" + buyeraccid + " and a1.sizeid=a.sizeid ";
			qry += "\n       ) ";
			qry += "\n       and not exists (select 1 from sizecode a2 where a2.accid=" + buyeraccid + " and a2.accid1=" + selleraccid + " and a2.sizeid1=a.sizeid); ";
			qry += "\n       v_row cur_data%rowtype;";
			qry += "\n     begin";
			qry += "\n       for v_row in cur_data loop";
			qry += "\n          insert into sizecode (sizeid,sizename,sizeno,groupno,accid,lyfs,accid1,sizeid1,noused,statetag,lastop,lastdate) ";
			qry += "\n          values (sizecode_sizeid.nextval,v_row.sizename,v_row.sizeno,v_row.groupno," + buyeraccid + ",1," + selleraccid + ",v_row.sizeid,0,1,'" + lastop + "',sysdate); ";
			qry += "\n          v_count:=v_count+1;";
			qry += "\n          if v_count>1000 then ";
			qry += "\n             commit;";
			qry += "\n             v_count:=0;";
			qry += "\n          end if;";
			qry += "\n       end loop;";
			qry += "\n     end;";
			qry += "\n     commit;";

			// 更新商品
			qry += "\n    v_count:=0;";
			qry += "\n    declare cursor cur_data is ";
			qry += "\n       select a.wareid ";
			qry += "\n            ,a.warename,a.wareno,a.shortname,a.units,a.typeid,b.brandid,a.seasonname,a.prodyear,a.prodno ";
			//			qry += "\n            ,v_accname||'_'||substr(a.sizegroupno,INSTR(a.sizegroupno,'_',-1)+1,length(a.sizegroupno)-INSTR(a.sizegroupno,'_',-1)) as sizegroupno";
			qry += "\n            ,a.sizegroupno||'.'||v_accname as sizegroupno";

			qry += "\n           ,f_getwarecustprice(a.wareid,a.brandid,v_custid,v_pricetype,v_discount," + priceprec + ") as entersale";
			qry += "\n           ,a.retailsale,a.remark,a.imagename0 ";
			qry += "\n           ,a.useritem1,a.useritem2,a.useritem3,a.useritem4,a.useritem5,a.gbbar";

			qry += "\n         from warecode a";
			qry += "\n         join brand b on b.brandid1=a.brandid and b.accid1=a.accid and b.accid=" + buyeraccid + "  ";

			qry += "\n        where a.statetag=1 and a.noused=0 and a.accid=" + selleraccid;
			qry += "\n        and not exists (select 1 from warecode a2 where a2.accid=" + buyeraccid + " and a2.accid1=" + selleraccid + " and a2.wareid1=a.wareid) ";
			qry += "\n        and exists (select 1 from buyerbrand a1 where a1.accid=" + selleraccid + " and a1.buyaccid=" + buyeraccid + " and a1.brandid=a.brandid) ";
			qry += "\n        ;";
			qry += "\n      v_row cur_data%rowtype; ";
			qry += "\n    begin ";
			qry += "\n       for v_row in cur_data loop ";
			// qry += "\n p_downsellerware0(" + buyeraccid + ",v_row.wareid); ";
			qry += "\n          insert into warecode (wareid,warename,wareno,accid,lyfs,shortname,units,typeid,brandid,provid,seasonname,prodyear,prodno, ";
			qry += "\n            sizegroupno,entersale,retailsale,accid1,wareid1,remark,imagename0, ";
			qry += "\n            useritem1,useritem2,useritem3,useritem4,useritem5,gbbar,downenabled,noused,statetag,lastop,lastdate) ";
			qry += "\n          values  (warecode_wareid.nextval,v_row.warename,v_row.wareno," + buyeraccid
					+ ",1,v_row.shortname,v_row.units,v_row.typeid,v_row.brandid,v_provid,v_row.seasonname,v_row.prodyear,v_row.prodno, ";
			qry += "\n            v_row.sizegroupno,v_row.entersale,v_row.retailsale ," + selleraccid + ",v_row.wareid,v_row.remark,v_row.imagename0, ";
			qry += "\n            v_row.useritem1,v_row.useritem2,v_row.useritem3,v_row.useritem4,v_row.useritem5,v_row.gbbar,0,0,1,'" + lastop + "',sysdate);  ";
			qry += "\n            v_count:=v_count+1;";
			qry += "\n           if v_count>1000 then ";
			qry += "\n              commit;";
			qry += "\n              v_count:=0;";
			qry += "\n           end if;";
			qry += "\n       end loop;  ";
			qry += "\n    end; ";
			qry += "\n    commit;";

			// 更新商品颜色
			qry += "\n    v_count:=0;";
			qry += "\n    declare cursor cur_data is ";
			qry += "\n       select b.wareid,c.colorid from warecolor a ";
			qry += "\n       join warecode b on a.wareid=b.wareid1 and b.accid1=" + selleraccid + " ";
			qry += "\n       join colorcode c on a.colorid=c.colorid1 and c.accid1=" + selleraccid + " ";
			qry += "\n       where b.accid=" + buyeraccid + " and c.accid=" + buyeraccid + " ";
			qry += "\n       and not exists (select 1 from warecolor a1 where b.wareid=a1.wareid and c.colorid=a1.colorid);  ";
			qry += "\n       v_row cur_data%rowtype; ";
			qry += "\n    begin ";
			qry += "\n       for v_row in cur_data loop ";
			qry += "\n           insert into warecolor (id,wareid,colorid,lastop,lastdate,ywly,accid) ";
			qry += "\n           values (warecolor_id.nextval,v_row.wareid,v_row.colorid,'" + lastop + "',sysdate,0,0) ;";
			qry += "\n           v_count:=v_count+1;";
			qry += "\n           if v_count>1000 then ";
			qry += "\n              commit;";
			qry += "\n              v_count:=0;";
			qry += "\n          end if;";
			qry += "\n       end loop;  ";
			qry += "\n    end; ";
			qry += "\n    commit;";
			// 同步条码
			qry += "\n    declare cursor cur_data is ";
			qry += "\n        select b.wareid,c.colorid,d.sizeid,a.barcode from warebarcode a  ";
			qry += "\n           join warecode b on a.wareid=b.wareid1 and b.accid1=a.accid ";
			qry += "\n           join colorcode c on a.colorid=c.colorid1 and c.accid1=a.accid ";
			qry += "\n           join sizecode d on a.sizeid=d.sizeid1 and c.accid1=a.accid ";
			qry += "\n           where a.accid=" + selleraccid + " and b.accid=" + buyeraccid + " and c.accid=" + buyeraccid + " and d.accid=" + buyeraccid + " ";
			qry += "\n           and not exists (select 1 from warebarcode a1 where a1.accid=" + buyeraccid + " and a.barcode=a1.barcode);   ";
			qry += "\n      v_row cur_data%rowtype; ";
			qry += "\n    begin ";
			qry += "\n       v_count:=0; ";
			qry += "\n       for v_row in cur_data loop ";
			qry += "\n          delete from warebarcode where barcode=v_row.barcode and accid=" + buyeraccid + ";";
			qry += "\n          insert into warebarcode (id,accid,barcode,wareid,colorid,sizeid,lastop,statetag,ywly) ";
			qry += "\n          values (warebarcode_id.nextval," + buyeraccid + ",v_row.barcode,v_row.wareid,v_row.colorid,v_row.sizeid,'sysdba',1,1); ";
			qry += "\n          v_count:=v_count+1; ";
			qry += "\n          if v_count>1000 then ";
			qry += "\n             v_count:=0; ";
			qry += "\n             commit; ";
			qry += "\n          end if; ";
			qry += "\n       end loop; ";
			qry += "\n    end; ";
			// --更新类型
			qry += "\n     insert into  accwaretype (id,accid,typeid,lastdate) ";
			qry += "\n     select accwaretype_id.nextval," + buyeraccid + ",typeid,sysdate from accwaretype a where accid=" + selleraccid + "";
			qry += "\n     and not exists (select 1 from accwaretype b where a.typeid=b.typeid and b.accid=" + buyeraccid + ");";
			qry += "\n     commit; ";
		}

		if (fs == 1 || fs == 4 || fs == 5) // 更新进价 /fs:0=同步基础资料 1=同步价格 2=同步商品图片
											// 3=处理默认颜色及尺码 4=所有 5=0或1
		{
			qry += "\n     declare cursor cur_warecode is  ";
			qry += "\n       select a.wareid";
			qry += "\n           ,f_getwarecustprice(a.wareid,a.brandid,v_custid,v_pricetype,v_discount," + priceprec + ") as price";

			qry += "\n       from warecode a where a.accid=" + selleraccid + ";";
			qry += "\n       v_row cur_warecode%rowtype;  ";
			qry += "\n     begin ";
			qry += "\n       v_count:=0;";
			qry += "\n       for v_row in cur_warecode loop ";
			qry += "\n          update warecode set entersale=v_row.price where accid=" + buyeraccid + " and accid1=" + selleraccid + " and wareid1=v_row.wareid; ";
			qry += "\n          if v_count>5000 then ";
			qry += "\n             commit;";
			qry += "\n             v_count:=0;";
			qry += "\n          end if; ";
			qry += "\n       end loop; ";
			qry += "\n     end; ";

			qry += "\n     commit;";
		}
		if (fs == 2 || fs == 4)// 同步图片名 /fs:0=同步基础资料 1=同步价格 2=同步商品图片 3=处理默认颜色及尺码
								// 4=所有
		{
			// qry += "\n update warecode set imagename0=(select imagename0 from
			// warecode b where b.accid=" + selleraccid + " and
			// b.wareid=warecode.wareid1)";
			// qry += "\n where accid=" + buyeraccid + " and accid1=" +
			// selleraccid + ";";
			qry += "\n     declare cursor cur_warecode is  ";
			qry += "\n       select a.wareid,a.imagename0 from warecode a where a.accid=" + selleraccid + " and length(a.imagename0)>0; ";
			// qry += "\n and ( exists (select 1 from waretime b where
			// a.accid=b.selleraccid and b.buyeraccid=" + buyeraccid + " and
			// a.lastdate>b.lastdate) ";
			// qry += "\n or not exists (select 1 from waretime b where
			// a.accid=b.selleraccid and b.buyeraccid=" + buyeraccid + ") );";
			qry += "\n       v_row cur_warecode%rowtype;  ";
			qry += "\n     begin ";
			qry += "\n       v_count:=0;";
			qry += "\n       for v_row in cur_warecode loop ";
			qry += "\n          update warecode set imagename0=v_row.imagename0 where accid=" + buyeraccid + " and accid1=" + selleraccid + " and wareid1=v_row.wareid; ";
			qry += "\n          if v_count>5000 then ";
			qry += "\n             commit;";
			qry += "\n             v_count:=0;";
			qry += "\n          end if; ";
			qry += "\n       end loop; ";
			qry += "\n     end; ";
			qry += "\n     commit;";
		}

		//		 fs:0=同步基础资料 1=同步价格 2=同步商品图片 3=处理默认颜色及尺码 4=所有 5=0或1
		if (fs == 0 || fs == 4 || fs == 5) {//校验同步的尺码是否正确
			qry += "\n      declare cursor cur_data is";
			qry += "\n         select a.sizeid,a.accid1,a.sizeid1,a.groupno,b.accname";
			qry += "\n         from sizecode a ";
			qry += "\n         join accreg b on a.accid1=b.accid ";
			qry += "\n         where a.accid=" + buyeraccid + " and a.statetag=1 and a.accid1=" + selleraccid + " and a.sizeid1>0 ;";
			qry += "\n         v_row cur_data%rowtype;";
			qry += "\n      begin";
			qry += "\n         v_count:=0;";
			qry += "\n         for v_row in cur_data loop";
			qry += "\n             begin";
			qry += "\n               select sizename,sizeno,groupno into v_sizename,v_sizeno,v_groupno from sizecode where accid=v_row.accid1 and sizeid=v_row.sizeid1 and statetag=1;";
			//			qry += "\n               update sizecode set sizename=v_sizename,sizeno=v_sizeno,groupno=v_row.accname||'_'||substr(v_groupno,INSTR(v_groupno,'_',-1)+1,length(v_groupno)-INSTR(v_groupno,'_',-1))";
			qry += "\n               update sizecode set sizename=v_sizename,sizeno=v_sizeno,groupno=v_groupno||'.'||v_row.accname,lastdate=sysdate";
			qry += "\n               where sizeid=v_row.sizeid and accid=" + buyeraccid + ";";
			//			--           dbms_output.put_line(v_row.accname||'_'||substr(v_groupno,INSTR(v_groupno,'_',-1)+1,length(v_groupno)-INSTR(v_groupno,'_',-1)));
			qry += "\n             EXCEPTION WHEN NO_DATA_FOUND THEN";
			//			           --未找到，删除
			qry += "\n               update sizecode set statetag=2,lastdate=sysdate where sizeid=v_row.sizeid and accid=" + buyeraccid + ";";
			qry += "\n             end;";
			qry += "\n             if v_count>1000 then ";
			qry += "\n                commit;";
			qry += "\n                v_count:=0;";
			qry += "\n             end if; ";
			qry += "\n         end loop;";
			qry += "\n      end;";
			qry += "\n      commit; ";
			//校验商品编码的尺码组名称
			qry += "\n      declare cursor cur_data is";
			qry += "\n         select a.wareid,a.accid, c.sizegroupno||'.'||b.accname as sizegroupno";
			qry += "\n         from warecode a";
			qry += "\n         join accreg b on a.accid1=b.accid ";
			qry += "\n         join warecode c on a.wareid1=c.wareid ";
			qry += "\n         where a.accid=" + buyeraccid + " and a.statetag=1 and a.accid1>0 and a.wareid1>0 ;";
			qry += "\n         v_row cur_data%rowtype;";
			qry += "\n      begin";
			qry += "\n         v_count:=0;";
			qry += "\n         for v_row in cur_data loop";
			qry += "\n            update warecode set sizegroupno=v_row.sizegroupno,lastdate=sysdate";
			qry += "\n            where wareid=v_row.wareid and accid=" + buyeraccid + ";";
			qry += "\n            if v_count>1000 then ";
			qry += "\n               commit;";
			qry += "\n               v_count:=0;";
			qry += "\n            end if; ";
			qry += "\n         end loop;";
			qry += "\n      end;";

		}
		if (fs == 0 || fs == 4 || fs == 5) // 写本次同步时间
		{
			qry += "\n    select count(*) into v_count from waretime where selleraccid=" + selleraccid + " and buyeraccid=" + buyeraccid + "; ";
			qry += "\n    if v_count=0 then ";
			qry += "\n       insert into waretime (selleraccid,buyeraccid,lastdate,lastop)";
			qry += "\n       values (" + selleraccid + "," + buyeraccid + ",sysdate,'" + lastop + "'); ";
			qry += "\n    else ";
			qry += "\n       update waretime set lastdate=sysdate,lastop='" + lastop + "' where  selleraccid=" + selleraccid + " and buyeraccid=" + buyeraccid + "; ";
			qry += "\n    end if; ";

			qry += "\n    commit; ";
		}

		qry += "\n    v_retcs:= '1同步完成！'; ";
		qry += "\n    <<exit>>";
		qry += "\n    select v_retcs into :retcs from dual; ";
		qry += "\n end; ";
		//		System.out.println(qry);
		Map<String, ProdParam> param = new HashMap<String, ProdParam>();
		param.put("retcs", new ProdParam(Types.VARCHAR));
		int ret = DbHelperSQL.ExecuteProc(qry, param, 1800);
		if (ret < 0) {
			// errmess = "0操作异常！";
			return "0操作异常！";
		}
		return param.get("retcs").getParamvalue().toString();
		// String retcs = param.get("retcs").getParamvalue().toString();
		//
		// errmess = retcs.substring(1);
		// return Integer.parseInt(retcs.substring(0, 1));
	}

	// ========================================+
	// 调拨订货条码扫入
	protected void Allotorderbarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 1;
		// int priceprec = Integer.parseInt(Func.subString(qxpublic, 4, 1));//
		// 单价精度
		int qxbj = htp.getQxbj();
		Allotorderm dal = new Allotorderm();
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAmount(amount);
		dal.setNoteno(noteno);
		WriteResult(response, dal.doBarcodein(Func.strLeft(barcode.toUpperCase(), 30), qxbj), dal.getErrmess());

	}

	// 库存盘点条码扫入
	protected void Warecheckbarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 1;
		int qxbj = htp.getQxbj();

		Warecheckm dal = new Warecheckm();
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAmount(amount);
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.doBarcodein(Func.strLeft(barcode.toUpperCase(), 30), qxbj), dal.getErrmess());

	}

	// 客户盘点条码扫入
	protected void Custcheckbarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 1;
		int qxbj = htp.getQxbj();

		Custcheckm dal = new Custcheckm();
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAmount(amount);
		dal.setNoteno(noteno);
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.doBarcodein(Func.strLeft(barcode.trim().toUpperCase(), 30), qxbj), dal.getErrmess());

	}

	// 调拨出库条码扫入
	protected void Allotoutbarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 1;
		int qxbj = htp.getQxbj();

		Allotoutm dal = new Allotoutm();
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAmount(amount);
		dal.setNoteno(noteno);
		WriteResult(response, dal.doBarcodein(Func.strLeft(barcode.toUpperCase(), 30), qxbj), dal.getErrmess());

	}

	// 期初入库条码扫入
	protected void Firsthousebarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 1;
		int qxbj = htp.getQxbj();

		Firsthousem dal = new Firsthousem();
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAmount(amount);
		dal.setNoteno(noteno);
		WriteResult(response, dal.doBarcodein(Func.strLeft(barcode.toUpperCase(), 30), qxbj), dal.getErrmess());

	}

	// 客户销售条码扫入
	protected void Custsalebarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 1;
		int qxbj = htp.getQxbj();

		Custsalem dal = new Custsalem();
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAmount(amount);
		dal.setNoteno(noteno);
		WriteResult(response, dal.doBarcodein(Func.strLeft(barcode.trim().toUpperCase(), 30), qxbj), dal.getErrmess());

	}

	// 临时盘点条码扫入
	protected void Tempcheckbarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 1;
		int qxbj = htp.getQxbj();

		Tempcheckm dal = new Tempcheckm();
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAmount(amount);
		dal.setNoteno(noteno);
		WriteResult(response, dal.doBarcodein(Func.strLeft(barcode.toUpperCase(), 30), qxbj), dal.getErrmess());

	}

	// 调拨入库条码扫入
	protected void Allotinbarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 1;
		int qxbj = htp.getQxbj();

		Allotinm dal = new Allotinm();
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAmount(amount);
		dal.setNoteno(noteno);
		WriteResult(response, dal.doBarcodein(Func.strLeft(barcode.toUpperCase(), 30), qxbj), dal.getErrmess());

	}

	// 采购订货条码扫入
	protected void Provorderbarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		int pricetype = jsonObject.has("pricetype") ? Integer.parseInt(jsonObject.getString("pricetype")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 1;
		float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 1;
		int priceprec = htp.getPriceprec();// 单价精度
		int qxbj = htp.getQxbj();

		Provorderm dal = new Provorderm();
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAmount(amount);
		dal.setDiscount(discount);
		dal.setNoteno(noteno);
		// dal.setLastop(htp.getUsername());
		WriteResult(response, dal.doBarcodein(Func.strLeft(barcode.toUpperCase(), 30), pricetype, priceprec, qxbj), dal.getErrmess());

	}

	// 捡货单验货条码扫入
	protected void Notecheckbarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String tablename = jsonObject.has("tablename") ? jsonObject.getString("tablename") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 1;

		Notecheck dal = new Notecheck();
		dal.setAccid(htp.getMaccid());
		// dal.setUserid(htp.getUserid());
		dal.setAmount(amount);
		dal.setNoteno(noteno.toUpperCase());
		dal.setTablename(tablename.toUpperCase());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.doBarcodein(barcode.toUpperCase()), dal.getErrmess());
	}

	// 捡货商品明细表
	protected void Notechecklist(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String tablename = jsonObject.has("tablename") ? jsonObject.getString("tablename") : "";
		// int sizenum = jsonObject.has("sizenum") ?
		// Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// if (sizenum < 5)
		// sizenum = 5;
		int sizenum = htp.getSizenum();
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = " ";// + order;
		if (sortid == 1) // 1=输入排序，2=商品排序
			sort = " id ";
		else
			sort = "  wareno,wareid,colorid ";// + order;
		Notecheck dal = new Notecheck();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setTablename(tablename.toUpperCase());
		QueryParam qp = new QueryParam(page, pagesize, sort);

		if (dal.doGetColorsumList(qp, sizenum) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			Write(response, dal.getErrmess());
	}

	// 清空检货记录
	protected void Notecheckclear(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String tablename = jsonObject.has("tablename") ? jsonObject.getString("tablename") : "";
		Notecheck dal = new Notecheck();
		dal.setNoteno(noteno.toUpperCase());
		dal.setTablename(tablename.toUpperCase());
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Clear(), dal.getErrmess());
	}

	// 检货完成
	protected void Notecheckover(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String tablename = jsonObject.has("tablename") ? jsonObject.getString("tablename") : "";
		int bj = jsonObject.has("bj") ? Integer.parseInt(jsonObject.getString("bj")) : 0;
		// bj=1,替换
		Notecheck dal = new Notecheck();
		dal.setNoteno(noteno.toUpperCase());
		dal.setTablename(tablename.toUpperCase());
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Over(bj), dal.getErrmess());
	}

	// 捡货单验货差异明细
	protected void Notecheckdiff(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String tablename = jsonObject.has("tablename") ? jsonObject.getString("tablename") : "";
		int xs = jsonObject.has("xs") ? Integer.parseInt(jsonObject.getString("xs")) : 0;
		// xs=1,只显示有差异的商品
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		Notecheck dal = new Notecheck();
		dal.setNoteno(noteno.toUpperCase());
		dal.setTablename(tablename.toUpperCase());
		dal.setAccid(htp.getMaccid());
		QueryParam qp = new QueryParam(page, pagesize);

		Table tb = new Table();
		tb = dal.GetTable(qp, xs);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 采购入库条码扫码
	protected void Wareinbarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		int pricetype = jsonObject.has("pricetype") ? Integer.parseInt(jsonObject.getString("pricetype")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 1;
		float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 1;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));// 单价精度
		int qxbj = htp.getQxbj();

		Wareinm dal = new Wareinm();
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAmount(amount);
		dal.setDiscount(discount);
		dal.setNoteno(noteno);
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.doBarcodein(Func.strLeft(barcode.toUpperCase().trim(), 30), pricetype, priceprec, qxbj, provid), dal.getErrmess());

	}

	// 商场销售条码扫入
	protected void Shopsalebarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		int pricetype = jsonObject.has("pricetype") ? Integer.parseInt(jsonObject.getString("pricetype")) : 0;
		long guestid = jsonObject.has("guestid") ? Long.parseLong(jsonObject.getString("guestid")) : 0;
		long salemanid = jsonObject.has("salemanid") ? Long.parseLong(jsonObject.getString("salemanid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String salemanno = jsonObject.has("salemanno") ? jsonObject.getString("salemanno") : "";

		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 1;
		float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 1;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));// 单价精度
		int currprec = htp.getCurrprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));// 单价精度
		int qxbj = htp.getQxbj();

		Shopsalem dal = new Shopsalem();
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAmount(amount);
		dal.setDiscount(discount);
		dal.setNoteno(noteno);
		dal.setSalemanid(salemanid);
		dal.setLastop(htp.getUsername());
		int vippricetype = htp.getVipPricetype();//24位：会员价方式:会员价方式:0=零售价，1=售价1，2=售价2，3=售价3

		if (dal.doBarcodein(Func.strLeft(barcode.toUpperCase().trim(), 30), pricetype, priceprec, currprec, qxbj, salemanno, guestid, houseid, vippricetype) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 配货捡码条码扫入
	protected void Warepeicheckbarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		// int ntid = jsonObject.has("ntid") ?
		// Integer.parseInt(jsonObject.getString("ntid")) : 0;
		// long saleid = jsonObject.has("saleid") ?
		// Long.parseLong(jsonObject.getString("saleid")) : 0;
		// long custid = jsonObject.has("custid") ?
		// Long.parseLong(jsonObject.getString("custid")) : 0;
		// int pricetype = jsonObject.has("pricetype") ?
		// Integer.parseInt(jsonObject.getString("pricetype")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 1;
		int qxbj = htp.getQxbj();

		Warepeim dal = new Warepeim();
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		// dal.setSaleid(saleid);
		dal.setAmount(amount);
		// dal.setDiscount(discount);
		dal.setNoteno(noteno);
		// dal.setLastop(htp.getUsername());
		WriteResult(response, dal.doBarcodeincheck(Func.strLeft(barcode.toUpperCase().trim(), 30), qxbj), dal.getErrmess());

	}

	// 配货条码扫入
	protected void Warepeibarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		// int ntid = jsonObject.has("ntid") ?
		// Integer.parseInt(jsonObject.getString("ntid")) : 0;
		long saleid = jsonObject.has("saleid") ? Long.parseLong(jsonObject.getString("saleid")) : 0;
		// long custid = jsonObject.has("custid") ?
		// Long.parseLong(jsonObject.getString("custid")) : 0;
		int pricetype = jsonObject.has("pricetype") ? Integer.parseInt(jsonObject.getString("pricetype")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 1;
		float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 1;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));// 单价精度
		int qxbj = htp.getQxbj();

		Warepeim dal = new Warepeim();
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setSaleid(saleid);
		dal.setAmount(amount);
		dal.setDiscount(discount);
		dal.setNoteno(noteno);
		// dal.setLastop(htp.getUsername());
		WriteResult(response, dal.doBarcodein(Func.strLeft(barcode.toUpperCase().trim(), 30), pricetype, priceprec, qxbj), dal.getErrmess());

	}

	// 退货申请条码扫入
	protected void Refundaskbarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		int pricetype = jsonObject.has("pricetype") ? Integer.parseInt(jsonObject.getString("pricetype")) : 0;
		// int ntid = jsonObject.has("ntid") ?
		// Integer.parseInt(jsonObject.getString("ntid")) : 0;
		long saleid = jsonObject.has("saleid") ? Long.parseLong(jsonObject.getString("saleid")) : 0;
		// long custid = jsonObject.has("custid") ?
		// Long.parseLong(jsonObject.getString("custid")) : 0;
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 1;
		float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 1;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));// 单价精度
		int qxbj = htp.getQxbj();

		Refundoutm dal = new Refundoutm();
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAmount(amount);
		dal.setDiscount(discount);
		dal.setNoteno(noteno);
		dal.setSaleid(saleid);
		// 、、dal.setLastop(htp.getUsername());
		WriteResult(response, dal.doBarcodein(Func.strLeft(barcode.toUpperCase().trim(), 30), pricetype, priceprec, qxbj), dal.getErrmess());

	}

	// 客户订货条码扫入
	protected void Custorderbarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		int pricetype = jsonObject.has("pricetype") ? Integer.parseInt(jsonObject.getString("pricetype")) : 0;
		// int ntid = jsonObject.has("ntid") ?
		// Integer.parseInt(jsonObject.getString("ntid")) : 0;
		// long saleid = jsonObject.has("saleid") ?
		// Long.parseLong(jsonObject.getString("saleid")) : 0;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 1;
		float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 1;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));// 单价精度
		int qxbj = htp.getQxbj();
		int nearsaleok = htp.getNearsale();
		Custorderm dal = new Custorderm();
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAmount(amount);
		dal.setDiscount(discount);
		dal.setNoteno(noteno);
		// dal.setSaleid(saleid);
		// 、、dal.setLastop(htp.getUsername());
		WriteResult(response, dal.doBarcodein(Func.strLeft(barcode.toUpperCase().trim(), 30), custid, pricetype, priceprec, qxbj, nearsaleok), dal.getErrmess());

	}

	// 销售出库条码扫入
	protected void Wareoutbarcode(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String barcode = jsonObject.has("barcode") ? jsonObject.getString("barcode").trim().replace("'", "''") : "";
		int pricetype = jsonObject.has("pricetype") ? Integer.parseInt(jsonObject.getString("pricetype")) : 0;
		long saleid = jsonObject.has("saleid") ? Long.parseLong(jsonObject.getString("saleid")) : 0;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 1;
		float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 1;
		int ntid = jsonObject.has("ntid") ? Integer.parseInt(jsonObject.getString("ntid")) : 0;
		int currprec = 2;
		if (ntid == 0)
			currprec = htp.getCurrprec();
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,4, 1));// 单价精度
		int qxbj = htp.getQxbj();
		int nearsaleok = htp.getNearsale();
		Wareoutm dal = new Wareoutm();
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setAmount(amount);
		dal.setDiscount(discount);
		dal.setNoteno(noteno);
		dal.setSaleid(saleid);
		WriteResult(response, dal.doBarcodein(Func.strLeft(barcode.toUpperCase().trim(), 30), custid, houseid, pricetype, priceprec, currprec, qxbj, ntid, nearsaleok), dal.getErrmess());
	}

	// ==============================================================

	// 把客户订单合并生成采购订单
	protected void MergeCustorder(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int priceprec = htp.getPriceprec();

		Provorderh dal = new Provorderh();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setOperant(htp.getUsername());
		WriteResult(response, dal.MergeFromCust(jsonObject, priceprec), dal.getErrmess());
	}

	// 合并客户订单
	protected void CustorderMerge(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int priceprec = htp.getPriceprec();

		Custorderh dal = new Custorderh();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		WriteResult(response, dal.Merge(jsonObject, priceprec), dal.getErrmess());
	}

	// 合并采购订单
	protected void ProvorderMerge(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int priceprec = htp.getPriceprec();

		Provorderh dal = new Provorderh();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		WriteResult(response, dal.Merge(jsonObject, priceprec), dal.getErrmess());
	}

	// 合并调拨订单
	protected void AllotorderMerge(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int priceprec = htp.getPriceprec();

		Allotorderh dal = new Allotorderh();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		WriteResult(response, dal.Merge(jsonObject, priceprec), dal.getErrmess());
	}

	// ==========================================

	// 获取零售开票、批发开票、批发退货商品+颜色汇总列表
	protected void GetWareoutmcolorsumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// if (sizenum == 0)
		// sizenum = 8;
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareno " + order + ",wareid,colorid,id ";// + order;
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Wareoutm dal = new Wareoutm();
		dal.setAccid(accid);
		dal.setNoteno(noteno);

		// dal.setLastop(htp.getUsername());
		if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			String jsonstr = dal.getErrmess();
			// System.out.println(jsonstr);

			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}

			Write(response, jsonstr);
		}
	}

	// 获取商场零售商品+颜色汇总列表
	protected void GetShopsalemcolorsumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// if (sizenum == 0)
		// sizenum = 8;
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareno " + order + ",wareid,colorid,id ";// + order;
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Shopsalem dal = new Shopsalem();
		dal.setAccid(accid);
		dal.setNoteno(noteno);

		// dal.setLastop(htp.getUsername());
		if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			String jsonstr = dal.getErrmess();
			// System.out.println(jsonstr);

			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}

			Write(response, jsonstr);
		}
	}

	// 获取调拨出库商品+颜色汇总列表
	protected void GetAllotoutmcolorsumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// if (sizenum == 0)
		// sizenum = 8;
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		int priceprec = htp.getPriceprec();
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareno " + order + ",wareid,colorid,id ";// + order;
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Allotoutm dal = new Allotoutm();
		dal.setAccid(accid);
		dal.setNoteno(noteno);

		// if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
		// WriteResult(response, 0, dal.getErrmess());
		// else
		// Write(response, dal.getErrmess());

		if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			String jsonstr = dal.getErrmess();
			// System.out.println(jsonstr);

			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}

			Write(response, jsonstr);
		}

	}

	// 获取调拨订货商品+颜色汇总列表
	protected void GetAllotordermcolorsumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// if (sizenum == 0)
		// sizenum = 8;
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		int priceprec = htp.getPriceprec();
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareno " + order + ",wareid,colorid,id ";// + order;
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Allotorderm dal = new Allotorderm();
		dal.setAccid(accid);
		dal.setNoteno(noteno);
		// dal.setLastop(htp.getUsername());
		if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			Write(response, dal.getErrmess());
	}

	// 获取退货申请商品+颜色汇总列表
	protected void GetRefundaskmcolorsumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// if (sizenum == 0)
		// sizenum = 8;
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareno " + order + ",wareid,colorid,id ";// + order;
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Refundoutm dal = new Refundoutm();
		dal.setAccid(accid);
		dal.setNoteno(noteno);
		// dal.setLastop(htp.getUsername());
		if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			Write(response, dal.getErrmess());
	}

	// 获取客户订货商品+颜色汇总列表
	protected void GetCustordermcolorsumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// if (sizenum == 0)
		// sizenum = 8;
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareno " + order + ",wareid,colorid,id ";// + order;
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Custorderm dal = new Custorderm();
		dal.setAccid(accid);
		dal.setNoteno(noteno);
		// dal.setLastop(htp.getUsername());
		if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
			WriteResult(response, 0, dal.getErrmess());
		// else
		else {
			String jsonstr = dal.getErrmess();
			// System.out.println(jsonstr);

			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}

			Write(response, jsonstr);
		}
		// Write(response, dal.getErrmess());
	}

	// 获取采购订货商品+颜色汇总列表
	protected void GetProvordermcolorsumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// if (sizenum == 0)
		// sizenum = 8;
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		int priceprec = htp.getPriceprec();
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareno " + order + ",wareid,colorid,id ";// + order;
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Provorderm dal = new Provorderm();
		dal.setAccid(accid);
		dal.setNoteno(noteno);
		// dal.setLastop(htp.getUsername());
		if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			String jsonstr = dal.getErrmess();
			// System.out.println(jsonstr);

			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
		}
	}

	// 获取调拨入库商品+颜色汇总列表
	protected void GetAllotinmcolorsumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// if (sizenum == 0)
		// sizenum = 8;
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		int priceprec = htp.getPriceprec();
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareno " + order + ",wareid,colorid,id ";// + order;
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Allotinm dal = new Allotinm();
		dal.setAccid(accid);
		dal.setNoteno(noteno);
		// dal.setLastop(htp.getUsername());
		// if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
		// WriteResult(response, 0, dal.getErrmess());
		// else
		// Write(response, dal.getErrmess());

		if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			String jsonstr = dal.getErrmess();
			// System.out.println(jsonstr);

			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
		}

	}

	// 获取期初入库商品+颜色汇总列表
	protected void GetFirsthousemcolorsumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// if (sizenum == 0)
		// sizenum = 8;
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		int priceprec = htp.getPriceprec();
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareno " + order + ",wareid,colorid,id ";// + order;
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Firsthousem dal = new Firsthousem();
		dal.setAccid(accid);
		dal.setNoteno(noteno);
		dal.setLastop(htp.getUsername());
		// if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
		// WriteResult(response, 0, dal.getErrmess());
		// else
		// Write(response, dal.getErrmess());
		if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			String jsonstr = dal.getErrmess();
			// System.out.println(jsonstr);

			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
		}
	}

	// 获取客户期初入库商品+颜色汇总列表
	protected void GetFirstcustmcolorsumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// if (sizenum == 0)
		// sizenum = 8;
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		int priceprec = htp.getPriceprec();
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareno " + order + ",wareid,colorid,id ";// + order;
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Firstcustm dal = new Firstcustm();
		dal.setAccid(accid);
		dal.setNoteno(noteno);
		dal.setLastop(htp.getUsername());
		if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			String jsonstr = dal.getErrmess();
			// System.out.println(jsonstr);

			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
		}
	}

	// 获取客户销售商品+颜色汇总列表
	protected void GetCustsalemcolorsumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// if (sizenum == 0)
		// sizenum = 8;
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		int priceprec = htp.getPriceprec();
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareno " + order + ",wareid,colorid,id ";// + order;
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Custsalem dal = new Custsalem();
		dal.setAccid(accid);
		dal.setNoteno(noteno);
		dal.setLastop(htp.getUsername());
		if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			String jsonstr = dal.getErrmess();
			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}
			Write(response, jsonstr);
		}
	}

	// 获取采购入库\退货商品+颜色汇总列表
	protected void GetWareinmcolorsumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// if (sizenum == 0)
		// sizenum = 8;
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareno " + order + ",wareid,colorid,id ";// + order;
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Wareinm dal = new Wareinm();
		dal.setAccid(accid);
		dal.setNoteno(noteno);
		dal.setLastop(htp.getUsername());
		// if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
		// WriteResult(response, 0, dal.getErrmess());
		// else
		// Write(response, dal.getErrmess());
		if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			String jsonstr = dal.getErrmess();
			// System.out.println(jsonstr);

			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}

			Write(response, jsonstr);
		}
	}

	// 获取临时盘点商品+颜色汇总列表
	protected void GetTempcheckmcolorsumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// if (sizenum == 0)
		// sizenum = 8;
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareno " + order + ",wareid,colorid,id ";// + order;
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Tempcheckm dal = new Tempcheckm();
		dal.setAccid(accid);
		dal.setNoteno(noteno);
		dal.setLastop(htp.getUsername());
		// if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
		// WriteResult(response, 0, dal.getErrmess());
		// else
		// Write(response, dal.getErrmess());
		if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			String jsonstr = dal.getErrmess();
			// System.out.println(jsonstr);

			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}

			Write(response, jsonstr);
		}
	}

	// // 获取商品库存报警商品+颜色汇总列表
	// protected void GetWarewarnmcolorsumList(HttpServletResponse response,
	// HttpInfo htp) throws ServletException, IOException {
	// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
	// String noteno = jsonObject.has("noteno") ?
	// jsonObject.getString("noteno").replace("'", "''") : "";
	// String order = jsonObject.has("order") ? jsonObject.getString("order") :
	// "";
	// int page = jsonObject.has("page") ?
	// Integer.parseInt(jsonObject.getString("page")) : 1;
	// int pagesize = jsonObject.has("rows") ?
	// Integer.parseInt(jsonObject.getString("rows")) : 10;
	// if (pagesize > 50)
	// pagesize = 10;
	// int sortid = jsonObject.has("sortid") ?
	// Integer.parseInt(jsonObject.getString("sortid")) : 0;
	// int sizenum = jsonObject.has("sizenum") ?
	// Integer.parseInt(jsonObject.getString("sizenum")) : 0;
	// // if (sizenum == 0)
	// // sizenum = 8;
	// long accid0 = jsonObject.has("accid") ?
	// Long.parseLong(jsonObject.getString("accid")) : 0;
	// long accid = htp.getMaccid();
	// if (accid0 > 0)
	// accid = accid0;
	// int priceprec = htp.getPriceprec();//
	// Integer.parseInt(Func.subString(qxpublic, 4, 1));
	// String sort = "";
	// if (sortid == 1)
	// sort = " id " + order;
	// else
	// sort = " wareno " + order + ",wareid,colorid,id ";// + order;
	// QueryParam qp = new QueryParam(page, pagesize, sort);
	// Warewarnm dal = new Warewarnm();
	// dal.setAccid(accid);
	// dal.setNoteno(noteno);
	// dal.setLastop(htp.getUsername());
	// if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
	// WriteResult(response, 0, dal.getErrmess());
	// else {
	// if (page < 0) {
	// String jsonstr = dal.getErrmess();
	// String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
	// WriteResult(response, Integer.parseInt(retcs.substring(0, 1)),
	// retcs.substring(1));
	// return;
	// }
	//
	// Write(response, dal.getErrmess());
	// }
	// }

	// 获取商品盘点商品+颜色汇总列表
	protected void GetWarecheckmcolorsumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// if (sizenum == 0)
		// sizenum = 8;
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareno " + order + ",wareid,colorid,id ";// + order;
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Warecheckm dal = new Warecheckm();
		dal.setAccid(accid);
		dal.setNoteno(noteno);
		dal.setLastop(htp.getUsername());
		if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			if (page < 0) {
				String jsonstr = dal.getErrmess();
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}

			Write(response, dal.getErrmess());
		}
	}

	// 获取客户商品盘点商品+颜色汇总列表
	protected void GetCustcheckmcolorsumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		// if (sizenum == 0)
		// sizenum = 8;
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareno " + order + ",wareid,colorid,id ";// + order;
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Custcheckm dal = new Custcheckm();
		dal.setAccid(accid);
		dal.setNoteno(noteno);
		dal.setLastop(htp.getUsername());
		if (dal.doGetColorsumList(qp, sizenum, priceprec) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			if (page < 0) {
				String jsonstr = dal.getErrmess();
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}

			Write(response, dal.getErrmess());
		}
	}

	// 更新指定销售出库明细id信息
	protected void UpdateWareoutmByID(HttpServletResponse response, HttpInfo htp, int bj) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();
		int fs = htp.getFsout();

		Wareoutm dal = new Wareoutm();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Update(jsonObject, priceprec, fs, bj), dal.getErrmess());
	}

	// 更新指定商场销售出库明细id信息
	protected void UpdateShopsalemByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();
		int currprec = htp.getCurrprec();
		int fs = htp.getFsout();

		Shopsalem dal = new Shopsalem();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		// dal.setCalcdate(htp.getCalcdate());
		if (dal.Update(jsonObject, priceprec, currprec, fs) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 删除指定销售出库明细id信息
	protected void DelWareoutmByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		Wareoutm dal = new Wareoutm();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setId(id);
		WriteResult(response, dal.DeletebyId(), dal.getErrmess());

	}

	// 删除指定商场销售出库明细id信息
	protected void DelShopsalemByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		Shopsalem dal = new Shopsalem();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setId(id);
		if (dal.DeletebyId() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 删除指定销售出库记录id信息
	protected void DelWareouthByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int bj = jsonObject.has("bj") ? Integer.parseInt(jsonObject.getString("bj")) : 0;
		// bj=1,ipad离线开票删除单据
		long accid = htp.getMaccid();
		String lastop = htp.getUsername();

		Wareouth dal = new Wareouth();
		dal.setAccid(accid);
		dal.setNoteno(noteno);
		dal.setOperant(lastop);
		if (bj == 1) {// bj=1,ipad离线开票删除单据
			if (dal.Delete1() == 0)
				WriteResult(response, 0, dal.getErrmess());
			else {
				int ntid = dal.getNtid();
				if (bj == 0) {
					if (ntid == 0)
						pFunc.myWriteLog(accid, "零售开票", "【删除单据】" + noteno, lastop);
					else if (ntid == 1)
						pFunc.myWriteLog(accid, "批发开票", "【删除单据】" + noteno, lastop);
					else
						pFunc.myWriteLog(accid, "批发退货", "【删除单据】" + noteno, lastop);
				} else {
					if (ntid == 0)
						pFunc.myWriteLog(accid, "零售开票", "【离线删除单据】" + noteno, lastop);
					else if (ntid == 1)
						pFunc.myWriteLog(accid, "批发开票", "【离线删除单据】" + noteno, lastop);
					else
						pFunc.myWriteLog(accid, "批发退货", "【离线删除单据】" + noteno, lastop);

				}
				WriteResult(response, 1, dal.getErrmess());
			}

			return;
		}

		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			int ntid = dal.getNtid();
			if (bj == 0) {
				if (ntid == 0)
					pFunc.myWriteLog(accid, "零售开票", "【删除单据】" + noteno, lastop);
				else if (ntid == 1)
					pFunc.myWriteLog(accid, "批发开票", "【删除单据】" + noteno, lastop);
				else
					pFunc.myWriteLog(accid, "批发退货", "【删除单据】" + noteno, lastop);
			} else {
				if (ntid == 0)
					pFunc.myWriteLog(accid, "零售开票", "【离线删除单据】" + noteno, lastop);
				else if (ntid == 1)
					pFunc.myWriteLog(accid, "批发开票", "【离线删除单据】" + noteno, lastop);
				else
					pFunc.myWriteLog(accid, "批发退货", "【离线删除单据】" + noteno, lastop);

			}
			WriteResult(response, 1, dal.getErrmess());
		}
	}

	// 提交销售单至收银台
	protected void SubmitWareouth(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		int ntid = jsonObject.has("ntid") ? Integer.parseInt(jsonObject.getString("ntid")) : 0;
		int zt = jsonObject.has("zt") ? Integer.parseInt(jsonObject.getString("zt")) : 0;
		// zt=0 提交 statetag 0->3 zt=1 取消提交 3->1

		int fs = htp.getFsout();
		// if (Func.subString(qxpublic, 2, 1).equals("1"))
		// fs = 1; // 允许负出库
		Wareouth dal = new Wareouth();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setHouseid(houseid);
		dal.setRemark(remark);
		dal.setHandno(handno);
		dal.setNtid(ntid);
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		// dal.setFhtag(fhtag);

		WriteResult(response, dal.Tocash(zt, fs), dal.getErrmess());
	}

	// 设置批发出库发货标志
	protected void SetWareoutfhtag(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String noteno = jsonObject.has("noteno") ?
		// jsonObject.getString("noteno").replace("'", "''") : "";
		// String waybillno = jsonObject.has("waybillno") ?
		// jsonObject.getString("waybillno") : "";
		// String waybillno = jsonObject.has("waybillno") ?
		// jsonObject.getString("waybillno") : "";
		// int fhtag = jsonObject.has("fhtag") ?
		// Integer.parseInt(jsonObject.getString("fhtag")) : 0;
		// long carryid = jsonObject.has("carryid") ?
		// Long.parseLong(jsonObject.getString("carryid")) : 0;
		// if (fhtag < 0 || fhtag > 1) {
		// WriteResult(response, 0, "发货标志无效");
		// return;
		// }
		Wareouth dal = new Wareouth();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		// dal.setNoteno(noteno);
		// dal.setFhtag(fhtag);
		// dal.setCarryid(carryid);
		// dal.setWaybillno(waybillno);
		WriteResult(response, dal.Update(), dal.getErrmess());

	}

	// 更新指定前台收银记录id信息
	protected void UpdateWaresalehByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		float jfrate = htp.getJfrate();// Integer.parseInt(Func.subString(qxpublic,
										// 5, 4));
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
		int fs = htp.getFsout();//
		int changedatebj = htp.getChangedatebj();//
		int openvipcity = htp.getOpenvipcity();// 1=开通会员商城
		Wareouth dal = new Wareouth();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setNtid(0);
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		dal.setSmsuid(htp.getSmsuid());
		dal.setSmsuser(htp.getSmsuser());
		dal.setSmspwd(htp.getSmspwd());
		dal.setTjspjf(htp.getTjspjf());
		WriteResult(response, dal.Update(jsonObject, changedatebj, fs, jfrate, priceprec, openvipcity), dal.getErrmess());
	}

	// 更新指定客户退货申请单记录
	protected void UpdateRefundaskhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String noteno = jsonObject.has("noteno") ?
		// jsonObject.getString("noteno").replace("'", "''") : "";
		int changedatebj = htp.getChangedatebj();

		Refundouth dal = new Refundouth();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		WriteResult(response, dal.Update(jsonObject, changedatebj), dal.getErrmess());
	}

	// 更新指定采购入库记录id信息
	protected void UpdateWareinhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String noteno = jsonObject.has("noteno") ?
		// jsonObject.getString("noteno").replace("'", "''") : "";

		int changeenterprice = htp.getChangeenterprice();// int.Parse(qxpublic.Substring(9
															// - 1, 1));

		int fs = htp.getFsout();

		int changedatebj = htp.getChangedatebj();

		int housecostbj = htp.getHousecostbj();
		int autogd = htp.getAutogd();

		Wareinh dal = new Wareinh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Update(jsonObject, changedatebj, changeenterprice, housecostbj, fs, autogd), dal.getErrmess());
	}

	// 更新指定调拨入库记录id信息
	protected void UpdateAllotinhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		int changedatebj = htp.getChangedatebj();
		Allotinh dal = new Allotinh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Update(changedatebj), dal.getErrmess());

	}

	// 更新指定客户订单记录id信息
	protected void UpdateCustorderhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Custorderh dal = new Custorderh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());

		WriteResult(response, dal.Update(), dal.getErrmess());

	}

	// 更新指定采购订单记录id信息
	protected void UpdateProvorderhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Provorderh dal = new Provorderh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 更新指定调拨订货记录id信息
	protected void UpdateAllotorderhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Allotorderh dal = new Allotorderh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 更新指定调拨出库记录id信息
	protected void UpdateAllotouthByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int fs = htp.getFsout();
		int changedatebj = htp.getChangedatebj();// 允许更改单据日期
		Allotouth dal = new Allotouth();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Update(changedatebj, fs), dal.getErrmess());
	}

	// 更新指定批发出库记录id信息
	protected void UpdateWareouthByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int fs = htp.getFsout();
		int changedatebj = htp.getChangedatebj();
		Wareouth dal = new Wareouth();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());

		int autogd = htp.getAutogd();
		int housecostbj = htp.getHousecostbj();

		WriteResult(response, dal.Update1(jsonObject, changedatebj, fs, autogd, housecostbj), dal.getErrmess());
	}

	// 新增商场开票记录
	protected void AddShopsalehRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long custid = jsonObject.has("custid") ?
		// Long.parseLong(jsonObject.getString("custid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long dptid = jsonObject.has("dptid") ? Long.parseLong(jsonObject.getString("dptid")) : 0;
		Shopsaleh dal = new Shopsaleh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		// dal.setCustid(custid);
		dal.setHouseid(houseid);
		dal.setDptid(dptid);
		// dal.setNtid(ntid);
		WriteResultJson(response, dal.Append(htp.getUserid()), dal.getErrmess());

		// if (dal.Append(htp.getUserid()) == 0)
		// WriteResult(response, 0, dal.getErrmess());
		// else
		// WriteResultJson(response, 1, dal.getErrmess());
	}

	// excel转销售出库
	protected void Excel2Wareout(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Wareouth dal = new Wareouth();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setAccbegindate(htp.getAccdate());
		dal.setNewdatetime(htp.getNowdatetime());
		dal.setCalcdate(htp.getCalcdate());

		//		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.doExcel2wareout(jsonObject), dal.getErrmess());
	}

	// json生成转期初入库单
	protected void Json2Firsthouse(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Firsthouseh dal = new Firsthouseh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		//		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		if (dal.json2note(jsonObject) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// json生成采购入库单
	protected void Json2Warein(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Wareinh dal = new Wareinh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		//		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		if (dal.json2note(jsonObject) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// json生成采购订单
	protected void Json2Provorder(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Provorderh dal = new Provorderh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		//		dal.setOperant(htp.getUsername());
		//		dal.setCalcdate(htp.getCalcdate());
		if (dal.json2note(jsonObject) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// json生成客户订单
	protected void Json2Custorder(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Custorderh dal = new Custorderh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		//		dal.setOperant(htp.getUsername());
		//		dal.setCalcdate(htp.getCalcdate());
		if (dal.json2note(jsonObject) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// json生成调拨订单
	protected void Json2Allotorder(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Allotorderh dal = new Allotorderh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		//		dal.setOperant(htp.getUsername());
		//		dal.setCalcdate(htp.getCalcdate());
		if (dal.json2note(jsonObject) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// json生成调拨出库
	protected void Json2Allotout(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Allotouth dal = new Allotouth();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		//		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		if (dal.json2note(jsonObject) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// json生成调拨入库
	protected void Json2Allotin(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Allotinh dal = new Allotinh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		//		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		if (dal.json2note(jsonObject) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// json生成临时盘点单
	protected void Json2Tempcheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Tempcheckh dal = new Tempcheckh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		//		dal.setOperant(htp.getUsername());
		//		dal.setCalcdate(htp.getCalcdate());
		if (dal.json2note(jsonObject) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// json生成库存盘点单
	protected void Json2Warecheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Warecheckh dal = new Warecheckh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		//		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		if (dal.json2note(jsonObject) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// json生成销售出库单
	protected void Json2Wareout(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Wareouth dal = new Wareouth();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		//		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		if (dal.json2note(jsonObject) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 离线开票转销售出库
	protected void Offline2Wareout(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Wareouth dal = new Wareouth();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.doOffline2wareout(jsonObject), dal.getErrmess());
	}

	// 离线开票转商场场零售
	protected void Offline2Shopsale(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Shopsaleh dal = new Shopsaleh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.doOffline2shopsale(jsonObject), dal.getErrmess());
	}

	// 新增销售出库记录
	protected void AddWareouthRec(HttpServletResponse response, HttpInfo htp, int ntid) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long dptid = jsonObject.has("dptid") ? Long.parseLong(jsonObject.getString("dptid")) : 0;
		int noxsman = jsonObject.has("noxsman") ? Integer.parseInt(jsonObject.getString("noxsman")) : 0;
		long epid = htp.getUserid();
		if (noxsman == 1) // 1=不自动默认销售人
			epid = 0;
		Wareouth dal = new Wareouth();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCustid(custid);
		dal.setHouseid(houseid);
		dal.setDptid(dptid);
		dal.setNtid(ntid);
		WriteResultJson(response, dal.Append(epid), dal.getErrmess());
	}

	// 新增调拨出库记录
	protected void AddAllotouthRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		Allotouth dal = new Allotouth();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		// dal.setProvid(provid);
		dal.setHouseid(houseid);
		// dal.setNtid(ntid);
		WriteResultJson(response, dal.Append(), dal.getErrmess());
	}

	// 获取商场零售记录列表
	protected void GetShopsalemList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		// long accid = htp.getMaccid();
		if (accid == 0)
			accid = htp.getMaccid();
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = "";
		if (sortid == 1)
			sort = " id ";
		else
			sort = "  wareid,colorid,sizeid,id ";// + order;
		String strwhere = " a.accid=" + accid + " and a.noteno='" + noteno + "'";

		if (fieldlist.equals("*") || fieldlist.length() <= 0) {
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.WAREID,A.COLORID,A.SIZEID,A.HOUSEID,A.AMOUNT,A.PRICE0,A.DISCOUNT,A.PRICE,A.CURR,A.REMARK0,B.WARENO,B.WARENAME,B.UNITS,C.COLORNAME,D.SIZENAME,E.HOUSENAME";
		}
		Shopsalem dal = new Shopsalem();
		// dal.setXtbj(0);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// System.out.println("1111");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取指定销售出库明细id信息
	protected void GetWareoutmByID(HttpServletResponse response, HttpInfo htp, int ntid) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		String strWhere = " a.ID=" + id + " and a.NOTENO='" + noteno + "' and a.ACCID=" + htp.getMaccid();

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			if (ntid == 1) {
				fieldlist = "A.ID,A.NOTENO,A.ACCID,A.WAREID,A.COLORID,A.SIZEID,A.SALEID,A.AMOUNT,A.PRICE0,A.DISCOUNT,A.PRICE,A.CURR,A.REMARK0,B.WARENO,B.WARENAME,B.UNITS,C.COLORNAME,D.SIZENAME,E.SALENAME";
			} else {
				fieldlist = "A.ID,A.NOTENO,A.ACCID,A.WAREID,A.COLORID,A.SIZEID,A.AMOUNT,A.PRICE0,A.DISCOUNT,A.PRICE,A.CURR,A.REMARK0,B.WARENO,B.WARENAME,B.UNITS,C.COLORNAME,D.SIZENAME";
			}
		Wareoutm dal = new Wareoutm();
		// dal.setXtbj(0);
		// QueryParam qp = new QueryParam(page, pagesize, sort);
		// System.out.println("1111");
		Table tb = new Table();
		if (ntid == 1)
			tb = dal.GetList1(strWhere, fieldlist).getTable(1);
		else
			tb = dal.GetList0(strWhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取指定商场销售出库明细id信息
	protected void GetShopsalemByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		String strWhere = " a.ID=" + id + " and a.NOTENO='" + noteno + "' and a.ACCID=" + htp.getMaccid();

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.WAREID,A.COLORID,A.SIZEID,A.HOUSEID,A.AMOUNT,A.PRICE0,A.DISCOUNT,A.PRICE,A.CURR,A.REMARK0,B.WARENO,B.WARENAME,B.UNITS,C.COLORNAME,D.SIZENAME,E.HOUSENAME,F.EPNAME";

		Shopsalem dal = new Shopsalem();

		// dal.setXtbj(0);
		// QueryParam qp = new QueryParam(page, pagesize, sort);
		// System.out.println("1111");
		Table tb = new Table();

		tb = dal.GetList(strWhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 获取配货记录列表
	protected void GetWarepeimList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;

		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareid " + order + ",colorid,sizeid,id ";// + order;
		String strwhere = " a.accid=" + accid + " and a.noteno='" + noteno + "'";

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.WAREID,a.COLORID,a.SIZEID,a.AMOUNT,a.PRICE0,a.DISCOUNT,a.PRICE,a.CURR,a.REMARK0,B.WARENO,B.WARENAME,B.UNITS,B.IMAGENAME0,C.COLORNAME,D.SIZENAME";

		Warepeim dal = new Warepeim();
		// dal.setXtbj(0);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// System.out.println("1111");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取批发出库,批发退库，零售出库记录列表
	protected void GetWareoutmList(HttpServletResponse response, HttpInfo htp, int ntid) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;

		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareid " + order + ",colorid,sizeid,id ";// + order;
		String strwhere = " a.accid=" + accid + " and a.noteno='" + noteno + "'";

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			if (ntid == 1) {
				fieldlist = "A.ID,A.NOTENO,A.ACCID,A.WAREID,A.COLORID,A.SIZEID,A.SALEID,A.AMOUNT,A.PRICE0,A.DISCOUNT,A.PRICE,A.CURR,A.REMARK0,B.WARENO,B.WARENAME,B.UNITS,B.IMAGENAME0,C.COLORNAME,D.SIZENAME,E.SALENAME";
			} else {
				fieldlist = "A.ID,A.NOTENO,A.ACCID,A.WAREID,A.COLORID,A.SIZEID,A.AMOUNT,A.PRICE0,A.DISCOUNT,A.PRICE,A.CURR,A.REMARK0,B.WARENO,B.WARENAME,B.UNITS,B.IMAGENAME0,C.COLORNAME,D.SIZENAME";
			}

		Wareoutm dal = new Wareoutm();
		// dal.setXtbj(0);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// System.out.println("1111");
		Table tb = new Table();
		if (ntid == 0) // 零售
		{
			tb = dal.GetTable0(qp, strwhere, fieldlist);
		} else // 经销
		{
			tb = dal.GetTable1(qp, strwhere, fieldlist);
		}
		if (page < 0) {
			// System.out.println("11111");
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			// System.out.println("22222");

			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;

		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取调拨入库记录列表
	protected void GetAllotinmList(HttpServletResponse response, HttpInfo htp, int ntid) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;

		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareid " + order + ",colorid,sizeid,id ";// + order;
		String strwhere = " a.accid=" + accid + " and a.noteno='" + noteno + "'";

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.WAREID,A.COLORID,A.SIZEID,A.AMOUNT,A.PRICE,A.CURR,A.REMARK0,B.WARENO,B.WARENAME,B.UNITS,B.IMAGENAME0,C.COLORNAME,D.SIZENAME";

		Allotinm dal = new Allotinm();
		// dal.setXtbj(0);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// System.out.println("1111");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {
			// System.out.println("11111");
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			// System.out.println("22222");

			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;

		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取期初入库记录列表
	protected void GetFirsthousemList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;

		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareid " + order + ",colorid,sizeid,id ";// + order;
		String strwhere = " a.accid=" + accid + " and a.noteno='" + noteno + "'";

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.WAREID,A.COLORID,A.SIZEID,A.AMOUNT,A.PRICE,A.CURR,A.REMARK0,B.WARENO,B.WARENAME,B.UNITS,B.IMAGENAME0,C.COLORNAME,D.SIZENAME";

		Firsthousem dal = new Firsthousem();
		// dal.setXtbj(0);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// System.out.println("1111");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {
			// System.out.println("11111");
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			// System.out.println("22222");

			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;

		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取客户期初入库记录列表
	protected void GetFirstcustmList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;

		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareid " + order + ",colorid,sizeid,id ";// + order;
		String strwhere = " a.accid=" + accid + " and a.noteno='" + noteno + "'";

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.WAREID,A.COLORID,A.SIZEID,A.AMOUNT,A.PRICE,A.CURR,A.REMARK0,B.WARENO,B.WARENAME,B.UNITS,B.IMAGENAME0,C.COLORNAME,D.SIZENAME";

		Firstcustm dal = new Firstcustm();
		// dal.setXtbj(0);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// System.out.println("1111");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {
			// System.out.println("11111");
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			// System.out.println("22222");
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取临时盘点记录列表
	protected void GetTempcheckmList(HttpServletResponse response, HttpInfo htp, int ntid) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;

		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareid " + order + ",colorid,sizeid,id ";// + order;
		String strwhere = " a.accid=" + accid + " and a.noteno='" + noteno + "'";

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.WAREID,A.COLORID,A.SIZEID,A.AMOUNT,A.PRICE,A.CURR,A.REMARK0,B.WARENO,B.WARENAME,B.UNITS,B.IMAGENAME0,C.COLORNAME,D.SIZENAME";

		Tempcheckm dal = new Tempcheckm();
		// dal.setXtbj(0);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// System.out.println("1111");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {
			// System.out.println("11111");
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			// System.out.println("22222");

			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;

		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取采购入库记录列表
	protected void GetmList(HttpServletResponse response, HttpInfo htp, int ntid) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;

		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareid " + order + ",colorid,sizeid,id ";// + order;
		String strwhere = " a.accid=" + accid + " and a.noteno='" + noteno + "'";

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.WAREID,A.COLORID,A.SIZEID,A.AMOUNT,A.PRICE0,a.price,a.discount,A.CURR,A.REMARK0,B.WARENO,B.WARENAME,B.UNITS,B.IMAGENAME0,C.COLORNAME,D.SIZENAME";

		Wareinm dal = new Wareinm();
		// dal.setXtbj(0);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// System.out.println("1111");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist, 0);
		if (page < 0) {
			// System.out.println("11111");
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			// System.out.println("22222");

			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;

		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取调拨出库记录列表
	protected void GetAllotoutmList(HttpServletResponse response, HttpInfo htp, int ntid) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;

		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareid " + order + ",colorid,sizeid,id ";// + order;
		String strwhere = " a.accid=" + accid + " and a.noteno='" + noteno + "'";

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.WAREID,A.COLORID,A.SIZEID,A.AMOUNT,A.PRICE,A.CURR,A.REMARK0,B.WARENO,B.WARENAME,B.UNITS,B.IMAGENAME0,C.COLORNAME,D.SIZENAME";

		Allotoutm dal = new Allotoutm();
		// dal.setXtbj(0);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// System.out.println("1111");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {
			// System.out.println("11111");
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			// System.out.println("22222");

			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;

		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取客户订单记录列表
	protected void GetCustordermList(HttpServletResponse response, HttpInfo htp, int ntid) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;

		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareid " + order + ",colorid,sizeid,id ";// + order;
		String strwhere = " a.accid=" + accid + " and a.noteno='" + noteno + "'";

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.WAREID,A.COLORID,A.SIZEID,A.AMOUNT,A.PRICE0,A.DISCOUNT,A.PRICE,A.CURR,A.REMARK0,B.WARENO,B.WARENAME,B.UNITS,B.IMAGENAME0,C.COLORNAME,D.SIZENAME";

		Custorderm dal = new Custorderm();
		// dal.setXtbj(0);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// System.out.println("1111");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {
			// System.out.println("11111");
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			// System.out.println("22222");

			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;

		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取采购订单记录列表
	protected void GetProvordermList(HttpServletResponse response, HttpInfo htp, int ntid) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;

		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareid " + order + ",colorid,sizeid,id ";// + order;
		String strwhere = " a.accid=" + accid + " and a.noteno='" + noteno + "'";

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.WAREID,A.COLORID,A.SIZEID,A.AMOUNT,A.PRICE0,A.DISCOUNT,A.PRICE,A.CURR,A.REMARK0,B.WARENO,B.WARENAME,B.UNITS,B.IMAGENAME0,C.COLORNAME,D.SIZENAME";

		Provorderm dal = new Provorderm();
		// dal.setXtbj(0);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// System.out.println("1111");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {
			// System.out.println("11111");
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			// System.out.println("22222");

			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;

		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取采购记录列表
	protected void GetWareinmList(HttpServletResponse response, HttpInfo htp, int ntid) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;

		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareid " + order + ",colorid,sizeid,id ";// + order;
		String strwhere = " a.accid=" + accid + " and a.noteno='" + noteno + "'";

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.WAREID,A.COLORID,A.SIZEID,A.AMOUNT,A.PRICE0,A.DISCOUNT,A.PRICE,A.CURR,A.REMARK0,B.WARENO,B.WARENAME,B.UNITS,B.IMAGENAME0,C.COLORNAME,D.SIZENAME";

		Wareinm dal = new Wareinm();
		// dal.setXtbj(0);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// System.out.println("1111");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist, 0);
		if (page < 0) {
			// System.out.println("11111");
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			// System.out.println("22222");

			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;

		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取批发出库,批发退库，零售出库记录列表
	protected void GetWareouthList(HttpServletResponse response, HttpInfo htp, int ntid) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		// long areaid = jsonObject.has("areaid") ?
		// Long.parseLong(jsonObject.getString("areaid")) : 0;
		long dptid = jsonObject.has("dptid") ? Long.parseLong(jsonObject.getString("dptid")) : 0;
		long salemanid = jsonObject.has("salemanid") ? Long.parseLong(jsonObject.getString("salemanid")) : 0;

		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String waybillno = jsonObject.has("waybillno") ? jsonObject.getString("waybillno") : "";
		String ywnoteno = jsonObject.has("ywnoteno") ? jsonObject.getString("ywnoteno") : "";
		String orderno = jsonObject.has("orderno") ? jsonObject.getString("orderno") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "desc";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "notedate";
		sort += " " + order + ",id ";// +order;

		// String provname = jsonObject.has("provname") ?
		// jsonObject.getString("provname").replace("'", "''") : "";
		// String wareno = jsonObject.has("wareno") ?
		// jsonObject.getString("wareno").replace("'", "''") : "";
		// String wareno = jsonObject.has("wareno") ?
		// jsonObject.getString("wareno").replace("'", "''") : "";

		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;

		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";
		String vipfindbox = jsonObject.has("vipfindbox") ? jsonObject.getString("vipfindbox") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String cashier = jsonObject.has("cashier") ? jsonObject.getString("cashier") : "";

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 2;
		int sumtag = jsonObject.has("sumtag") ? Integer.parseInt(jsonObject.getString("sumtag")) : 0;// sumtag=1，要返回结算方式的汇总

		int fhtag = jsonObject.has("fhtag") ? Integer.parseInt(jsonObject.getString("fhtag")) : 2;

		String lastop = htp.getUsername();

		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		// String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String strwhere = " a.ACCID=" + htp.getMaccid() + "  and a.ntid=" + ntid;
		if (ywly == 0) {// ywly=0 只查询手机端增加的单据，用于向erp传数据
			strwhere += " and a.ywly=" + ywly;
			if (statetag < 2)
				strwhere += " and a.statetag=" + statetag; // 已提 交
		} else {
			if (htp.getLevelid() == 0) // 系统管理员允许看所有用户的单据
			{
				if (statetag == 0)
					strwhere += " and (a.statetag=0 or a.statetag=3) "; // 未提 交
				else if (statetag == 1)
					strwhere += " and a.statetag=1"; // 已提 交
				else
					strwhere += " and (a.STATETAG=1 or a.STATETAG=0 or a.STATETAG=3)"; // 所有

			} else {

				if (statetag == 0)
					strwhere += " and (a.statetag=0 or a.statetag=3) and a.operant='" + lastop + "'"; // 未提
																									// 交
				else if (statetag == 1)
					strwhere += " and a.statetag=1"; // 已提 交
				else
					strwhere += " and (a.STATETAG=1 or a.operant='" + lastop + "' and (a.statetag=0 or a.statetag=3)  )"; // 所有
			}
		}
		// qry += " and (a.STATETAG=1 or a.STATETAG=0 and a.operant='" + lastop
		// + "')"; //所有

		//		if (ywly < 2)
		//			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据
		if (fhtag < 2)
			strwhere += " and a.fhtag=" + fhtag;// ywly=0 只查询手机端增加的单据，用于向erp传数据
		if (ntid == 0) // 零售
		{
			String guestname = jsonObject.has("guestname") ? jsonObject.getString("guestname") : "";

			if (guestname.length() > 0)
				strwhere += " and b.guestname like '%" + guestname + "%'";
			if (findbox != null && findbox.length() > 0)
				strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" //
						+ findbox + "%' or b.guestname like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase() + "%'" //
						+ " or c.housename like '%" + findbox + "%' or c.shortname like '%" + findbox.toUpperCase() + "%')";
		} else {
			if (findbox != null && findbox.length() > 0)
				strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" //
						+ findbox + "%' or b.custname like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase() + "%'"//
						+ " or c.housename like '%" + findbox + "%' or c.shortname like '%" + findbox.toUpperCase() + "%')";
		}
		if (dptid > 0)
			strwhere += " and a.dptid = " + dptid;
		if (salemanid > 0)
			strwhere += " and exists (select 1 from waresaleman a1 where a1.accid=a.accid and a1.noteno=a.noteno and a1.epid=" + salemanid + ")";
		if (ntid == 0 && vipfindbox.length() > 0) {
			strwhere += " and (b.guestname like '%" + vipfindbox + "%' or b.vipno like '%" + vipfindbox.toUpperCase() + "%' or b.mobile  like '%" + vipfindbox + "%')";
		}

		if (custid > 0)
			strwhere += " and a.custid = " + custid;
		// else if (provname != null && provname != "")
		// strwhere += " and (b.provname like '%" + provname + "%' or
		// b.shortname like '%" + provname.ToUpper() + "%')";

		if (houseid > 0)
			strwhere += " and a.HOUSEID = " + houseid;
		// else if (housename != null && housename != "")
		// strwhere += " and (c.housename like '%" + housename + "%' or
		// c.shortname like '%" + housename.ToUpper() + "%')";
		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";

		if (cashier.length() > 0)
			strwhere += " and a.cashier like '%" + cashier + "%'";

		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";

		if (waybillno.length() > 0)
			strwhere += " and a.waybillno like '%" + waybillno.toUpperCase() + "%'";

		if (ywnoteno.length() > 0)
			strwhere += " and a.ywNOTENO like '%" + ywnoteno.toUpperCase() + "%'";
		if (orderno.length() > 0)
			strwhere += " and a.orderno like '%" + orderno.toUpperCase() + "%'";

		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";

		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";

		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		// qry += " and a.notedate >= to_date('" + mindate + " 00:00:00' and
		// a.notedate<='" + maxdate + " 23:59:59'";

		if (htp.getQxbj() == 1) {// 1 启用权限控制
			strwhere += " and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
			strwhere += " and (a.custid=0 or exists (select 1 from employecust x where a.custid=x.custid and x.EPID=" + htp.getUserid() + "))";
		}
		if (wareid > 0 || wareno.length() > 0) {
			strwhere += " and exists (select 1 from wareoutm x ";
			// if ( wareid == 0 && wareno != null && wareno != "")
			strwhere += " join warecode y on x.wareid=y.wareid";
			strwhere += " where a.accid=x.accid and a.noteno=x.noteno ";
			// if (areaid > 0)
			// strwhere += " and y.areaid=" + areaid;
			if (wareid > 0)
				strwhere += " and x.wareid=" + wareid;
			else if (wareno != null && wareno.length() > 0) {
				strwhere += " and y.wareno like '%" + wareno + "%'";
			}
			strwhere += "  )";

		}

		// if ( wareid != 0) //如果转入epid,说明要判断职员仓库权限
		// { qry += " and exists (select 1 from wareinm x where a.accid=x.accid
		// and a.noteno=x.noteno and x.wareid=" + wareid + ")"; }
		// else if (wareno != null && wareno != "")
		// {
		// qry += " and exists (select 1 from wareinm x,warecode y where
		// x.wareid=y.wareid and a.accid=x.accid and a.noteno=x.noteno and
		// y.wareno like '%" + wareno + "%')";
		// }

		Wareouth dal = new Wareouth();
		dal.setSumtag(sumtag);
		dal.setNtid(ntid);
		// dal.setXtbj(0);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		// System.out.println("1111");
		Table tb = new Table();
		if (ntid == 0) // 零售
		{
			if (fieldlist.equals("*") || fieldlist.length() <= 0)
				fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.GUESTID,a.HOUSEID,a.NTID,a.HANDNO,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,B.GUESTNAME,a.TOTALAMT,a.TOTALCURR,d.DISCOUNT";
			if (!fieldlist.toUpperCase().contains("A.NTID"))
				fieldlist += ",A.NTID";
			// dt = dal.GetTableX(qp, out rs, out totalamount, out totalcurr,
			// qry, fieldlist,out sumlist);
			tb = dal.GetTable0(qp, strwhere, fieldlist);
		} else // 经销
		{
			if (fieldlist.equals("*") || fieldlist.length() <= 0)
				fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.CUSTID,a.HOUSEID,a.NTID,a.HANDNO,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,B.CUSTNAME,B.DISCOUNT,B.PRICETYPE,C.HOUSENAME,a.TOTALAMT,a.TOTALCURR";
			if (!fieldlist.toUpperCase().contains("A.NTID"))
				fieldlist += ",A.NTID";
			// dt = dal.GetTable(qp, out rs, out totalamount, out totalcurr,
			// qry, fieldlist, out sumlist);
			// System.out.println("2222");
			tb = dal.GetTable1(qp, strwhere, fieldlist);
		}
		// System.out.println(fieldlist.toUpperCase());
		if (page < 0) {// 导出excel
			// System.out.println("11111");
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			// System.out.println("22222");

			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取指定初始入库单记录id信息
	protected void GetFirsthousehByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		String strwhere = " a.NOTENO='" + noteno + "' and a.ACCID=" + accid;

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.NOTEDATE,A.HOUSEID,A.NTID,A.HANDNO,A.REMARK,A.OPERANT,A.CHECKMAN,A.STATETAG,A.LASTDATE,B.HOUSENAME";
		fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";
		Firsthouseh dal = new Firsthouseh();

		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取指定初始入库单记录id信息
	protected void GetFirstcusthByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		String strwhere = " a.NOTENO='" + noteno + "' and a.ACCID=" + accid;
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.NOTEDATE,A.HOUSEID,A.NTID,A.HANDNO,A.REMARK,A.OPERANT,A.CHECKMAN,A.STATETAG,A.LASTDATE,B.HOUSENAME";
		fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";
		Firstcusth dal = new Firstcusth();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取指定销售出记录id信息
	protected void GetCustsalehByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		String strwhere = " a.NOTENO='" + noteno + "' and a.ACCID=" + accid;
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.NOTEDATE,A.CUSTID,A.HANDNO,A.REMARK,A.OPERANT,A.CHECKMAN,A.STATETAG,A.LASTDATE,B.CUSTNAME";
		fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";
		Custsaleh dal = new Custsaleh();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取指定调拨出库单记录id信息
	protected void GetAllotouthByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		String strwhere = " a.NOTENO='" + noteno + "' and a.ACCID=" + accid;

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.HOUSEID,a.TOHOUSEID,a.NTID,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,B.HOUSENAME";
		fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";
		Allotouth dal = new Allotouth();

		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取指定调拨入库单记录id信息
	protected void GetAllotinhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		String strwhere = " a.NOTENO='" + noteno + "' and a.ACCID=" + accid;

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.NOTEDATE,A.HOUSEID,A.NOTENO1,A.NTID,A.REMARK,A.HANDNO,A.OPERANT,A.CHECKMAN,A.STATETAG,A.LASTDATE,B.HOUSENAME";
		fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";
		Allotinh dal = new Allotinh();

		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取指定客户退货申请单记录id信息
	protected void GetRefundaskhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String strwhere = " a.NOTENO='" + noteno.toUpperCase() + "' and a.ACCID=" + htp.getMaccid();
		// if (id > 0) qry += " and a.id=" + id;
		Refundouth dal = new Refundouth();
		Table tb = new Table();
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.CUSTID,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,b.CUSTNAME";

		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取指定销售出库单记录id信息
	protected void GetWareouthByID(HttpServletResponse response, HttpInfo htp, int ntid) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long xsaccid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (xsaccid > 0)
			accid = xsaccid;
		String strwhere = " a.NOTENO='" + noteno + "' and a.ACCID=" + accid;
		// if (id > 0) qry += " and a.id=" + id;
		Wareouth dal = new Wareouth();
		// System.out.println("ntid=" + ntid);
		Table tb = new Table();
		if (ntid == 0) // 零售
		{
			if (fieldlist.equals("*") || fieldlist.length() <= 0)
				fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.GUESTID,a.HOUSEID,a.NTID,a.HANDNO,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,C.HOUSENAME,B.GUESTNAME,d.DISCOUNT,a.CENT,a.totalcurr,a.freecurr,a.usecent,a.jfcurr,a.checkcurr,a.zpaycurr,a.changecurr";
			fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";
			tb = dal.GetList0(strwhere, fieldlist).getTable(1);
		} else // 批发
		{
			if (fieldlist.equals("*") || fieldlist.length() <= 0)
				fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.CUSTID,a.HOUSEID,a.NTID,a.HANDNO,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,B.CUSTNAME,B.DISCOUNT,B.PRICETYPE,C.HOUSENAME,a.totalcurr,a.freecurr,a.checkcurr,a.zpaycurr";
			fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";
			tb = dal.GetList1(strwhere, fieldlist).getTable(1);
		}
		// tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取指定采购入库单记录id信息
	protected void GetWareinhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		String strwhere = " a.ACCID=" + accid + " and a.NOTENO='" + noteno.toUpperCase() + "'";

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.PROVID,a.HOUSEID,a.NTID,a.HANDNO,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,a.TOTALAMT,a.TOTALCURR,a.totalcost,B.PROVNAME,B.DISCOUNT,B.PRICETYPE,C.HOUSENAME";
		fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";
		// strSql.append(",case To_Char(a.notedate,'yyyy-mm-dd') when
		// To_Char(SYSDATE,'yyyy-mm-dd') then '1' else '0' end as istoday");
		// System.out.println(strwhere);
		Wareinh dal = new Wareinh();

		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取在途调拨出库记录列表,调入方仓库查看在途调拨单,必须传入tohouseid
	protected void GetAllotouthonList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		//		long tohouseid = jsonObject.has("tohouseid") ? Long.parseLong(jsonObject.getString("tohouseid")) : 0;
		// long wareid = jsonObject.has("wareid") ?
		// Long.parseLong(jsonObject.getString("wareid")) : 0;
		// String wareno = jsonObject.has("wareno") ?
		// jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String housename = jsonObject.has("housename") ? jsonObject.getString("housename") : "";
		// String tohousename = jsonObject.has("tohousename") ?
		// jsonObject.getString("tohousename") : "";
		// String wareno = jsonObject.has("wareno") ?
		// jsonObject.getString("wareno").replace("'", "''") : "";

		// String currdate = htp.getNowdate();//
		// Func.DateToStr(pFunc.getServerdatetime(), "yyyy-MM-dd");
		// String mindate = jsonObject.has("mindate") ?
		// jsonObject.getString("mindate") : currdate;
		// String maxdate = jsonObject.has("maxdate") ?
		// jsonObject.getString("maxdate") : currdate;

		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// int ywly = jsonObject.has("ywly") ?
		// Integer.parseInt(jsonObject.getString("ywly")) : 2;
		// int statetag = jsonObject.has("statetag") ?
		// Integer.parseInt(jsonObject.getString("statetag")) : 2;
		// int ywly = jsonObject.has("ywly") ?
		// Integer.parseInt(jsonObject.getString("ywly")) : 2;
		// String lastop = htp.getUsername();
		long levelid = htp.getLevelid();
		// levelid:
		// 0=系统管理员,1=店员（代理业务员）,2=店长（代理业务主管）,3=财务,4=经理,5=老板,6=督导（公司主管）,7=收银员（公司业务）,8=AD客服,9=库管(程序员)
		// int maxday = 0;
		// try {
		// maxday = Integer.parseInt(Func.subString(rolepublic, 4, 3));
		// } catch (Exception e) {
		// maxday = 0;
		// }
		// 校验开始查询日期
		// MinDateValid mdv = new MinDateValid(mindate, currdate,
		// htp.getAccdate(), 0);
		// mindate = mdv.getMindate();
		// // String mess = mdv.getErrmess();
		// if (mindate.compareTo(maxdate) > 0)
		// maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String sort = " notedate desc,id ";// +order;
		// String strwhere = " a.ACCID=" + htp.getMaccid();
		String strwhere = " a.ACCID=" + htp.getMaccid() + " and a.STATETAG=1 and a.ywly=0 and a.cleartag=0";

		strwhere += " and (a.noteno1='' or a.noteno1 is null)";
		// strwhere += " and not exists (select 1 from allotinh a1 where
		// a.accid=a1.accid and a.noteno=a1.noteno1 and a1.statetag<=1)"; //
		// 已经对应调出单的单据不再显示
		if (htp.getQxbj() == 1) {// 1 启用权限控制
			strwhere += " and (a.tohouseid=0 or exists (select 1 from employehousein  x where a.toHOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
		} else {//未启用权限控制
			if (levelid != 0 && levelid != 4 && levelid != 5) // 0系统管理员,4经理,5老板 允许看所有的在途调拨单
				//只允许查看当前用户所属店铺的单据
				strwhere += " and exists (select 1 from employe b where a.tohouseid=b.houseid and b.epid=" + htp.getUserid() + ")";
		}

		//		if (levelid != 0 && levelid != 4 && levelid != 5) // 0系统管理员,4经理,5老板 允许看所有的在途调拨单
		//			if (htp.getQxbj() == 1) {// 1 启用权限控制
		//				strwhere += " and (a.tohouseid=0 or exists (select 1 from employehousein  x where a.toHOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
		//			} else {//未启用权限控制
		//				//只允许查看当前用户所属店铺的单据
		//				strwhere += " and exists (select 1 from employe b where a.tohouseid=b.houseid and b.epid=" + htp.getUserid() + ")";
		//			}

		//		if (tohouseid > 0)
		//			strwhere += " and a.toHOUSEID = " + tohouseid;

		// if (levelid != 0 && levelid != 4 && levelid != 5)
		// strwhere += " and a.TOHOUSEID = " + tohouseid;

		// qry += ",(select count(*) as num from allotouth a where a.statetag=1
		// and a.ywly=0 and (a.noteno1='' or a.noteno1 is null) and a.accid=" +
		// accid;
		// if (levelid != 0 && levelid != 4 && levelid != 5) // 系统管理员,经理,老板
		// 允许看所有的在途调拨单
		// qry += " and exists (select 1 from employe b where
		// a.tohouseid=b.houseid and b.epid=" + userid + ")";
		// qry += ") as ztdcdnum"; // 在途调拨出库单数

		if (!Func.isNull(findbox))
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox //
					+ "%' or b.housename like '%" + findbox + "%' or c.housename like '%" + findbox + "%')";

		if (houseid > 0)
			strwhere += " and a.HOUSEID = " + houseid;
		else if (housename.length() > 0)
			strwhere += " and ( b.housename like '%" + housename + "%' or b.shortname like '%" + housename.toUpperCase() + "%')";

		// if (tohouseid > 0)
		// strwhere += " and a.FROMHOUSEID = " + tohouseid;
		// else if (tohousename.length() > 0)
		// strwhere += " and ( c.housename like '%" + tohousename + "%' or
		// c.shortname like '%" + tohousename.toUpperCase() + "%')";

		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";
		// if (mindate == null || mindate == "") qry += " and a.NOTEDATE >=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 00:00:00','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		// strwhere += " and a.NOTEDATE >= to_date('" + mindate + "
		// 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		// if (maxdate == null || maxdate == "") qry += " and a.NOTEDATE <=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 23:59:59','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		// strwhere += " and a.NOTEDATE <= to_date('" + maxdate + "
		// 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.HOUSEID,a.TOHOUSEID,a.NTID,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,B.HOUSENAME";
		Allotouth dal = new Allotouth();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取调拨出库记录列表
	protected void GetAllotouthList(HttpServletResponse response, HttpInfo htp, int ntid) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long tohouseid = jsonObject.has("tohouseid") ? Long.parseLong(jsonObject.getString("tohouseid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String orderno = jsonObject.has("orderno") ? jsonObject.getString("orderno") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String housename = jsonObject.has("housename") ? jsonObject.getString("housename") : "";
		String tohousename = jsonObject.has("tohousename") ? jsonObject.getString("tohousename") : "";
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "desc";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "notedate";
		sort += " " + order + ",id ";// +order;

		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;

		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// int ywly = jsonObject.has("ywly") ?
		// Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 2;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		String lastop = htp.getUsername();
		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		// String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		// String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (htp.getLevelid() == 0) // 系统管理员允许看所有用户的单据
		{
			if (statetag == 0)
				strwhere += " and a.statetag=0 "; // 未提 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0)"; // 所有
		} else {

			if (statetag == 0)
				strwhere += " and a.statetag=0 and a.operant='" + lastop + "'"; // 未提
			// 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0 and a.operant='" + lastop + "')"; // 所有
		}
		if (ywly < 2)
			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据

		// if (custid!=null && custid != "") qry += " and a.custid = " + custid;
		// if (guestid != "") qry += " and a.guestid = " + guestid;
		if (!Func.isNull(findbox))
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox + "%' or b.housename like '%" + findbox + "%' or c.housename like '%"
					+ findbox + "%')";

		if (houseid > 0)
			strwhere += " and a.HOUSEID = " + houseid;
		else if (housename.length() > 0)
			strwhere += " and ( b.housename like '%" + housename + "%' or b.shortname like '%" + housename.toUpperCase() + "%')";

		if (tohouseid > 0)
			strwhere += " and a.tohouseid = " + tohouseid;
		else if (tohousename.length() > 0)
			strwhere += " and ( c.housename like '%" + tohousename + "%' or c.shortname like '%" + tohousename.toUpperCase() + "%')";
		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";

		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (orderno.length() > 0)
			strwhere += " and a.orderno like '%" + orderno.toUpperCase() + "%'";

		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";
		// if (mindate == null || mindate == "") qry += " and a.NOTEDATE >=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 00:00:00','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		// if (maxdate == null || maxdate == "") qry += " and a.NOTEDATE <=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 23:59:59','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (htp.getQxbj() == 1) // 1 启用权限控制
		{
			strwhere += " and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
		}
		if (wareid != 0) {
			strwhere += " and exists (select 1 from allotoutm x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (wareno.length() > 0) {
			strwhere += " and exists (select 1 from allotoutm x join warecode y on x.wareid=y.wareid where a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno + "%')";
		}

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.HOUSEID,a.TOHOUSEID,a.NTID,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,B.HOUSENAME";
		Allotouth dal = new Allotouth();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 合并订单-显示可以合并的调拨订单列表
	protected void GetAllotorderhList1(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// String currdate = htp.getNowdate();//
		// Func.DateToStr(pFunc.getServerdatetime(), "yyyy-MM-dd");
		// String mindate = jsonObject.has("mindate") ?
		// jsonObject.getString("mindate") : currdate;
		// String maxdate = jsonObject.has("maxdate") ?
		// jsonObject.getString("maxdate") : currdate;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// MinDateValid mdv = new MinDateValid(mindate, currdate,
		// htp.getAccdate(), 0);
		// mindate = mdv.getMindate();
		// // String mess = mdv.getErrmess();
		// if (mindate.compareTo(maxdate) > 0)
		// maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		strwhere += " and a.statetag=1 and a.overbj=0 and a.houseid=" + houseid + " and a.noteno<>'" + noteno + "'";
		if (!Func.isNull(findbox))
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox//
					+ "%' or b.housename like '%" + findbox + "%' or b.shortname like '%" + findbox + "%' )";
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.houseid,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,b.houseNAME,a.totalamt,a.totalfactamt";

		Allotorderh dal = new Allotorderh();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalfactamt),0) as totalfactamt");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 合并订单-显示可以合并的客户订单列表
	protected void GetCustorderhList1(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// String currdate = htp.getNowdate();//
		// Func.DateToStr(pFunc.getServerdatetime(), "yyyy-MM-dd");
		// String mindate = jsonObject.has("mindate") ?
		// jsonObject.getString("mindate") : currdate;
		// String maxdate = jsonObject.has("maxdate") ?
		// jsonObject.getString("maxdate") : currdate;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// MinDateValid mdv = new MinDateValid(mindate, currdate,
		// htp.getAccdate(), 0);
		// mindate = mdv.getMindate();
		// // String mess = mdv.getErrmess();
		// if (mindate.compareTo(maxdate) > 0)
		// maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		strwhere += " and a.statetag=1 and a.overbj=0 and a.custid=" + custid + " and a.noteno<>'" + noteno + "'";
		if (htp.getQxbj() == 1) {// 1 启用权限控制
			//			strwhere += " and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
			strwhere += " and (a.custid=0 or exists (select 1 from employecust x where a.custid=x.custid and x.EPID=" + htp.getUserid() + "))";
		}

		if (!Func.isNull(findbox))
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox//
					+ "%' or b.housename like '%" + findbox + "%' or b.shortname like '%" + findbox + "%' )";
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.CUSTID,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,b.CUSTNAME,a.totalamt,a.totalfactamt";

		Custorderh dal = new Custorderh();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalfactamt),0) as totalfactamt");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 分页显示退货申请单记录列表
	protected void GetRefundaskhList(HttpServletResponse response, HttpInfo htp, int fs) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String custname = jsonObject.has("custname") ? jsonObject.getString("custname").replace("'", "''") : "";
		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;

		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "desc";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "notedate";
		sort += " " + order + ",id ";// +order;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// int ywly = jsonObject.has("ywly") ?
		// Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 2;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		String lastop = htp.getUsername();
		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		// String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		// String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();

		if (!Func.isNull(findbox))
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" //
					+ findbox + "%' or b.custname like '%" + findbox + "%' or b.shortname like '%" + findbox + "%' )";

		if (fs == 1) // 调拨出库载入调拨订单
		{
			strwhere += " and a.STATETAG=1 ";
			strwhere += " and not exists (select 1 from wareouth a1 where a.accid=a1.accid and a.noteno=a1.orderno and a1.statetag<=1) "; // 已经对应调入单的单据不再显示
		} else {
			if (statetag == 0)
				strwhere += " and a.statetag=0 and a.operant='" + lastop + "'"; // 未提
			// 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0 and a.operant='" + lastop + "')"; // 所有

			if (ywly < 2)
				strwhere += " and a.ywly=" + ywly;// ywly=0
												// 只查询手机端增加的单据，用于向erp传数据

			strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
			strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";
		}

		if (custid > 0)
			strwhere += " and a.custid = " + custid;
		else if (custname.length() > 0)
			strwhere += " and (b.custname like '%" + custname + "%' or b.shortname like '%" + custname.toUpperCase() + "%' )";
		// if (fromhouseid != "") qry += " and a.fromhouseid = " + fromhouseid;
		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (remark != null && remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";
		if (wareid != 0) {
			strwhere += " and exists (select 1 from refundoutm x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (wareno.length() > 0) {
			strwhere += " and exists (select 1 from refundoutm x,warecode y where x.wareid=y.wareid and a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno + "%')";
		}

		// WriteResult("0", qry);
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.NOTEDATE,a.CUSTID,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,b.CUSTNAME,a.totalamt,a.totalcurr,a.thtag";

		Refundouth dal = new Refundouth();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 审核指定客户订单记录id信息
	protected void CheckCustorderhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:0=取消业务审核，1=业务审核，2=财务审核，3=取消财务审核
		Custorderh dal = new Custorderh();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定配货单记录id信息
	protected void CheckWarepeihByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:0=取消业务审核，1=业务审核，2=财务审核，3=取消财务审核
		Warepeih dal = new Warepeih();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定采购入库记录id信息
	protected void CheckWareinhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:1=审核，0=取消审核
		Wareinh dal = new Wareinh();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定采购付款记录id信息
	protected void CheckPaycurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:1=审核，0=取消审核
		Paycurr dal = new Paycurr();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定采购费用记录id信息
	protected void CheckPaycostByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:1=审核，0=取消审核
		Paycost dal = new Paycost();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定期初应付款记录id信息
	protected void CheckFirstPaycurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:1=审核，0=取消审核
		Firstpaycurr dal = new Firstpaycurr();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定期初应收款记录id信息
	protected void CheckFirstIncomecurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:1=审核，0=取消审核
		Firstincomecurr dal = new Firstincomecurr();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定销售收款记录id信息
	protected void CheckIncomecurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:1=审核，0=取消审核
		Incomecurr dal = new Incomecurr();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定客户缴款记录id信息
	protected void CheckCustcurrByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:1=审核，0=取消审核
		Custcurr dal = new Custcurr();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定销售费用记录id信息
	protected void CheckIncomecostByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:1=审核，0=取消审核
		Incomecost dal = new Incomecost();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定店铺费用id信息
	protected void CheckHousecostByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:1=审核，0=取消审核
		Housecost dal = new Housecost();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定销售出库记录id信息
	protected void CheckWareouthByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:1=审核，0=取消审核,2=财务审核，3=取消财务
		Wareouth dal = new Wareouth();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定调拨订单记录id信息
	protected void CheckAllotorderhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:1=审核，0=取消审核
		Allotorderh dal = new Allotorderh();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定调拨入库记录id信息
	protected void CheckAllotinhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:1=审核，0=取消审核
		Allotinh dal = new Allotinh();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定调拨出库记录id信息
	protected void CheckAllotouthByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:1=审核，0=取消审核
		Allotouth dal = new Allotouth();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定临时盘点记录id信息
	protected void CheckTempcheckhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:1=审核，0=取消审核
		Tempcheckh dal = new Tempcheckh();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);
		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定库存盘点记录id信息
	protected void CheckWarecheckhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:1=审核，0=取消审核
		Warecheckh dal = new Warecheckh();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定期初库存记录id信息
	protected void CheckFirsthousehByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:1=审核，0=取消审核
		Firsthouseh dal = new Firsthouseh();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 审核指定采购订单记录id信息
	protected void CheckProvorderhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Integer checkid = jsonObject.has("checkid") ? Integer.parseInt(jsonObject.getString("checkid")) : 0;
		// checkid:1=审核，0=取消审核
		Provorderh dal = new Provorderh();

		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno);

		WriteResult(response, dal.Check(checkid), dal.getErrmess());

	}

	// 获取客户订单记录列表
	protected void GetCustorderhList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String custname = jsonObject.has("custname") ? jsonObject.getString("custname").replace("'", "''") : "";

		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "desc";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "notedate";
		sort += " " + order + ",id ";// +order;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// int ywly = jsonObject.has("ywly") ?
		// Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 2;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		String lastop = htp.getUsername();
		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		// String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		// String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();

		if (!Func.isNull(findbox))
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" //
					+ findbox + "%' or b.custname like '%" + findbox + "%' or b.shortname like '%" + findbox + "%' )";
		if (ywly == 0) {// ywly=0 只查询手机端增加的单据，用于向erp传数据
			strwhere += " and a.ywly=" + ywly;
			if (statetag < 2)
				strwhere += " and a.statetag=" + statetag; // 已提 交
		} else {
			if (htp.getLevelid() == 0) // 系统管理员允许看所有用户的单据
			{
				if (statetag == 0)
					strwhere += " and a.statetag=0 "; // 未提 交
				else if (statetag == 1)
					strwhere += " and a.statetag=1"; // 已提 交
				else
					strwhere += " and (a.STATETAG=1 or a.STATETAG=0)"; // 所有
			} else {
				if (statetag == 0)
					strwhere += " and a.statetag=0 and a.operant='" + lastop + "'"; // 未提
				// 交
				else if (statetag == 1)
					strwhere += " and a.statetag=1"; // 已提 交
				else
					strwhere += " and (a.STATETAG=1 or a.STATETAG=0 and a.operant='" + lastop + "')"; // 所有
			}
		}
		//		if (ywly < 2)
		//			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据
		//
		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		// }

		if (custid > 0)
			strwhere += " and a.custid = " + custid;
		else if (custname.length() > 0)
			strwhere += " and (b.custname like '%" + custname + "%' or b.shortname like '%" + custname.toUpperCase() + "%' )";
		// if (fromhouseid != "") qry += " and a.fromhouseid = " + fromhouseid;
		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (remark != null && remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";

		if (wareid != 0) {
			strwhere += " and exists (select 1 from custorderm x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (wareno.length() > 0) {
			strwhere += " and exists (select 1 from custorderm x,warecode y where x.wareid=y.wareid and a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno + "%')";
		}
		if (htp.getQxbj() == 1) {// 1 启用权限控制
			//			strwhere += " and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
			strwhere += " and (a.custid=0 or exists (select 1 from employecust x where a.custid=x.custid and x.EPID=" + htp.getUserid() + "))";
		}

		// WriteResult("0", qry);
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.CUSTID,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,b.CUSTNAME,a.totalamt,a.totalcurr";

		Custorderh dal = new Custorderh();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 新增采购订单记录
	protected void AddProvorderhRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		Provorderh dal = new Provorderh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setProvid(provid);
		WriteResultJson(response, dal.Append(), dal.getErrmess());
		// if (dal.Append() == 0)
		// WriteResult(response, 0, dal.getErrmess());
		// else
		// WriteResultJson(response, 1, dal.getErrmess());
	}

	// 新增客户退货申请单记录
	protected void AddRefundaskhRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		Refundouth dal = new Refundouth();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCustid(custid);
		WriteResultJson(response, dal.Append(), dal.getErrmess());
		// if (dal.Append() == 0)
		// WriteResult(response, 0, dal.getErrmess());
		// else
		// WriteResultJson(response, 1, dal.getErrmess());
	}

	// 新增客户订单记录
	protected void AddCustorderhRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		Custorderh dal = new Custorderh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCustid(custid);
		WriteResultJson(response, dal.Append(), dal.getErrmess());
		// if (dal.Append() == 0)
		// WriteResult(response, 0, dal.getErrmess());
		// else
		// WriteResultJson(response, 1, dal.getErrmess());
	}

	// 新增客户期初入库记录
	protected void AddFirstcusthRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		Firstcusth dal = new Firstcusth();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCustid(custid);
		WriteResultJson(response, dal.Append(), dal.getErrmess());
	}

	// 新增客户销售出库记录
	protected void AddCustsalehRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		Custsaleh dal = new Custsaleh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCustid(custid);
		// WriteResultJson(response, dal.Append(), dal.getErrmess());
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 新增期初入库记录
	protected void AddFirsthousehRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		Firsthouseh dal = new Firsthouseh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setHouseid(houseid);
		// WriteResultJson(response, dal.Append(), dal.getErrmess());
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 新增调拨入库记录，载入调拨出库
	protected void AddAllotinhRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		int fs = jsonObject.has("fs") ? Integer.parseInt(jsonObject.getString("fs")) : 0;
		// fs:1=调拨出库直接转调拨入库单
		String fromnoteno = jsonObject.has("fromnoteno") ? jsonObject.getString("fromnoteno") : "";
		Allotinh dal = new Allotinh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setHouseid(houseid);
		WriteResultJson(response, dal.Append(fromnoteno, fs), dal.getErrmess());
		// if (dal.Append(fromnoteno) == 0)
		// WriteResult(response, 0, dal.getErrmess());
		// else
		// WriteResultJson(response, 1, dal.getErrmess());
	}

	// 新增商品库存报警记录
	protected void DelWarewarn(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		Warewarn dal = new Warewarn();
		dal.setAccid(htp.getMaccid());
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setHouseid(houseid);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 从excel导入商品报警记录
	protected void AddWarewarnxls(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String noteno = jsonObject.has("noteno") ?
		// jsonObject.getString("noteno").replace("'", "''") : "";
		// String wareno = jsonObject.has("wareno") ?
		// jsonObject.getString("wareno").replace("'", "''") : "";
		// String colorname = jsonObject.has("colorname") ?
		// jsonObject.getString("colorname") : "";
		// String sizename = jsonObject.has("sizename") ?
		// jsonObject.getString("sizename") : "";
		//
		// float minamt = jsonObject.has("amount") ?
		// Float.parseFloat(jsonObject.getString("amount")) : 0;
		// float price = jsonObject.has("price") ?
		// Float.parseFloat(jsonObject.getString("price")) : 0;
		Warewarn dal = new Warewarn();

		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.LoadFromXLS(), dal.getErrmess());

	}

	// 分页显示商品库存报警记录
	protected void ListWarewarn(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String warename = jsonObject.has("warename") ? jsonObject.getString("warename") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
		// "HOUSEID";
		// String order = jsonObject.has("order") ?
		// jsonObject.getString("order") : "";
		String sortlist = jsonObject.has("sortlist") ? jsonObject.getString("sortlist") : "";
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long brandid = jsonObject.has("brandid") ? Long.parseLong(jsonObject.getString("brandid")) : -1;
		long typeid = jsonObject.has("typeid") ? Long.parseLong(jsonObject.getString("typeid")) : -1;
		String seasonname = jsonObject.has("seasonname") ? jsonObject.getString("seasonname") : "";
		String prodyear = jsonObject.has("prodyear") ? jsonObject.getString("prodyear") : "";
		// int sizenum = jsonObject.has("sizenum") ?
		// Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int sizenum = htp.getSizenum();

		// System.out.println("sizenum=" + sizenum);
		sortlist += " " + ",keyid";
		// String sort = " ";// + order;
		// sort = " houseid,wareno,wareid,colorid ";// + order;
		String strwhere = " a.accid=" + htp.getMaccid();
		if (houseid > 0)
			strwhere += " and a.houseid=" + houseid;
		if (wareid > 0)
			strwhere += " and a.wareid=" + wareid;
		else {
			if (warename.length() > 0)
				strwhere += " and b.warename like '%" + warename + "%'";
			if (wareno.length() > 0)
				strwhere += " and b.wareno like '%" + wareno.toUpperCase() + "%'";
		}
		if (findbox.length() > 0)
			strwhere += " and (b.warename like '%" + findbox + "%' or b.wareno like '%" + findbox.toUpperCase() + "%')";

		if (brandid >= 0)
			strwhere += " and b.brandid=" + brandid;
		if (typeid >= 0)
			if (typeid > 0 && typeid < 1000) {
				strwhere += " and exists (select 1 from waretype t where t.Typeid=b.Typeid and t.p_Typeid= " + typeid + ") ";
			} else {
				strwhere += " and b.Typeid=" + typeid;
			}

		if (seasonname.length() > 0)
			strwhere += " and b.seasonname like '%" + seasonname + "%'";
		if (prodyear.length() > 0)
			strwhere += " and b.prodyear like '%" + prodyear + "%'";

		Warewarn dal = new Warewarn();
		QueryParam qp = new QueryParam(page, pagesize, sortlist);
		dal.setAccid(htp.getMaccid());

		if (page < 0) {
			Table tb = new Table();
			qp.setSortString("houseid,wareid,colorid,sizeid,id");
			String fieldlist = "a.id,a.houseid,d.housename,a.wareid,b.wareno,b.warename,a.colorid,c.colorname,a.sizeid,e.sizename,a.minamt,a.maxamt";
			tb = dal.GetTable(qp, strwhere, fieldlist);
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));

			return;
		}
		// dal.setEpid(htp.getUserid());
		// dal.setAccid(htp.getMaccid());
		// dal.setNoteno(noteno);
		// dal.setLastop(htp.getUsername());
		if (dal.doGetColorsumList(qp, sizenum, strwhere) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			Write(response, dal.getErrmess());
	}

	// 载入商品库存报警记录
	protected void LoadWarewarn(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		Warewarn dal = new Warewarn();
		dal.setWareid(wareid);
		// dal.setColorid(colorid);
		dal.setHouseid(houseid);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		if (dal.Load() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 保存商品库存报警记录
	protected void SaveWarewarn(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		Warewarn dal = new Warewarn();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		// if (dal.Append(jsonObject) == 0)
		WriteResult(response, dal.Append(jsonObject), dal.getErrmess());
		// else
		// WriteResultJson(response, 1, dal.getErrmess());
	}

	// 新增商品盘点记录
	protected void AddWarecheckhRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		Warecheckh dal = new Warecheckh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setHouseid(houseid);
		WriteResultJson(response, dal.Append(), dal.getErrmess());
	}

	// 新增客户商品盘点记录
	protected void AddCustcheckhRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		Custcheckh dal = new Custcheckh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCustid(custid);
		WriteResultJson(response, dal.Append(), dal.getErrmess());
	}

	// 店铺盘点单合并临时盘点单
	protected void MergeTempcheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int fs = jsonObject.has("fs") ? Integer.parseInt(jsonObject.getString("fs")) : 0;
		// fs:0=更新并追加所有商品 1=仅更新已有商品
		Warecheckh dal = new Warecheckh();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Merge(jsonObject, fs), dal.getErrmess());
	}

	// 客户盘点单合并临时盘点单
	protected void MergeTempcheck1(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int fs = jsonObject.has("fs") ? Integer.parseInt(jsonObject.getString("fs")) : 0;
		// fs:0=更新并追加所有商品 1=仅更新已有商品
		Custcheckh dal = new Custcheckh();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Merge(jsonObject, fs), dal.getErrmess());
	}

	// 更新指定商品盘点记录id信息
	protected void UpdateWarecheckhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int changedatebj = htp.getChangedatebj();
		Warecheckh dal = new Warecheckh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Update(changedatebj), dal.getErrmess());
	}

	// 更新指定客户商品盘点记录id信息
	protected void UpdateCustcheckhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int changedatebj = htp.getChangedatebj();
		Custcheckh dal = new Custcheckh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Update(changedatebj), dal.getErrmess());
	}

	// 更新指定商品报警记录id信息
	// protected void UpdateWarewarnhByID(HttpServletResponse response, HttpInfo
	// htp) throws ServletException, IOException {
	// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
	// // int changedatebj = htp.getChangedatebj();
	// Warewarnh dal = new Warewarnh();
	// DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
	// dal.setAccid(htp.getMaccid());
	// dal.setOperant(htp.getUsername());
	//
	// WriteResult(response, dal.Update(), dal.getErrmess());
	// }

	// 更新指定临时盘点记录id信息
	protected void UpdateTempcheckhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// int ntid = jsonObject.has("ntid") ? jsonObject.getString("ntid"):0;
		Tempcheckh dal = new Tempcheckh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());

		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 删除指定临时盘点记录id信息
	protected void DelTempcheckhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int ntid = jsonObject.has("ntid") ? Integer.parseInt(jsonObject.getString("ntid")) : 0;
		Tempcheckh dal = new Tempcheckh();
		long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		dal.setNoteno(noteno);
		dal.setAccid(accid);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			if (ntid == 0)
				pFunc.myWriteLog(accid, "店铺临盘单", "【删除单据】" + noteno, lastop);
			else
				pFunc.myWriteLog(accid, "客户临盘单", "【删除单据】" + noteno, lastop);
			WriteResult(response, 1, dal.getErrmess());
		}
	}

	// 删除指定商品盘点记录id信息
	protected void DelWarecheckhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Warecheckh dal = new Warecheckh();
		long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		dal.setNoteno(noteno);
		dal.setAccid(accid);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			pFunc.myWriteLog(accid, "商品盘点", "【删除单据】" + noteno, lastop);
			WriteResult(response, 1, dal.getErrmess());
		}
	}

	// 删除指定客户商品盘点记录id信息
	protected void DelCustcheckhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Custcheckh dal = new Custcheckh();
		long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		dal.setNoteno(noteno);
		dal.setAccid(accid);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			pFunc.myWriteLog(accid, "客户盘点", "【删除单据】" + noteno, lastop);
			WriteResult(response, 1, dal.getErrmess());
		}
	}

	// 删除指定商品报警记录id信息
	// protected void DelWarewarnhByID(HttpServletResponse response, HttpInfo
	// htp) throws ServletException, IOException {
	// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
	// String noteno = jsonObject.has("noteno") ?
	// jsonObject.getString("noteno").replace("'", "''") : "";
	// Warewarnh dal = new Warewarnh();
	// long accid = htp.getMaccid();
	// String lastop = htp.getUsername();
	// dal.setOperant(lastop);
	// dal.setNoteno(noteno);
	// dal.setAccid(accid);
	// if (dal.Delete() == 0)
	// WriteResult(response, 0, dal.getErrmess());
	// else {
	// pFunc.myWriteLog(accid, "商品报警单", "【删除单据】" + noteno, lastop);
	// WriteResult(response, 1, dal.getErrmess());
	// }
	// }

	// 获取指定临时盘点单记录id信息
	protected void GetTempcheckhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int ntid = jsonObject.has("ntid") ? Integer.parseInt(jsonObject.getString("ntid")) : 0;
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		String strwhere = " a.NOTENO='" + noteno + "' and a.ACCID=" + accid;

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			if (ntid == 0)
				fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.HOUSEID,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,A.LASTDATE,B.HOUSENAME";
			else
				fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.custid,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,A.LASTDATE,B.CustNAME";
		Tempcheckh dal = new Tempcheckh();
		dal.setNtid(ntid);
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 获取指定商品报警单记录id信息
	// protected void GetWarewarnhByID(HttpServletResponse response, HttpInfo
	// htp) throws ServletException, IOException {
	// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
	// String noteno = jsonObject.has("noteno") ?
	// jsonObject.getString("noteno").replace("'", "''") : "";
	// String fieldlist = jsonObject.has("fieldlist") ?
	// jsonObject.getString("fieldlist") : "*";
	// long accid0 = jsonObject.has("accid") ?
	// Long.parseLong(jsonObject.getString("accid")) : 0;
	// long accid = htp.getMaccid();
	// if (accid0 > 0)
	// accid = accid0;
	// String strwhere = " a.NOTENO='" + noteno + "' and a.ACCID=" + accid;
	//
	// if (fieldlist.equals("*") || fieldlist.length() <= 0)
	// fieldlist =
	// "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,A.LASTDATE";
	// Warewarnh dal = new Warewarnh();
	//
	// Table tb = new Table();
	// tb = dal.GetList(strwhere, fieldlist).getTable(1);
	// Write(response, DbHelperSQL.DataTable2Json(tb));
	//
	// }

	// 获取指定商品盘点单记录id信息
	protected void GetWarecheckhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		String strwhere = " a.NOTENO='" + noteno + "' and a.ACCID=" + accid;

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.HOUSEID,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,A.LASTDATE,B.HOUSENAME";
		fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";
		Warecheckh dal = new Warecheckh();

		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 获取指定客户商品盘点单记录id信息
	protected void GetCustcheckhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		String strwhere = " a.NOTENO='" + noteno + "' and a.ACCID=" + accid;

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.custid,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,A.LASTDATE,B.custNAME";
		fieldlist += ",case when To_Char(a.notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday";
		Custcheckh dal = new Custcheckh();

		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 获取商品盘点记录列表
	protected void GetWarecheckhList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		// long tohouseid = jsonObject.has("tohouseid") ?
		// Long.parseLong(jsonObject.getString("tohouseid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String housename = jsonObject.has("housename") ? jsonObject.getString("housename") : "";
		// String tohousename = jsonObject.has("tohousename") ?
		// jsonObject.getString("tohousename") : "";
		// String wareno = jsonObject.has("wareno") ?
		// jsonObject.getString("wareno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "desc";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "notedate";
		sort += " " + order + ",id ";// +order;

		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// int ywly = jsonObject.has("ywly") ?
		// Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 2;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		String lastop = htp.getUsername();

		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		// String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		// String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (htp.getLevelid() == 0) // 系统管理员允许看所有用户的单据
		{
			if (statetag == 0)
				strwhere += " and a.statetag=0 "; // 未提 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0)"; // 所有
		} else {

			if (statetag == 0)
				strwhere += " and a.statetag=0 and a.operant='" + lastop + "'"; // 未提
			// 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0 and a.operant='" + lastop + "')"; // 所有
		}
		if (ywly < 2)
			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据

		// if (custid!=null && custid != "") qry += " and a.custid = " + custid;
		// if (guestid != "") qry += " and a.guestid = " + guestid;
		if (!Func.isNull(findbox))
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" //
					+ findbox + "%' or b.housename like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase() + "%')";

		if (houseid > 0)
			strwhere += " and a.HOUSEID = " + houseid;
		else if (housename.length() > 0)
			strwhere += " and ( b.housename like '%" + housename + "%' or b.shortname like '%" + housename.toUpperCase() + "%')";

		// if (tohouseid > 0)
		// strwhere += " and a.FROMHOUSEID = " + tohouseid;
		// else if (tohousename.length() > 0)
		// strwhere += " and ( c.housename like '%" + tohousename + "%' or
		// c.shortname like '%" + tohousename.toUpperCase() + "%')";
		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";

		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";
		// if (mindate == null || mindate == "") qry += " and a.NOTEDATE >=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 00:00:00','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		// if (maxdate == null || maxdate == "") qry += " and a.NOTEDATE <=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 23:59:59','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (htp.getQxbj() == 1) // 1 启用权限控制
			strwhere += " and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";

		if (wareid > 0) {
			strwhere += " and exists (select 1 from warecheckm x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (wareno.length() > 0) {
			strwhere += " and exists (select 1 from warecheckm x join warecode y on x.wareid=y.wareid where a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno + "%')";
		}

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.HOUSEID,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,B.HOUSENAME";
		Warecheckh dal = new Warecheckh();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取客户商品盘点记录列表
	protected void GetCustcheckhList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		// long tohouseid = jsonObject.has("tohouseid") ?
		// Long.parseLong(jsonObject.getString("tohouseid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		// String housename = jsonObject.has("housename") ?
		// jsonObject.getString("housename") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "desc";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "notedate";
		sort += " " + order + ",id ";// +order;

		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// int ywly = jsonObject.has("ywly") ?
		// Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 2;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		String lastop = htp.getUsername();

		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		// String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		// String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (htp.getLevelid() == 0) // 系统管理员允许看所有用户的单据
		{
			if (statetag == 0)
				strwhere += " and a.statetag=0 "; // 未提 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0)"; // 所有
		} else {

			if (statetag == 0)
				strwhere += " and a.statetag=0 and a.operant='" + lastop + "'"; // 未提
			// 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0 and a.operant='" + lastop + "')"; // 所有
		}
		if (ywly < 2)
			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据

		// if (custid!=null && custid != "") qry += " and a.custid = " + custid;
		// if (guestid != "") qry += " and a.guestid = " + guestid;
		if (!Func.isNull(findbox))
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" //
					+ findbox + "%' or b.custname like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase() + "%')";

		if (custid > 0)
			strwhere += " and a.custid = " + custid;
		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";

		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";
		// if (mindate == null || mindate == "") qry += " and a.NOTEDATE >=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 00:00:00','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		// if (maxdate == null || maxdate == "") qry += " and a.NOTEDATE <=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 23:59:59','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		// if (htp.getQxbj() == 1) // 1 启用权限控制
		// strwhere += " and exists (select 1 from employecust x where
		// a.custid=x.custid and x.EPID=" + htp.getUserid() + ")";

		if (wareid > 0) {
			strwhere += " and exists (select 1 from custcheckm x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (wareno.length() > 0) {
			strwhere += " and exists (select 1 from custcheckm x join warecode y on x.wareid=y.wareid where a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno + "%')";
		}

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.CUSTID,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,B.custNAME,a.totalamt,a.totalcurr";
		Custcheckh dal = new Custcheckh();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// // 获取商品报警记录列表
	// protected void GetWarewarnhList(HttpServletResponse response, HttpInfo
	// htp) throws ServletException, IOException {
	// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
	// // long houseid = jsonObject.has("houseid") ?
	// Long.parseLong(jsonObject.getString("houseid")) : 0;
	// // long tohouseid = jsonObject.has("tohouseid") ?
	// Long.parseLong(jsonObject.getString("tohouseid")) : 0;
	// long wareid = jsonObject.has("wareid") ?
	// Long.parseLong(jsonObject.getString("wareid")) : 0;
	// String wareno = jsonObject.has("wareno") ?
	// jsonObject.getString("wareno").replace("'", "''") : "";
	// String noteno = jsonObject.has("noteno") ?
	// jsonObject.getString("noteno").replace("'", "''") : "";
	// String handno = jsonObject.has("handno") ?
	// jsonObject.getString("handno").replace("'", "''") : "";
	// // String housename = jsonObject.has("housename") ?
	// jsonObject.getString("housename") : "";
	// // String tohousename = jsonObject.has("tohousename") ?
	// jsonObject.getString("tohousename") : "";
	// // String wareno = jsonObject.has("wareno") ?
	// jsonObject.getString("wareno").replace("'", "''") : "";
	// String order = jsonObject.has("order") ? jsonObject.getString("order") :
	// "desc";
	// String sort = jsonObject.has("sort") ? jsonObject.getString("sort") :
	// "notedate";
	// sort += " " + order + ",id ";// +order;
	//
	// String currdate = htp.getNowdate();//
	// Func.DateToStr(pFunc.getServerdatetime(), "yyyy-MM-dd");
	// String mindate = jsonObject.has("mindate") ?
	// jsonObject.getString("mindate") : currdate;
	// String maxdate = jsonObject.has("maxdate") ?
	// jsonObject.getString("maxdate") : currdate;
	//
	// String remark = jsonObject.has("remark") ?
	// jsonObject.getString("remark").replace("'", "''") : "";
	// String findbox = jsonObject.has("findbox") ?
	// jsonObject.getString("findbox").trim().replace("'", "''") : "";
	// String fieldlist = jsonObject.has("fieldlist") ?
	// jsonObject.getString("fieldlist") : "*";
	// int page = jsonObject.has("page") ?
	// Integer.parseInt(jsonObject.getString("page")) : 1;
	// int pagesize = jsonObject.has("rows") ?
	// Integer.parseInt(jsonObject.getString("rows")) : 10;
	// if (pagesize > 50)
	// pagesize = 10;
	// // int ywly = jsonObject.has("ywly") ?
	// Integer.parseInt(jsonObject.getString("ywly")) : 2;
	// int statetag = jsonObject.has("statetag") ?
	// Integer.parseInt(jsonObject.getString("statetag")) : 2;
	// // int ywly = jsonObject.has("ywly") ?
	// Integer.parseInt(jsonObject.getString("ywly")) : 2;
	// String lastop = htp.getUsername();
	//
	// int maxday = htp.getMaxday();
	// // 校验开始查询日期
	// MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(),
	// maxday);
	// mindate = mdv.getMindate();
	// // String mess = mdv.getErrmess();
	// if (mindate.compareTo(maxdate) > 0)
	// maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
	// // ==========================
	// // String sort = " notedate desc,id ";// +order;
	// String strwhere = " a.ACCID=" + htp.getMaccid();
	//
	// if (statetag == 0)
	// strwhere += " and a.statetag=0 and a.operant='" + lastop + "'"; // 未提 交
	// else if (statetag == 1)
	// strwhere += " and a.statetag=1"; // 已提 交
	// else
	// strwhere += " and (a.STATETAG=1 or a.STATETAG=0 and a.operant='" + lastop
	// + "')"; // 所有
	//
	// // if (ywly < 2)
	// // strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据
	//
	// // if (custid!=null && custid != "") qry += " and a.custid = " + custid;
	// // if (guestid != "") qry += " and a.guestid = " + guestid;
	// if (!Func.isNull(findbox))
	// strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or
	// a.remark like '%" + findbox + "%' or a.operant like '%" //
	// + findbox + "%' )";
	//
	// // if (houseid > 0)
	// // strwhere += " and a.HOUSEID = " + houseid;
	// // else if (housename.length() > 0)
	// // strwhere += " and ( b.housename like '%" + housename + "%' or
	// b.shortname like '%" + housename.toUpperCase() + "%')";
	//
	// // if (tohouseid > 0)
	// // strwhere += " and a.FROMHOUSEID = " + tohouseid;
	// // else if (tohousename.length() > 0)
	// // strwhere += " and ( c.housename like '%" + tohousename + "%' or
	// c.shortname like '%" + tohousename.toUpperCase() + "%')";
	//
	// if (handno.length() > 0)
	// strwhere += " and a.HANDNO like '%" + handno + "%'";
	// if (noteno.length() > 0)
	// strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
	// if (remark.length() > 0)
	// strwhere += " and a.remark like '%" + remark + "%'";
	// // if (mindate == null || mindate == "") qry += " and a.NOTEDATE >=
	// to_date(to_char(sysdate,'yyyy-mm-dd')||' 00:00:00','yyyy-mm-dd
	// hh24:mi:ss')";
	// // else
	// strwhere += " and a.NOTEDATE >= to_date('" + mindate + "
	// 00:00:00','yyyy-mm-dd hh24:mi:ss')";
	// // if (maxdate == null || maxdate == "") qry += " and a.NOTEDATE <=
	// to_date(to_char(sysdate,'yyyy-mm-dd')||' 23:59:59','yyyy-mm-dd
	// hh24:mi:ss')";
	// // else
	// strwhere += " and a.NOTEDATE <= to_date('" + maxdate + "
	// 23:59:59','yyyy-mm-dd hh24:mi:ss')";
	//
	// // if (htp.getQxbj() == 1) // 1 启用权限控制
	// // strwhere += " and (a.houseid=0 or exists (select 1 from employehouse x
	// where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
	//
	// if (wareid > 0) {
	// strwhere += " and exists (select 1 from warecheckm x where
	// a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
	// } else if (wareno.length() > 0) {
	// strwhere += " and exists (select 1 from warecheckm x join warecode y on
	// x.wareid=y.wareid where a.accid=x.accid and a.noteno=x.noteno and
	// y.wareno like '%" + wareno + "%')";
	// }
	//
	// if (fieldlist.equals("*") || fieldlist.length() <= 0)
	// fieldlist =
	// "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE";
	// Warewarnh dal = new Warewarnh();
	//
	// QueryParam qp = new QueryParam(page, pagesize, sort);
	// qp.setSumString("nvl(sum(totalamt),0) as
	// totalamount,nvl(sum(totalcurr),0) as totalcurr");
	// Table tb = new Table();
	// tb = dal.GetTable(qp, strwhere, fieldlist);
	// Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	//
	// }

	// 获取临时盘点记录列表
	protected void GetTempcheckhList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int ntid = jsonObject.has("ntid") ? Integer.parseInt(jsonObject.getString("ntid")) : 0;
		// long tohouseid = jsonObject.has("tohouseid") ?
		// Long.parseLong(jsonObject.getString("tohouseid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";

		// String tohousename = jsonObject.has("tohousename") ?
		// jsonObject.getString("tohousename") : "";
		// String wareno = jsonObject.has("wareno") ?
		// jsonObject.getString("wareno").replace("'", "''") : "";

		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// int ywly = jsonObject.has("ywly") ?
		// Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 2;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		String lastop = htp.getUsername();

		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		// String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid() + " and a.ntid=" + ntid;
		if (htp.getLevelid() == 0) // 系统管理员允许看所有用户的单据
		{
			if (statetag == 0)
				strwhere += " and a.statetag=0 "; // 未提 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0)"; // 所有
		} else {

			if (statetag == 0)
				strwhere += " and a.statetag=0 and a.operant='" + lastop + "'"; // 未提
			// 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0 and a.operant='" + lastop + "')"; // 所有
		}
		if (ywly < 2)
			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据

		// if (custid!=null && custid != "") qry += " and a.custid = " + custid;
		// if (guestid != "") qry += " and a.guestid = " + guestid;
		if (ntid == 0) {// 店铺临盘单
			long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
			String housename = jsonObject.has("housename") ? jsonObject.getString("housename") : "";
			if (!Func.isNull(findbox))
				strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox + "%' or b.housename like '%" + findbox + "%')";

			if (houseid > 0)
				strwhere += " and a.HOUSEID = " + houseid;
			else if (housename.length() > 0)
				strwhere += " and ( b.housename like '%" + housename + "%' or b.shortname like '%" + housename.toUpperCase() + "%')";

			if (htp.getQxbj() == 1) // 1 启用权限控制
				strwhere += " and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
		} else {// 客户临盘单
			long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
			String custname = jsonObject.has("custname") ? jsonObject.getString("custname") : "";
			if (!Func.isNull(findbox))
				strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox + "%' or b.custname like '%" + findbox + "%')";

			if (custid > 0)
				strwhere += " and a.custid = " + custid;
			else if (custname.length() > 0)
				strwhere += " and ( b.custname like '%" + custname + "%' or b.shortname like '%" + custname.toUpperCase() + "%')";
			if (htp.getQxbj() == 1) // 1 启用权限控制
				strwhere += " and (a.custid=0 or exists (select 1 from employecust x where a.custid=x.custid and x.EPID=" + htp.getUserid() + "))";
		}
		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";

		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";
		// if (mindate == null || mindate == "") qry += " and a.NOTEDATE >=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 00:00:00','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		// if (maxdate == null || maxdate == "") qry += " and a.NOTEDATE <=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 23:59:59','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";
		//		if (ntid == 0) {
		//			if (htp.getQxbj() == 1) // 1 启用权限控制
		//				strwhere += " and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
		//		} else {
		//			if (htp.getQxbj() == 1) // 1 启用权限控制
		//				strwhere += " and (a.custid=0 or exists (select 1 from employecust x where a.custid=x.custid and x.EPID=" + htp.getUserid() + "))";
		//		}
		if (wareid != 0) {
			strwhere += " and exists (select 1 from tempcheckm x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (wareno.length() > 0) {
			strwhere += " and exists (select 1 from tempcheckm x join warecode y on x.wareid=y.wareid where a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno + "%')";
		}

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			if (ntid == 0)
				fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.HOUSEID,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,B.HOUSENAME";
			else
				fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.custid,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,B.CustNAME";
		Tempcheckh dal = new Tempcheckh();
		dal.setNtid(ntid);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 新增临时盘点记录
	protected void AddTempcheckhRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int ntid = jsonObject.has("ntid") ? Integer.parseInt(jsonObject.getString("ntid")) : 0;

		Tempcheckh dal = new Tempcheckh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNtid(ntid);
		if (ntid == 0) {// 店铺临盘单
			long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
			dal.setHouseid(houseid);
		} else {// 客户临盘单
			long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
			dal.setCustid(custid);
		}
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 新增商场开票出库明细
	protected void AddShopsalemRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();
		Shopsalem dal = new Shopsalem();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());

		if (dal.Append(priceprec, htp.getCurrprec()) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 取商场零售单据结算记录
	protected void GetShopsalepay(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Shopsalepay dal = new Shopsalepay();
		String fieldlist = " b.payno,b.payname,a.curr ";
		String strwhere = " a.accid=" + htp.getMaccid() + " and a.noteno='" + noteno + "'";
		String sort = "b.payno";
		Table tb = new Table();
		tb = dal.GetTable(strwhere, fieldlist, sort);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 更新指定商场开票记录id信息
	protected void UpdateShopsalehByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		float jfrate = htp.getJfrate();
		int fs = htp.getFsout();
		Shopsaleh dal = new Shopsaleh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		dal.setSmsuid(htp.getSmsuid());
		dal.setSmsuser(htp.getSmsuser());
		dal.setSmspwd(htp.getSmspwd());
		dal.setTjspjf(htp.getTjspjf());
		dal.setSrsbjf(htp.getVipDoublecent());
		WriteResult(response, dal.Update(jsonObject, jfrate, fs), dal.getErrmess());
	}

	// 删除指定商场开票记录id信息
	protected void DelShopsalehByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		Shopsaleh dal = new Shopsaleh();
		dal.setNoteno(noteno);
		dal.setAccid(accid);
		dal.setOperant(lastop);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			pFunc.myWriteLog(accid, "商场开票", "【删除单据】" + noteno, lastop);
			WriteResult(response, 1, dal.getErrmess());
		}

	}

	// 获取指定商场开票单记录id信息
	protected void GetShopsalehByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long accid = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		if (accid == 0)
			accid = htp.getMaccid();
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String strwhere = " a.NOTENO='" + noteno + "' and a.ACCID=" + accid;
		// if (id > 0) qry += " and a.id=" + id;
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.GUESTID,a.NTID,a.HANDNO,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,B.GUESTNAME,d.DISCOUNT,a.CENT,a.totalcurr,a.freecurr,a.usecent,a.jfcurr,a.checkcurr,a.zpaycurr,a.changecurr";
		Shopsaleh dal = new Shopsaleh();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取商场开票记录列表
	protected void GetShopsalehList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		// String provname = jsonObject.has("provname") ?
		// jsonObject.getString("provname").replace("'", "''") : "";

		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;

		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long dptid = jsonObject.has("dptid") ? Long.parseLong(jsonObject.getString("dptid")) : 0;
		// long salemanid = jsonObject.has("salemanid") ?
		// Long.parseLong(jsonObject.getString("salemanid")) : 0;
		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "desc";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "notedate";
		sort += " " + order + ",id ";// +order;

		String checkman = jsonObject.has("checkman") ? jsonObject.getString("checkman") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String vipfindbox = jsonObject.has("vipfindbox") ? jsonObject.getString("vipfindbox") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// int ywly = jsonObject.has("ywly") ?
		// Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 2;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int sumtag = jsonObject.has("sumtag") ? Integer.parseInt(jsonObject.getString("sumtag")) : 0;
		// sumtag=1，要返回结算方式的汇总
		String lastop = htp.getUsername();

		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		// String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		// String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + accid;// +" and a.ntid=" + ntid;
		// if (checkman != null && checkman != "") qry += " and a.operant='" +
		// checkman + "'";
		if (htp.getLevelid() == 0) // 系统管理员允许看所有用户的单据
		{
			if (statetag == 0)
				strwhere += " and (a.statetag=0 or a.statetag=3) "; // 未提 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0 or a.STATETAG=3)"; // 所有
		} else {

			if (statetag == 0)
				strwhere += " and (a.statetag=0 or a.statetag=3) and a.operant='" + lastop + "'"; // 未提
																								// 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.operant='" + lastop + "' and (a.statetag=0 or a.statetag=3)  )"; // 所有
		}
		if (ywly < 2)
			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据

		if (findbox.length() > 0)
			// if (ntid == 0)
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox + "%' or b.guestname like '%" + findbox + "%')";

		if (htp.getQxbj() == 1) // 1 启用权限控制
			strwhere += " and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";

		if (checkman.length() > 0)
			strwhere += " and a.operant like '%" + checkman + "%' ";

		if (dptid > 0)
			strwhere += " and a.dptid = " + dptid;
		// if (salemanid > 0) qry += " and exists (select 1 from waresaleman a1
		// where a1.accid=a.accid and a1.noteno=a.noteno and a1.epid=" +
		// salemanid + ")";

		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";
		if (vipfindbox.length() > 0) {
			strwhere += " and (b.guestname like '%" + vipfindbox + "%' or b.vipno like '%" + vipfindbox.toUpperCase() + "%' or b.mobile  like '%" + vipfindbox + "%')";
		}
		if (houseid > 0)
			strwhere += " and a.houseid=" + houseid;
		// if (mindate == null || mindate == "") qry += " and a.NOTEDATE >=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 00:00:00','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		// if (maxdate == null || maxdate == "") qry += " and a.notedate <=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 23:59:59','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (wareid > 0 || wareno.length() > 0) {
			strwhere += " and exists (select 1 from shopsalem x";
			if (wareid == 0 && wareno.length() > 0)
				strwhere += " join warecode y  on x.wareid=y.wareid";
			strwhere += " where a.accid=x.accid and a.noteno=x.noteno";
			// if (houseid > 0)
			// strwhere += " and x.houseid=" + houseid;
			if (wareid > 0)
				strwhere += " and x.wareid=" + wareid;
			else if (wareno != null && wareno.length() > 0)
				strwhere += " and y.wareno like '%" + wareno + "%'";
			strwhere += ")";
		}
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.GUESTID,a.NTID,a.HANDNO,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,B.GUESTNAME,a.TOTALAMT,a.TOTALCURR,d.DISCOUNT";

		Shopsaleh dal = new Shopsaleh();
		dal.setSumtag(sumtag);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setCalcfield("f_getshopsalemanname(accid,noteno) as salemanlist,case when To_Char(notedate,'yyyy-mm-dd')>'" + htp.getCalcdate() + "' then '1' else '0' end as istoday");

		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 合并订单-获取采购订货记录列表
	protected void GetProvorderhList1(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// ==========================
		String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		strwhere += " and a.statetag=1 and a.overbj=0 and a.provid=" + provid + " and a.noteno<>'" + noteno + "'"; // 已提
																													// 交

		if (!Func.isNull(findbox))
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" //
					+ findbox + "%' or b.housename like '%" + findbox + "%' or b.shortname like '%" + findbox + "%' )";
		if (htp.getQxbj() == 1) {// 1 启用权限控制
			//			strwhere += " and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
			strwhere += " and (a.provid=0 or exists (select 1 from employeprov x where a.provid=x.provid and x.EPID=" + htp.getUserid() + "))";
		}

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.PROVID,a.HANDNO,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,b.PROVNAME,a.totalamt,a.totalfactamt,a.totalcurr";

		Provorderh dal = new Provorderh();
		// System.out.println(fieldlist);
		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalfactamt),0) as totalfactamt,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取采购订货记录列表
	protected void GetProvorderhList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String provname = jsonObject.has("provname") ? jsonObject.getString("provname").replace("'", "''") : "";
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;

		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "desc";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "notedate";
		sort += " " + order + ",id ";// +order;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// int ywly = jsonObject.has("ywly") ?
		// Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 2;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		String lastop = htp.getUsername();

		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		// String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		// String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (!Func.isNull(findbox))

			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%"//
					+ findbox + "%' or b.provname like '%" + findbox + "%' or b.shortname like '%" + findbox + "%' )";
		if (ywly == 0) {// ywly=0 只查询手机端增加的单据，用于向erp传数据
			strwhere += " and a.ywly=" + ywly;
			if (statetag < 2)
				strwhere += " and a.statetag=" + statetag; // 已提 交
		} else {
			if (htp.getLevelid() == 0) // 系统管理员允许看所有用户的单据
			{
				if (statetag == 0)
					strwhere += " and a.statetag=0 "; // 未提 交
				else if (statetag == 1)
					strwhere += " and a.statetag=1"; // 已提 交
				else
					strwhere += " and (a.STATETAG=1 or a.STATETAG=0)"; // 所有
			} else {
				if (statetag == 0)
					strwhere += " and a.statetag=0 and a.operant='" + lastop + "'"; // 未提交
				else if (statetag == 1)
					strwhere += " and a.statetag=1"; // 已提 交
				else
					strwhere += " and (a.STATETAG=1 or a.STATETAG=0 and a.operant='" + lastop + "')"; // 所有
			}
		}
		//		if (ywly < 2)
		//			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据

		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		// }

		if (provid > 0)
			strwhere += " and a.provid = " + provid;
		else if (provname.length() > 0)
			strwhere += " and (b.provname like '%" + provname + "%' or b.shortname like '%" + provname.toUpperCase() + "%' )";
		// if (fromhouseid != "") qry += " and a.fromhouseid = " + fromhouseid;
		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";
		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (remark != null && remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";

		if (wareid != 0) {
			strwhere += " and exists (select 1 from provorderm x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (wareno.length() > 0) {
			strwhere += " and exists (select 1 from provorderm x,warecode y where x.wareid=y.wareid and a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno + "%')";
		}
		if (htp.getQxbj() == 1) {// 1 启用权限控制
			//			strwhere += " and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
			strwhere += " and (a.provid=0 or exists (select 1 from employeprov x where a.provid=x.provid and x.EPID=" + htp.getUserid() + "))";
		}

		// WriteResult("0", qry);
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.PROVID,a.HANDNO,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,b.PROVNAME";

		Provorderh dal = new Provorderh();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取调拨入库记录列表
	protected void GetAllotinhList(HttpServletResponse response, HttpInfo htp, int ntid) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long fromhouseid = jsonObject.has("fromhouseid") ? Long.parseLong(jsonObject.getString("fromhouseid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String noteno1 = jsonObject.has("noteno1") ? jsonObject.getString("noteno1") : ""; // 调出单
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String housename = jsonObject.has("housename") ? jsonObject.getString("housename") : "";
		String fromhousename = jsonObject.has("fromhousename") ? jsonObject.getString("fromhousename") : "";
		// String wareno = jsonObject.has("wareno") ?
		// jsonObject.getString("wareno").replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "desc";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "notedate";
		sort += " " + order + ",id ";// +order;

		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// int ywly = jsonObject.has("ywly") ?
		// Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 2;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		String lastop = htp.getUsername();

		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		// String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		// String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		// 0=系统管理员,1=店员（代理业务员）,2=店长（代理业务主管）,3=财务,4=经理,5=老板,6=督导（公司主管）,7=收银员（公司业务）,8=AD客服,9=库管(程序员)
		//		财务，老板，经理，仓管
		if (htp.getLevelid() == 0 || htp.getLevelid() == 3 || htp.getLevelid() == 4 || htp.getLevelid() == 5 || htp.getLevelid() == 9) // 系统管理员允许看所有用户的单据
		{
			if (statetag == 0)
				strwhere += " and a.statetag=0 "; // 未提 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0)"; // 所有
		} else {
			if (statetag == 0)

				strwhere += " and a.statetag=0 and a.operant='" + lastop + "'"; // 未提
			// 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0 and a.operant='" + lastop + "')"; // 所有
		}
		if (ywly < 2)
			strwhere += " and a.ywly=" + ywly;// ywly=0 只查询手机端增加的单据，用于向erp传数据

		// if (custid!=null && custid != "") qry += " and a.custid = " + custid;
		// if (guestid != "") qry += " and a.guestid = " + guestid;
		if (!Func.isNull(findbox))
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox + "%' or b.housename like '%"//
					+ findbox + "%' or c.housename like '%" + findbox + "%')";

		if (houseid > 0)
			strwhere += " and a.HOUSEID = " + houseid;
		else if (housename.length() > 0)
			strwhere += " and ( b.housename like '%" + housename + "%' or b.shortname like '%" + housename.toUpperCase() + "%')";

		if (fromhouseid > 0)
			strwhere += " and a.FROMHOUSEID = " + fromhouseid;
		else if (fromhousename.length() > 0)
			strwhere += " and ( c.housename like '%" + fromhousename + "%' or c.shortname like '%" + fromhousename.toUpperCase() + "%')";
		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";

		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (noteno1.length() > 0)
			strwhere += " and a.NOTENO1 like '%" + noteno1.toUpperCase() + "%'";
		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";
		// if (mindate == null || mindate == "") qry += " and a.NOTEDATE >=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 00:00:00','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		// if (maxdate == null || maxdate == "") qry += " and a.NOTEDATE <=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 23:59:59','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";
		// if (levelid != 0 && levelid != 4 && levelid != 5) // 0系统管理员,4经理,5老板
		// 允许看所有的在途调拨单
		long levelid = htp.getLevelid();
		// strwhere += " and exists (select 1 from employe b where
		// a.tohouseid=b.houseid and b.epid=" + htp.getUserid() + ")";
		// 0=系统管理员,1=店员（代理业务员）,2=店长（代理业务主管）,3=财务,4=经理,5=老板,6=督导（公司主管）,7=收银员（公司业务）,8=AD客服,9=库管(程序员)

		if (htp.getQxbj() == 1 && levelid != 0 && levelid != 4 && levelid != 5) // 1=启用权限控制																				
			strwhere += " and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";

		if (wareid != 0) {
			strwhere += " and exists (select 1 from allotinm x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (wareno.length() > 0) {
			strwhere += " and exists (select 1 from allotinm x join warecode y on x.wareid=y.wareid where a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno.toUpperCase() + "%')";
		}

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.HOUSEID,a.NOTENO1,a.NTID,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,B.HOUSENAME";
		Allotinh dal = new Allotinh();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取初始入库记录列表
	protected void GetFirsthousehList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		// String provname = jsonObject.has("provname") ?
		// jsonObject.getString("provname").replace("'", "''") : "";
		// String wareno = jsonObject.has("wareno") ?
		// jsonObject.getString("wareno").replace("'", "''") : "";
		// String wareno = jsonObject.has("wareno") ?
		// jsonObject.getString("wareno").replace("'", "''") : "";

		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// int ywly = jsonObject.has("ywly") ?
		// Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 2;
		String lastop = htp.getUsername();

		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		// String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (htp.getLevelid() == 0) // 系统管理员允许看所有用户的单据
		{
			if (statetag == 0)
				strwhere += " and a.statetag=0 "; // 未提 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0)"; // 所有
		} else {
			if (statetag == 0)
				strwhere += " and a.statetag=0 and a.operant='" + lastop + "'"; // 未提
			// 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0 and a.operant='" + lastop + "')"; // 所有
		}
		if (findbox.length() > 0)
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or b.housename like '%" + findbox + "%' or a.operant like '%" + findbox + "%' )";

		if (houseid > 0)
			strwhere += " and a.HOUSEID = " + houseid;
		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";
		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";

		// if (mindate == null || mindate == "") qry += " and a.NOTEDATE >=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 00:00:00','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		// if (maxdate == null || maxdate == "") qry += " and a.NOTEDATE <=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 23:59:59','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (wareid > 0) // 如果转入epid,说明要判断职员仓库权限
		{
			strwhere += " and exists (select 1 from firsthousem x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (wareno.length() > 0) {
			strwhere += " and exists (select 1 from firsthousem x,warecode y where x.wareid=y.wareid and a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno + "%')";
		}

		if (htp.getQxbj() == 1) // 1 启用权限控制
			strwhere += " and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.NOTEDATE,A.HOUSEID,A.NTID,A.HANDNO,A.REMARK,A.OPERANT,A.CHECKMAN,A.STATETAG,A.LASTDATE,B.HOUSENAME";
		Firsthouseh dal = new Firsthouseh();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取客户初始入库记录列表
	protected void GetFirstcusthList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";

		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// int ywly = jsonObject.has("ywly") ?
		// Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 2;
		String lastop = htp.getUsername();

		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		// String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (htp.getLevelid() == 0) // 系统管理员允许看所有用户的单据
		{
			if (statetag == 0)
				strwhere += " and a.statetag=0 "; // 未提 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0)"; // 所有
		} else {
			if (statetag == 0)
				strwhere += " and a.statetag=0 and a.operant='" + lastop + "'"; // 未提
			// 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0 and a.operant='" + lastop + "')"; // 所有
		}
		if (findbox.length() > 0)
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or b.housename like '%" + findbox + "%' or a.operant like '%" + findbox + "%' )";

		if (custid > 0)
			strwhere += " and a.custid = " + custid;
		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";
		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";

		// if (mindate == null || mindate == "") qry += " and a.NOTEDATE >=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 00:00:00','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		// if (maxdate == null || maxdate == "") qry += " and a.NOTEDATE <=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 23:59:59','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (wareid > 0) // 如果转入epid,说明要判断职员仓库权限
		{
			strwhere += " and exists (select 1 from firsthousem x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (wareno.length() > 0) {
			strwhere += " and exists (select 1 from firsthousem x,warecode y where x.wareid=y.wareid and a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno + "%')";
		}

		// if (htp.getQxbj() == 1) // 1 启用权限控制
		// strwhere += " and (a.houseid=0 or exists (select 1 from employehouse
		// x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.NOTEDATE,A.CUSTID,A.NTID,A.HANDNO,A.REMARK,A.OPERANT,A.CHECKMAN,A.STATETAG,A.LASTDATE,B.CUSTNAME";
		Firstcusth dal = new Firstcusth();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取客户销售记录列表
	protected void GetCustsalehList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";

		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// int ywly = jsonObject.has("ywly") ?
		// Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 2;
		String lastop = htp.getUsername();

		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		// String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (htp.getLevelid() == 0) // 系统管理员允许看所有用户的单据
		{
			if (statetag == 0)
				strwhere += " and a.statetag=0 "; // 未提 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0)"; // 所有
		} else {
			if (statetag == 0)
				strwhere += " and a.statetag=0 and a.operant='" + lastop + "'"; // 未提
			// 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0 and a.operant='" + lastop + "')"; // 所有
		}
		if (findbox.length() > 0)
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or b.custname like '%" + findbox + "%' or a.operant like '%" + findbox + "%' )";

		if (custid > 0)
			strwhere += " and a.custid = " + custid;
		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";
		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";

		// if (mindate == null || mindate == "") qry += " and a.NOTEDATE >=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 00:00:00','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		// if (maxdate == null || maxdate == "") qry += " and a.NOTEDATE <=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 23:59:59','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (wareid > 0) // 如果转入epid,说明要判断职员仓库权限
		{
			strwhere += " and exists (select 1 from custsalem x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (wareno.length() > 0) {
			strwhere += " and exists (select 1 from custsalem x,warecode y where x.wareid=y.wareid and a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno + "%')";
		}

		// if (htp.getQxbj() == 1) // 1 启用权限控制
		// strwhere += " and exists (select 1 from employecust x where
		// a.custid=x.custid and x.EPID=" + htp.getUserid() + ")";

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.NOTEDATE,A.CUSTID,A.NTID,A.HANDNO,A.REMARK,A.OPERANT,A.CHECKMAN,A.STATETAG,A.LASTDATE,B.CUSTNAME";
		Custsaleh dal = new Custsaleh();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取客户初始入库记录列表
	protected void GetFirstcusthList(HttpServletResponse response, HttpInfo htp, int ntid) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		// String provname = jsonObject.has("provname") ?
		// jsonObject.getString("provname").replace("'", "''") : "";
		// String wareno = jsonObject.has("wareno") ?
		// jsonObject.getString("wareno").replace("'", "''") : "";
		// String wareno = jsonObject.has("wareno") ?
		// jsonObject.getString("wareno").replace("'", "''") : "";

		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		// int ywly = jsonObject.has("ywly") ?
		// Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 2;
		String lastop = htp.getUsername();

		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		// String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (htp.getLevelid() == 0) // 系统管理员允许看所有用户的单据
		{
			if (statetag == 0)
				strwhere += " and a.statetag=0 "; // 未提 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0)"; // 所有
		} else {
			if (statetag == 0)
				strwhere += " and a.statetag=0 and a.operant='" + lastop + "'"; // 未提
			// 交
			else if (statetag == 1)
				strwhere += " and a.statetag=1"; // 已提 交
			else
				strwhere += " and (a.STATETAG=1 or a.STATETAG=0 and a.operant='" + lastop + "')"; // 所有
		}
		if (findbox.length() > 0)
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or b.housename like '%" + findbox + "%' or a.operant like '%" + findbox + "%' )";

		if (custid > 0)
			strwhere += " and a.custid = " + custid;
		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";
		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";

		// if (mindate == null || mindate == "") qry += " and a.NOTEDATE >=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 00:00:00','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		// if (maxdate == null || maxdate == "") qry += " and a.NOTEDATE <=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 23:59:59','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		if (wareid > 0) // 如果转入epid,说明要判断职员仓库权限
		{
			strwhere += " and exists (select 1 from firsthousem x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (wareno.length() > 0) {
			strwhere += " and exists (select 1 from firsthousem x,warecode y where x.wareid=y.wareid and a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno + "%')";
		}

		if (htp.getQxbj() == 1) // 1 启用权限控制
			strwhere += " and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.NOTEDATE,A.HOUSEID,A.NTID,A.HANDNO,A.REMARK,A.OPERANT,A.CHECKMAN,A.STATETAG,A.LASTDATE,B.HOUSENAME";
		Firstcusth dal = new Firstcusth();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取采购入库，采购退货记录列表
	protected void GetWareinhList(HttpServletResponse response, HttpInfo htp, int ntid) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long areaid = jsonObject.has("areaid") ? Long.parseLong(jsonObject.getString("areaid")) : 0;
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;

		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno").replace("'", "''") : "";
		String orderno = jsonObject.has("orderno") ? jsonObject.getString("orderno") : "";
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant").replace("'", "''") : "";

		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "desc";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "notedate";
		sort += " " + order + ",id ";// +order;

		String remark = jsonObject.has("remark") ? jsonObject.getString("remark").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		int ywly = jsonObject.has("ywly") ? Integer.parseInt(jsonObject.getString("ywly")) : 2;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 2;
		String lastop = htp.getUsername();

		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		// String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		// String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + accid + "  and a.ntid=" + ntid;
		if (ywly == 0) {// ywly=0 只查询手机端增加的单据，用于向erp传数据
			strwhere += " and a.ywly=" + ywly;
			if (statetag < 2)
				strwhere += " and a.statetag=" + statetag; // 已提 交
		} else {
			if (htp.getLevelid() == 0) // 系统管理员允许看所有用户的单据
			{
				if (statetag == 0)
					strwhere += " and a.statetag=0 "; // 未提 交
				else if (statetag == 1)
					strwhere += " and a.statetag=1"; // 已提 交
				else
					strwhere += " and (a.STATETAG=1 or a.STATETAG=0)"; // 所有
			} else {

				if (statetag == 0)
					strwhere += " and a.statetag=0 and a.operant='" + lastop + "'"; // 未提
				// 交
				else if (statetag == 1)
					strwhere += " and a.statetag=1"; // 已提 交
				else
					strwhere += " and (a.STATETAG=1 or a.STATETAG=0 and a.operant='" + lastop + "')"; // 所有
			}
		}
		// qry += " and (a.STATETAG=1 or a.STATETAG=0 and a.operant='" + lastop
		// + "')"; //所有

		if (findbox.length() > 0)
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox//
					+ "%' or b.provname like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase() + "%')";

		if (provid > 0)
			strwhere += " and a.PROVID = " + provid;
		// else if (provname != null && provname != "")
		// strwhere += " and (b.provname like '%" + provname + "%' or
		// b.shortname like '%" + provname.ToUpper() + "%')";

		if (houseid > 0)
			strwhere += " and a.HOUSEID = " + houseid;
		// else if (housename != null && housename != "")
		// strwhere += " and (c.housename like '%" + housename + "%' or
		// c.shortname like '%" + housename.ToUpper() + "%')";

		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";

		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";

		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (orderno.length() > 0)
			strwhere += " and a.orderno like '%" + orderno.toUpperCase() + "%'";

		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";

		// if (mindate == null || mindate == "") qry += " and a.NOTEDATE >=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 00:00:00','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";

		// if (maxdate == null || maxdate == "") qry += " and a.NOTEDATE <=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 23:59:59','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		// qry += " and a.notedate >= to_date('" + mindate + " 00:00:00' and
		// a.notedate<='" + maxdate + " 23:59:59'";

		if (htp.getQxbj() == 1) {// 1 启用权限控制
			strwhere += " and (a.houseid=0 or exists (select 1 from employehouse x where a.HOUSEID=x.HOUSEID and x.EPID=" + htp.getUserid() + "))";
			strwhere += " and (a.provid=0 or exists (select 1 from employeprov x where a.provid=x.provid and x.EPID=" + htp.getUserid() + "))";
		}

		if (areaid > 0 || wareid > 0 || wareno != null && wareno.length() > 0) {
			strwhere += " and exists (select 1 from wareinm x ";
			if (areaid > 0 || wareid == 0 && wareno != null && wareno.length() > 0)
				strwhere += " join warecode y on x.wareid=y.wareid";
			strwhere += " where a.accid=x.accid and a.noteno=x.noteno ";
			if (areaid > 0)
				strwhere += " and y.areaid=" + areaid;
			if (wareid > 0)
				strwhere += " and x.wareid=" + wareid;
			else if (wareno != null && wareno.length() > 0) {
				strwhere += " and y.wareno like '%" + wareno + "%'";
			}
			strwhere += "  )";

		}
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.NOTEDATE,A.PROVID,A.HOUSEID,A.NTID,A.HANDNO,A.REMARK,A.OPERANT,A.CHECKMAN,A.STATETAG,A.LASTDATE,A.TOTALAMT,A.TOTALCURR,B.PROVNAME,B.DISCOUNT,B.PRICETYPE,C.HOUSENAME";
		if (!fieldlist.toUpperCase().contains("A.NTID"))
			fieldlist += ",A.NTID";

		Wareinh dal = new Wareinh();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("nvl(sum(totalamt),0) as totalamount,nvl(sum(totalcurr),0) as totalcurr");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {// 导出excel
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 新增采购入库记录
	protected void AddWareinhRec(HttpServletResponse response, HttpInfo htp, int ntid) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		Wareinh dal = new Wareinh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setProvid(provid);
		dal.setHouseid(houseid);
		dal.setNtid(ntid);
		WriteResultJson(response, dal.Append(), dal.getErrmess());
	}

	// 获取销售出库商品颜色尺码明细
	protected void GetWareoutmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long guestid = jsonObject.has("guestid") ? Long.parseLong(jsonObject.getString("guestid")) : 0;
		long saleid = jsonObject.has("saleid") ? Long.parseLong(jsonObject.getString("saleid")) : 0;
		String boxno = jsonObject.has("boxno") ? jsonObject.getString("boxno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		int ntid = jsonObject.has("ntid") ? Integer.parseInt(jsonObject.getString("ntid")) : 0;
		int priceprec = htp.getPriceprec();
		int nearsaleok = htp.getNearsale();
		Wareoutm dal = new Wareoutm();
		dal.setUserid(htp.getUserid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setBoxno(boxno);
		dal.setCalcdate(htp.getCalcdate());
		dal.setAccid(htp.getMaccid());
		dal.setSaleid(saleid);
		if (dal.Load(custid, houseid, guestid, ntid, priceprec, nearsaleok, wareno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取客户销售商品颜色尺码明细
	protected void GetCustsalemsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";

		int priceprec = htp.getPriceprec();
		Custsalem dal = new Custsalem();

		dal.setUserid(htp.getUserid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setCalcdate(htp.getCalcdate());

		dal.setAccid(htp.getMaccid());
		// dal.setSaleid(saleid);
		if (dal.Load(custid, priceprec, wareno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取调拨出库商品颜色尺码明细
	protected void GetAllotoutmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long tohouseid = jsonObject.has("tohouseid") ? Long.parseLong(jsonObject.getString("tohouseid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		int priceprec = htp.getPriceprec();
		Allotoutm dal = new Allotoutm();

		dal.setUserid(htp.getUserid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setCalcdate(htp.getCalcdate());
		if (dal.Load(houseid, tohouseid, priceprec, wareno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 获取调拨入库商品颜色尺码明细
	protected void GetAllotinmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		// long tohouseid = jsonObject.has("tohouseid") ?
		// Long.parseLong(jsonObject.getString("tohouseid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));

		Allotinm dal = new Allotinm();

		dal.setUserid(htp.getUserid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		if (dal.Load(houseid, priceprec, wareno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 获取临时盘点商品颜色尺码明细
	protected void GetTempcheckmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));

		Tempcheckm dal = new Tempcheckm();

		dal.setUserid(htp.getUserid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		if (dal.Load(priceprec, wareno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 获取商品盘点商品颜色尺码明细
	protected void GetWarecheckmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));

		Warecheckm dal = new Warecheckm();

		dal.setUserid(htp.getUserid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setCalcdate(htp.getCalcdate());
		if (dal.Load(houseid, priceprec, wareno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 获取客户商品盘点商品颜色尺码明细
	protected void GetCustcheckmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));

		Custcheckm dal = new Custcheckm();

		dal.setUserid(htp.getUserid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setCalcdate(htp.getCalcdate());
		if (dal.Load(custid, priceprec, wareno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 获取商品库存报警商品颜色尺码明细
	// protected void GetWarewarnmsum(HttpServletResponse response, HttpInfo
	// htp) throws ServletException, IOException {
	// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
	// long wareid = jsonObject.has("wareid") ?
	// Long.parseLong(jsonObject.getString("wareid")) : 0;
	// // long houseid = jsonObject.has("houseid") ?
	// Long.parseLong(jsonObject.getString("houseid")) : 0;
	// String noteno = jsonObject.has("noteno") ?
	// jsonObject.getString("noteno").replace("'", "''") : "";
	// // int priceprec = htp.getPriceprec();//
	// Integer.parseInt(Func.subString(qxpublic, 4, 1));
	//
	// Warewarnm dal = new Warewarnm();
	//
	// dal.setUserid(htp.getUserid());
	// dal.setNoteno(noteno);
	// dal.setWareid(wareid);
	// dal.setAccid(htp.getMaccid());
	// if (dal.Load() == 0)
	// WriteResult(response, 0, dal.getErrmess());
	// else
	// WriteResultJson(response, 1, dal.getErrmess());
	//
	// }

	// 获取指定调拨订单记录id信息
	protected void GetAllotorderhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";// 调拨出库单号
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";// 调拨出库单号
		String strwhere = " a.NOTENO='" + noteno + "' and a.ACCID=" + htp.getMaccid();
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.HOUSEID,a.REMARK,a.HANDNO,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE,b.HOUSENAME";
		Table tb = new Table();
		Allotorderh dal = new Allotorderh();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 新增调拨订单记录
	protected void AddAllotorderhRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long provid = jsonObject.has("provid") ?
		// Long.parseLong(jsonObject.getString("provid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		Allotorderh dal = new Allotorderh();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		// dal.setProvid(provid);
		dal.setHouseid(houseid);
		// dal.setNtid(ntid);
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 删除指定调拨订单记录id信息
	protected void DelAllotorderhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Allotorderh dal = new Allotorderh();
		long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		dal.setNoteno(noteno);
		dal.setAccid(accid);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			// int ntid = dal.getNtid();
			// if (ntid == 0)
			// pFunc.myWriteLog(accid, "采购入库", "【删除单据】" + noteno, lastop);
			// else
			pFunc.myWriteLog(accid, "调拨订单", "【删除单据】" + noteno, lastop);

			WriteResult(response, 1, dal.getErrmess());
		}
	}

	// 删除指定采购订单记录id信息
	protected void DelProvorderhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Provorderh dal = new Provorderh();
		long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		dal.setNoteno(noteno);
		dal.setAccid(accid);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			pFunc.myWriteLog(accid, "采购订单", "【删除单据】" + noteno, lastop);

			WriteResult(response, 1, dal.getErrmess());
		}
	}

	// 删除客户退货申请记录
	protected void DelRefundaskhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Refundouth dal = new Refundouth();
		long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		dal.setNoteno(noteno);
		dal.setAccid(accid);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			pFunc.myWriteLog(accid, "退货申请单", "【删除单据】" + noteno, lastop);

			WriteResult(response, 1, dal.getErrmess());
		}
	}

	// 删除指定客户订单记录id信息
	protected void DelCustorderhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Custorderh dal = new Custorderh();
		long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		dal.setNoteno(noteno);
		dal.setAccid(accid);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			pFunc.myWriteLog(accid, "客户订单", "【删除单据】" + noteno, lastop);

			WriteResult(response, 1, dal.getErrmess());
		}
	}

	// 删除指定调拨入库记录id信息
	protected void DelAllotinhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Allotinh dal = new Allotinh();
		long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		dal.setNoteno(noteno);
		dal.setAccid(accid);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			// int ntid = dal.getNtid();
			// if (ntid == 0)
			// pFunc.myWriteLog(accid, "采购入库", "【删除单据】" + noteno, lastop);
			// else
			pFunc.myWriteLog(accid, "调拨入库", "【删除单据】" + noteno, lastop);

			WriteResult(response, 1, dal.getErrmess());
		}
	}

	// 删除指定期初入库记录id信息
	protected void DelFirsthousehByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		//		int delbj = jsonObject.has("delbj") ? Integer.parseInt(jsonObject.getString("delbj")) : 0;
		//delbj=1,强制删除
		Firsthouseh dal = new Firsthouseh();
		long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		dal.setNoteno(noteno);
		dal.setAccid(accid);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			pFunc.myWriteLog(accid, "期初入库", "【删除单据】" + noteno, lastop);
			WriteResult(response, 1, dal.getErrmess());
		}
	}

	// 删除指定客户期初入库记录id信息
	protected void DelFirstcusthByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Firstcusth dal = new Firstcusth();
		long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		dal.setNoteno(noteno);
		dal.setAccid(accid);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			pFunc.myWriteLog(accid, "客户初始入库", "【删除单据】" + noteno, lastop);
			WriteResult(response, 1, dal.getErrmess());
		}
	}

	// 删除指定客户销售记录id信息
	protected void DelCustsalehByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Custsaleh dal = new Custsaleh();
		long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		dal.setNoteno(noteno);
		dal.setAccid(accid);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			pFunc.myWriteLog(accid, "客户初始入库", "【删除单据】" + noteno, lastop);
			WriteResult(response, 1, dal.getErrmess());
		}
	}

	// 更新指定初始入库记录id信息
	protected void UpdateFirsthousehByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String noteno = jsonObject.has("noteno") ?
		// jsonObject.getString("noteno").replace("'", "''") : "";
		Firsthouseh dal = new Firsthouseh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		long accid = htp.getMaccid();
		int changedatebj = htp.getChangedatebj();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		// dal.setNoteno(noteno);
		dal.setAccid(accid);
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Update(changedatebj), dal.getErrmess());
	}

	// 更新指定客户初始入库记录id信息
	protected void UpdateFirstcusthByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String noteno = jsonObject.has("noteno") ?
		// jsonObject.getString("noteno").replace("'", "''") : "";
		Firstcusth dal = new Firstcusth();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		long accid = htp.getMaccid();
		int changedatebj = htp.getChangedatebj();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		// dal.setNoteno(noteno);
		dal.setAccid(accid);
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Update(changedatebj), dal.getErrmess());
	}

	// 更新指定客户销售记录id信息
	protected void UpdateCustsalehByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String noteno = jsonObject.has("noteno") ?
		// jsonObject.getString("noteno").replace("'", "''") : "";
		Custsaleh dal = new Custsaleh();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		long accid = htp.getMaccid();
		int changedatebj = htp.getChangedatebj();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		// dal.setNoteno(noteno);
		dal.setAccid(accid);
		dal.setCalcdate(htp.getCalcdate());

		WriteResult(response, dal.Update(changedatebj), dal.getErrmess());
	}

	// 删除指定调拨出库记录id信息
	protected void DelAllotouthByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Allotouth dal = new Allotouth();
		long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		dal.setNoteno(noteno);
		dal.setAccid(accid);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			pFunc.myWriteLog(accid, "调拨出库", "【删除单据】" + noteno, lastop);

			WriteResult(response, 1, dal.getErrmess());
		}
	}

	// 删除指定采购入库记录id信息
	protected void DelWareinhByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Wareinh dal = new Wareinh();
		long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		dal.setNoteno(noteno);
		dal.setAccid(accid);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			int ntid = dal.getNtid();
			if (ntid == 0)
				pFunc.myWriteLog(accid, "采购入库", "【删除单据】" + noteno, lastop);
			else
				pFunc.myWriteLog(accid, "采购退货", "【删除单据】" + noteno, lastop);

			WriteResult(response, 1, dal.getErrmess());
		}
	}

	// 获取退货申请商品颜色尺码明细
	protected void GetRefundaskmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		long saleid = jsonObject.has("saleid") ? Long.parseLong(jsonObject.getString("saleid")) : 0;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
		int nearsaleok = htp.getNearsale();
		Refundoutm dal = new Refundoutm();

		dal.setUserid(htp.getUserid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setSaleid(saleid);
		if (dal.Load(custid, priceprec, nearsaleok, wareno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 获取采购入库商品颜色尺码明细
	protected void GetWareinmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		int ntid = jsonObject.has("ntid") ? Integer.parseInt(jsonObject.getString("ntid")) : 0;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));

		Wareinm dal = new Wareinm();

		dal.setUserid(htp.getUserid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		if (dal.Load(provid, houseid, ntid, priceprec, wareno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 获取期初入库商品颜色尺码明细
	protected void GetFirsthousemsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));

		Firsthousem dal = new Firsthousem();

		dal.setUserid(htp.getUserid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		if (dal.Load(houseid, priceprec, wareno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取客户期初入库商品颜色尺码明细
	protected void GetFirstcustmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));

		Firstcustm dal = new Firstcustm();

		dal.setUserid(htp.getUserid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		if (dal.Load(custid, priceprec, wareno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取调拨订单商品颜色尺码明细
	protected void GetAllotordermsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		int priceprec = htp.getPriceprec();

		Allotorderm dal = new Allotorderm();

		dal.setUserid(htp.getUserid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		if (dal.Load(houseid, priceprec, wareno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取客户订单商品颜色尺码明细
	protected void GetCustordermsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
		int nearsaleok = htp.getNearsale();// Integer.parseInt(Func.subString(qxpublic,
											// 3, 1)); // 未启用最近售价

		Custorderm dal = new Custorderm();

		dal.setUserid(htp.getUserid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		if (dal.Load(custid, priceprec, nearsaleok, wareno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取采购订单商品颜色尺码明细
	protected void GetProvordermsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long provid = jsonObject.has("provid") ? Long.parseLong(jsonObject.getString("provid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		// long custid = jsonObject.has("custid") ?
		// Long.parseLong(jsonObject.getString("custid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
											// int nearsaleok =
											// Integer.parseInt(Func.subString(qxpublic,
											// 3, 1));
											// // 未启用最近售价

		Provorderm dal = new Provorderm();

		dal.setUserid(htp.getUserid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		if (dal.Load(provid, houseid, priceprec, wareno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 列出指定店铺的销售人员，与前台销售单关联
	protected void GetWaresalemanlist(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		// houseid:0=只显示选中人员，-1=显示所有职员
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		QueryParam qp = new QueryParam(page, pagesize, "SELBJ DESC, epid");

		Table tb = new Table();
		Waresaleman dal = new Waresaleman();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setFindbox(findbox);
		tb = dal.GetTable(qp, houseid);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 取前台单据销售人员名称串
	protected void GetWaresalemanname(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Table tb = new Table();
		Waresaleman dal = new Waresaleman();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		tb = dal.GetList().getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 写前台销售人员
	protected void WriteWaresaleman(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		int value = jsonObject.has("value") ? Integer.parseInt(jsonObject.getString("value")) : 0;
		int clearall = jsonObject.has("clearall") ? Integer.parseInt(jsonObject.getString("clearall")) : 0;
		Waresaleman dal = new Waresaleman();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setEpid(epid);
		// dal.setSaleid(saleid);
		// dal.setRemark0(remark0);
		WriteResult(response, dal.Write(value, clearall), dal.getErrmess());

	}

	// 保存退货申请商品颜色尺码明细
	protected void WriteRefundaskmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// String remark0 = jsonObject.has("remark0") ?
		// jsonObject.getString("remark0") : "";
		Refundoutm dal = new Refundoutm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		// dal.setSaleid(saleid);
		// dal.setRemark0(remark0);
		WriteResult(response, dal.Write(jsonObject), dal.getErrmess());

	}

	// 保存销售出库商品颜色尺码明细
	protected void WriteWareoutmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long saleid = jsonObject.has("saleid") ? Long.parseLong(jsonObject.getString("saleid")) : 0;
		long saleid0 = jsonObject.has("saleid0") ? Long.parseLong(jsonObject.getString("saleid0")) : 0;
		int ntid = jsonObject.has("ntid") ? Integer.parseInt(jsonObject.getString("ntid")) : -1;
		int currprec = 2;
		if (ntid == 0) // 零售额小数位数
			currprec = htp.getCurrprec();
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		// String remark0 = jsonObject.has("remark0") ?
		// jsonObject.getString("remark0") : "";
		Wareoutm dal = new Wareoutm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setSaleid(saleid);
		// dal.setRemark0(remark0);
		WriteResult(response, dal.Write(jsonObject, saleid0, currprec), dal.getErrmess());

	}

	// 保存调拨出库商品颜色尺码明细
	protected void WriteAllotoutmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Allotoutm dal = new Allotoutm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Write(jsonObject), dal.getErrmess());
	}

	// 保存调拨订货商品颜色尺码明细
	protected void WriteAllotordermsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Allotorderm dal = new Allotorderm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Write(jsonObject), dal.getErrmess());
	}

	// 保存临时盘点商品颜色尺码明细
	protected void WriteTempcheckmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Tempcheckm dal = new Tempcheckm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Write(jsonObject), dal.getErrmess());

	}

	// 保存商品盘点商品颜色尺码明细
	protected void WriteWarecheckmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Warecheckm dal = new Warecheckm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Write(jsonObject, houseid), dal.getErrmess());

	}

	// 保存客户商品盘点商品颜色尺码明细
	protected void WriteCustcheckmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Custcheckm dal = new Custcheckm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Write(jsonObject, custid), dal.getErrmess());

	}

	// 保存客户订货商品颜色尺码明细
	protected void WriteCustordermsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Custorderm dal = new Custorderm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Write(jsonObject), dal.getErrmess());

	}

	// 保存采购订货商品颜色尺码明细
	protected void WriteProvordermsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Provorderm dal = new Provorderm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Write(jsonObject), dal.getErrmess());

	}

	// 保存采购入库商品颜色尺码明细
	protected void WriteWareinmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Wareinm dal = new Wareinm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Write(jsonObject), dal.getErrmess());
	}

	// 保存期初入库商品颜色尺码明细
	protected void WriteFirsthousemsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Firsthousem dal = new Firsthousem();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Write(jsonObject), dal.getErrmess());

	}

	// 保存客户期初入库商品颜色尺码明细
	protected void WriteFirstcustmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Firstcustm dal = new Firstcustm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Write(jsonObject), dal.getErrmess());

	}

	// 保存客户销售商品颜色尺码明细
	protected void WriteCustsalemsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Custsalem dal = new Custsalem();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Write(jsonObject), dal.getErrmess());

	}

	// 删除销售出库商品及颜色记录
	protected void DelWareoutmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Wareoutm dal = new Wareoutm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 删除退货申请商品及颜色记录
	protected void DelRefundaskmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Refundoutm dal = new Refundoutm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 删除调拨出库商品及颜色记录
	protected void DelAllotoutmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Allotoutm dal = new Allotoutm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Delete(), dal.getErrmess());

	}

	// 成批增加销售库数据
	protected void AddWareoutmbatch(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
		int fs = htp.getFsout();
		Wareoutm dal = new Wareoutm();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Appendbat(jsonObject, priceprec, fs), dal.getErrmess());
	}

	// 成批增加退货申请库数据
	protected void AddRefundaskmbatch(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
											// int fs = htp.getFsout();
		Refundoutm dal = new Refundoutm();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Appendbat(jsonObject, priceprec), dal.getErrmess());
	}

	// 成批增加采购入库数据
	protected void AddWareinmbatch(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
		int fs = htp.getFsout();
		int changeenterprice = htp.getChangeenterprice();

		int housecostbj = htp.getHousecostbj();

		Wareinm dal = new Wareinm();
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Appendbat(jsonObject, priceprec, fs, changeenterprice, housecostbj), dal.getErrmess());

	}

	// 成批增加采购订货数据
	protected void AddProvordermbatch(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));

		Provorderm dal = new Provorderm();
		dal.setAccid(htp.getMaccid());
		// dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Appendbat(jsonObject, priceprec), dal.getErrmess());

	}

	// 新增客户销售记录(从excel中导入)
	protected void AddCustsalemxls(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String colorname = jsonObject.has("colorname") ? jsonObject.getString("colorname") : "";
		String sizename = jsonObject.has("sizename") ? jsonObject.getString("sizename") : "";
		String gbbar = jsonObject.has("gbbar") ? jsonObject.getString("gbbar") : "";

		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		Custsalem dal = new Custsalem();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setWareno(wareno);
		dal.setColorname(colorname);
		dal.setSizename(sizename);
		dal.setAmount(amount);
		dal.setPrice(price);
		WriteResult(response, dal.LoadFromXLS(gbbar), dal.getErrmess());

	}

	// 新增客户订单记录(从excel中导入)
	protected void AddCustordermxls(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String colorname = jsonObject.has("colorname") ? jsonObject.getString("colorname") : "";
		String sizename = jsonObject.has("sizename") ? jsonObject.getString("sizename") : "";
		String gbbar = jsonObject.has("gbbar") ? jsonObject.getString("gbbar") : "";

		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		Custorderm dal = new Custorderm();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setWareno(wareno);
		dal.setColorname(colorname);
		dal.setSizename(sizename);
		dal.setAmount(amount);
		dal.setPrice(price);
		WriteResult(response, dal.LoadFromXLS(gbbar), dal.getErrmess());

	}

	// 新增采购订单记录(从excel中导入)
	protected void AddProvordermxls(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno").replace("'", "''") : "";
		String colorname = jsonObject.has("colorname") ? jsonObject.getString("colorname") : "";
		String sizename = jsonObject.has("sizename") ? jsonObject.getString("sizename") : "";
		String gbbar = jsonObject.has("gbbar") ? jsonObject.getString("gbbar") : "";

		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		Provorderm dal = new Provorderm();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setWareno(wareno);
		dal.setColorname(colorname);
		dal.setSizename(sizename);
		dal.setAmount(amount);
		dal.setPrice(price);
		WriteResult(response, dal.LoadFromXLS(gbbar), dal.getErrmess());

	}

	// 成批增加客户订货数据
	protected void AddCustordermbatch(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();

		Custorderm dal = new Custorderm();
		dal.setAccid(htp.getMaccid());
		// dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Appendbat(jsonObject, priceprec), dal.getErrmess());

	}

	// 成批增加期初入库数据
	protected void AddFirsthousembatch(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();

		Firsthousem dal = new Firsthousem();
		dal.setAccid(htp.getMaccid());
		// dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Appendbat(jsonObject, priceprec), dal.getErrmess());

	}

	// 成批增加客户销售数据
	protected void AddCustsalembatch(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();
		Custsalem dal = new Custsalem();
		dal.setAccid(htp.getMaccid());
		// dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Appendbat(jsonObject, priceprec), dal.getErrmess());
	}

	// 成批增加临时盘点数据
	protected void AddTempcheckmbatch(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();
		Tempcheckm dal = new Tempcheckm();
		dal.setAccid(htp.getMaccid());
		// dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Appendbat(jsonObject, priceprec), dal.getErrmess());

	}

	// 成批增加商品盘点数据
	protected void AddWarecheckmbatch(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();
		Warecheckm dal = new Warecheckm();
		dal.setAccid(htp.getMaccid());
		dal.setCalcdate(htp.getCalcdate());
		// dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Appendbat(jsonObject, priceprec), dal.getErrmess());
	}

	// 成批增加客户商品盘点数据
	protected void AddCustcheckmbatch(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();
		Custcheckm dal = new Custcheckm();
		dal.setAccid(htp.getMaccid());
		dal.setCalcdate(htp.getCalcdate());
		// dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Appendbat(jsonObject, priceprec), dal.getErrmess());
	}

	// 成批增加调拨出库数据
	protected void AddAllotoutmbatch(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();
		int fs = htp.getFsout();// fs=1,允许负数出库
		Allotoutm dal = new Allotoutm();
		dal.setAccid(htp.getMaccid());
		dal.setCalcdate(htp.getCalcdate());
		// dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Appendbat(jsonObject, priceprec, fs), dal.getErrmess());
	}

	// 成批增加调拨订货数据
	protected void AddAllotordermbatch(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();

		Allotorderm dal = new Allotorderm();
		dal.setAccid(htp.getMaccid());
		// dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Appendbat(jsonObject, priceprec), dal.getErrmess());
	}

	// 清除采购入库明细记录
	protected void ClearWareinm(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Wareinm dal = new Wareinm();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Clearall(), dal.getErrmess());
	}

	// 清除批发出库明细记录
	protected void ClearWareoutm(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Wareoutm dal = new Wareoutm();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setLastop(htp.getUsername());
		WriteResult(response, dal.Clearall(), dal.getErrmess());

	}

	// 删除采购入库商品及颜色记录
	protected void DelWareinmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Wareinm dal = new Wareinm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Delete(), dal.getErrmess());

	}

	// 删除采购订单商品及颜色记录
	protected void DelProvordermsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Provorderm dal = new Provorderm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Delete(), dal.getErrmess());

	}

	// 删除客户订单商品及颜色记录
	protected void DelCustordermsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Custorderm dal = new Custorderm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 删除调拨订单商品及颜色记录
	protected void DelAllotordermsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Allotorderm dal = new Allotorderm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 删除临时盘点单商品及颜色记录
	protected void DelTempcheckmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Tempcheckm dal = new Tempcheckm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 删除商品盘点单商品及颜色记录
	protected void DelWarecheckmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Warecheckm dal = new Warecheckm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 删除客户商品盘点单商品及颜色记录
	protected void DelCustcheckmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Custcheckm dal = new Custcheckm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 删除商品盘点单商品及颜色记录
	// protected void DelWarewarnmsum(HttpServletResponse response, HttpInfo
	// htp) throws ServletException, IOException {
	// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
	// long wareid = jsonObject.has("wareid") ?
	// Long.parseLong(jsonObject.getString("wareid")) : 0;
	// long colorid = jsonObject.has("colorid") ?
	// Long.parseLong(jsonObject.getString("colorid")) : 0;
	// String noteno = jsonObject.has("noteno") ?
	// jsonObject.getString("noteno").replace("'", "''") : "";
	// Warewarnm dal = new Warewarnm();
	// dal.setNoteno(noteno);
	// dal.setWareid(wareid);
	// dal.setColorid(colorid);
	// dal.setAccid(htp.getMaccid());
	// WriteResult(response, dal.Delete(), dal.getErrmess());
	// }

	// 删除采期初入库商品及颜色记录
	protected void DelFirsthousemsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Firsthousem dal = new Firsthousem();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Delete(), dal.getErrmess());

	}

	// 删除客户期初入库商品及颜色记录
	protected void DelFirstcustmsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Firstcustm dal = new Firstcustm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Delete(), dal.getErrmess());

	}

	// 删除客户销售商品及颜色记录
	protected void DelCustsalemsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Custsalem dal = new Custsalem();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Delete(), dal.getErrmess());

	}

	// ======================================
	// 保存采购订货商品颜色尺码明细(选择输入方式)
	protected void WriteProvordermhand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		float price0 = jsonObject.has("price0") ? Float.parseFloat(jsonObject.getString("price0")) : 0;
		float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Provorderm dal = new Provorderm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		// dal.setLastop(htp.getUsername());
		dal.setDiscount(discount);
		dal.setPrice(price);
		dal.setPrice0(price0);
		dal.setAmount(amount);
		WriteResult(response, dal.AppendHand(jsonObject), dal.getErrmess());

	}

	// 保存采购入库商品颜色尺码明细(选择输入方式)
	protected void WriteWareinmhand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		float price0 = jsonObject.has("price0") ? Float.parseFloat(jsonObject.getString("price0")) : 0;
		float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Wareinm dal = new Wareinm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		// dal.setLastop(htp.getUsername());
		dal.setDiscount(discount);
		dal.setPrice(price);
		dal.setPrice0(price0);
		dal.setAmount(amount);
		WriteResult(response, dal.AppendHand(jsonObject), dal.getErrmess());

	}

	// 保存批发出库商品颜色尺码明细(选择输入方式)
	protected void WriteWareoutmhand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long saleid = jsonObject.has("saleid") ? Long.parseLong(jsonObject.getString("saleid")) : 0;
		float price0 = jsonObject.has("price0") ? Float.parseFloat(jsonObject.getString("price0")) : 0;
		float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Wareoutm dal = new Wareoutm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setSaleid(saleid);
		dal.setDiscount(discount);
		dal.setPrice(price);
		dal.setPrice0(price0);
		dal.setAmount(amount);
		WriteResult(response, dal.AppendHand(jsonObject), dal.getErrmess());

	}

	// 保存客户订货商品颜色尺码明细(选择输入方式)
	protected void WriteCustordermhand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		// long saleid = jsonObject.has("saleid") ?
		// Long.parseLong(jsonObject.getString("saleid")) : 0;
		float price0 = jsonObject.has("price0") ? Float.parseFloat(jsonObject.getString("price0")) : 0;
		float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Custorderm dal = new Custorderm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		// dal.setSaleid(saleid);
		dal.setDiscount(discount);
		dal.setPrice(price);
		dal.setPrice0(price0);
		dal.setAmount(amount);
		WriteResult(response, dal.AppendHand(jsonObject), dal.getErrmess());

	}

	// 保存配货商品颜色尺码明细(选择输入方式)
	protected void WriteWarepeimhand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long saleid = jsonObject.has("saleid") ? Long.parseLong(jsonObject.getString("saleid")) : 0;
		float price0 = jsonObject.has("price0") ? Float.parseFloat(jsonObject.getString("price0")) : 0;
		float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Warepeim dal = new Warepeim();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setSaleid(saleid);
		dal.setDiscount(discount);
		dal.setPrice(price);
		dal.setPrice0(price0);
		dal.setAmount(amount);
		WriteResult(response, dal.AppendHand(jsonObject), dal.getErrmess());
	}

	// 保存退货申请商品颜色尺码明细(选择输入方式)
	protected void WriteRefundaskmhand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long saleid = jsonObject.has("saleid") ? Long.parseLong(jsonObject.getString("saleid")) : 0;
		float price0 = jsonObject.has("price0") ? Float.parseFloat(jsonObject.getString("price0")) : 0;
		float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Refundoutm dal = new Refundoutm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setSaleid(saleid);
		dal.setDiscount(discount);
		dal.setPrice(price);
		dal.setPrice0(price0);
		dal.setAmount(amount);
		WriteResult(response, dal.AppendHand(jsonObject), dal.getErrmess());
	}

	// 保存调拨出库商品颜色尺码明细(选择输入方式)
	protected void WriteAllotoutmhand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Allotoutm dal = new Allotoutm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setPrice(price);
		dal.setAmount(amount);
		WriteResult(response, dal.AppendHand(jsonObject), dal.getErrmess());
	}

	// 保存调拨订货商品颜色尺码明细(选择输入方式)
	protected void WriteAllotordermhand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Allotorderm dal = new Allotorderm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setPrice(price);
		dal.setAmount(amount);
		WriteResult(response, dal.AppendHand(jsonObject), dal.getErrmess());
	}

	// 保存临时盘点商品颜色尺码明细(选择输入方式)
	protected void WriteTempcheckmhand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Tempcheckm dal = new Tempcheckm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setPrice(price);
		dal.setAmount(amount);
		WriteResult(response, dal.AppendHand(jsonObject), dal.getErrmess());
	}

	protected void WriteWarecheckmhand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Warecheckm dal = new Warecheckm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setPrice(price);
		dal.setAmount(amount);
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.AppendHand(jsonObject), dal.getErrmess());
	}

	// 保存客户盘点商品颜色尺码明细(选择输入方式)
	protected void WriteCustcheckmhand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Custcheckm dal = new Custcheckm();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setPrice(price);
		dal.setAmount(amount);
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.AppendHand(jsonObject), dal.getErrmess());
	}

	// 保存期初入库商品颜色尺码明细(选择输入方式)
	protected void WriteFirsthousemhand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Firsthousem dal = new Firsthousem();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setPrice(price);
		dal.setAmount(amount);
		WriteResult(response, dal.AppendHand(jsonObject), dal.getErrmess());
	}

	// 保存客户销售商品颜色尺码明细(选择输入方式)
	protected void WriteCustsalemhand(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		float amount = jsonObject.has("amount") ? Float.parseFloat(jsonObject.getString("amount")) : 0;
		float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		Custsalem dal = new Custsalem();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setPrice(price);
		dal.setAmount(amount);
		WriteResult(response, dal.AppendHand(jsonObject), dal.getErrmess());
	}

	// 删除商品打码打印的商品及颜色记录
	protected void DelWarebarprintsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		Warebarprint dal = new Warebarprint();
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setEpid(htp.getUserid());
		WriteResult(response, dal.Delete(), dal.getErrmess());

	}

	// 保存商条码打印的颜色尺码明细
	protected void WriteWarebarprintsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		// String remark0 = jsonObject.has("remark0") ?
		// jsonObject.getString("remark0") : "";
		Warebarprint dal = new Warebarprint();
		dal.setWareid(wareid);
		dal.setEpid(htp.getUserid());
		// dal.setRemark0(remark0);
		WriteResult(response, dal.Write(jsonObject), dal.getErrmess());

	}

	// 获取商品条码打印的颜色尺码明细
	protected void GetWarebarprintsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long houseid = jsonObject.has("bookid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		Warebarprint dal = new Warebarprint();
		dal.setWareid(wareid);
		dal.setEpid(htp.getUserid());
		if (dal.doSum(houseid) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 商品条码打印载入指定单据
	protected void LoadWarebarprintnote(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("bookid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno").replace("'", "''") : "";
		String notetype = jsonObject.has("notetype") ? jsonObject.getString("notetype") : "";
		// Notetype:CG=采购入库，QC=期初入库，LP=临时盘点，DC=调出，DR=调入，XS=批发，XT=批发退货，KO=客户订单，CO=采购订单
		int loadbj = jsonObject.has("loadbj") ? Integer.parseInt(jsonObject.getString("loadbj")) : 0;
		// loadbj=0, 清空载入 loadbj=1 追加载入
		Warebarprint dal = new Warebarprint();
		dal.setEpid(htp.getUserid());
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.LoadNote(houseid, noteno.toUpperCase(), notetype.toUpperCase(), loadbj), dal.getErrmess());

	}

	// 列取可以导入条码打印的单据记录表（采购入库，期初入库，临时盘点）
	protected void ListWarebarprintNote(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String nowdatestr = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
												// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : nowdatestr;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : nowdatestr;
		int notetype = jsonObject.has("notetype") ? Integer.parseInt(jsonObject.getString("notetype")) : 9;
		// notetype单据类型:0=采购入库，1=期初入库，2=临时盘点,3=调出，4=调入 ，5=批发开票，
		// 6=批发退货，7=客户订单，8=采购订单 9=所有
		long houseid = jsonObject.has("bookid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		String sort = "notedate desc,id,notetype";
		String accdate = htp.getAccdate();
		long accid = htp.getMaccid();
		if (mindate.compareTo(accdate) < 0)
			mindate = accdate;
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate;
		int bj = 0;

		String qry = "";
		if (notetype == 0 || notetype == 9) {
			qry += "  select a.id,a.noteno,a.notedate ,a.totalamt,a.remark,a.handno,a.houseid,b.housename ,'CG' as notetype,'采购入库单' as notetypename,a.operant,cast('供应商:'||c.provname as nvarchar2(200)) as wldw ";
			qry += "\n   from wareinh a ";
			qry += "\n   left outer join warehouse b on a.houseid=b.houseid";
			qry += "\n   left outer join provide c on a.provid=c.provid";
			qry += "\n   where a.accid=" + accid + "  and a.statetag=1 and a.ntid=0";
			qry += "\n   and a.notedate>=to_date('" + mindate + "','yyyy-mm-dd') and a.notedate<=to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";
			if (!Func.isNull(findbox))
				qry += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.handno like '%" + findbox.toUpperCase() + "%' or b.housename like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase()
						+ "%' )";
			if (houseid > 0)
				qry += "\n   and a.houseid=" + houseid;
			bj = 1;
		}
		if (notetype == 1 || notetype == 9) {
			if (bj == 1)
				qry += "\n   union all ";
			qry += "\n   select a.id,a.noteno,a.notedate ,a.totalamt,a.remark,a.handno ,a.houseid,b.housename,'QC' as notetype,'期初入库单' as notetypename,a.operant,cast(' ' as nvarchar2(200)) as wldw";
			qry += "\n   from firsthouseh a ";
			qry += "\n   left outer join warehouse b on a.houseid=b.houseid";
			qry += "\n   where a.accid=" + accid + " and a.statetag=1 ";
			qry += "\n   and a.notedate>=to_date('" + mindate + "','yyyy-mm-dd') and a.notedate<=to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";
			if (!Func.isNull(findbox))
				qry += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.handno like '%" + findbox.toUpperCase() + "%' or b.housename like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase()
						+ "%' )";
			if (houseid > 0)
				qry += "\n   and a.houseid=" + houseid;
			bj = 1;
		}
		if (notetype == 2 || notetype == 9) {
			if (bj == 1)
				qry += "\n   union all";
			qry += "\n   select a.id,a.noteno,a.notedate ,a.totalamt,a.remark,a.handno ,a.houseid,b.housename,'LP' as notetype,'临时盘点单' as notetypename,a.operant,cast(' ' as nvarchar2(200)) as wldw";
			qry += "\n   from tempcheckh a";
			qry += "\n   left outer join warehouse b on a.houseid=b.houseid";
			qry += "\n   where a.accid=" + accid + " and a.statetag=1 ";
			qry += "\n   and a.notedate>=to_date('" + mindate + "','yyyy-mm-dd') and a.notedate<=to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";
			if (houseid > 0)
				qry += "\n   and a.houseid=" + houseid;
			if (!Func.isNull(findbox))
				qry += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.handno like '%" + findbox.toUpperCase() + "%' or b.housename like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase()
						+ "%' )";
			bj = 1;
		}
		if (notetype == 3 || notetype == 9) {
			if (bj == 1)
				qry += "\n   union all";
			qry += "\n   select a.id,a.noteno,a.notedate ,a.totalamt,a.remark,a.handno ,a.houseid,b.housename,'DC' as notetype,'商品调出单' as notetypename,a.operant,cast('调入店铺:'||c.housename as nvarchar2(200)) as wldw";
			qry += "\n   from allotouth a";
			qry += "\n   left outer join warehouse b on a.houseid=b.houseid";
			qry += "\n   left outer join warehouse c on a.tohouseid=c.houseid";
			qry += "\n   where a.accid=" + accid + " and a.statetag=1 ";
			qry += "\n   and a.notedate>=to_date('" + mindate + "','yyyy-mm-dd') and a.notedate<=to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";
			if (houseid > 0)
				qry += "\n   and a.houseid=" + houseid;
			if (!Func.isNull(findbox))
				qry += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.handno like '%" + findbox.toUpperCase() + "%' or b.housename like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase()
						+ "%' )";
			bj = 1;
		}
		if (notetype == 4 || notetype == 9) {
			if (bj == 1)
				qry += "\n   union all";
			qry += "\n   select a.id,a.noteno,a.notedate ,a.totalamt,a.remark,a.handno ,a.houseid,b.housename,'DR' as notetype,'商品调入单' as notetypename,a.operant,cast('调出店铺:'||c.housename as nvarchar2(200)) as wldw";
			qry += "\n   from allotinh a";
			qry += "\n   left outer join warehouse b on a.houseid=b.houseid";
			qry += "\n   left outer join warehouse c on a.fromhouseid=c.houseid";
			qry += "\n   where a.accid=" + accid + " and a.statetag=1 ";
			qry += "\n   and a.notedate>=to_date('" + mindate + "','yyyy-mm-dd') and a.notedate<=to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";
			if (houseid > 0)
				qry += "\n   and a.houseid=" + houseid;
			if (!Func.isNull(findbox))
				qry += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.handno like '%" + findbox.toUpperCase() + "%' or b.housename like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase()
						+ "%' )";
			bj = 1;
		}
		// notetype单据类型:0=采购入库，1=期初入库，2=临时盘点,3=调出，4=调入 ，5=批发开票，
		// 6=批发退货，7=客户订单，8=采购订单 9=所有
		if (notetype == 5 || notetype == 9) {// 批发
			if (bj == 1)
				qry += "\n   union all";
			qry += "\n   select a.id,a.noteno,a.notedate ,a.totalamt,a.remark,a.handno ,a.houseid,b.housename,'XS' as notetype,'批发单' as notetypename,a.operant,cast('客户:'||c.custname as nvarchar2(200)) as wldw";
			qry += "\n   from wareouth a";
			qry += "\n   left outer join warehouse b on a.houseid=b.houseid";
			qry += "\n   left outer join customer c on a.custid=c.custid";
			qry += "\n   where a.accid=" + accid + " and a.statetag=1 and a.ntid=1 ";
			qry += "\n   and a.notedate>=to_date('" + mindate + "','yyyy-mm-dd') and a.notedate<=to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";
			if (houseid > 0)
				qry += "\n   and a.houseid=" + houseid;
			if (!Func.isNull(findbox))
				qry += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.handno like '%" + findbox.toUpperCase() + "%' or b.housename like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase()
						+ "%' )";
			bj = 1;
		}

		if (notetype == 6 || notetype == 9) {// 批发退库
			if (bj == 1)
				qry += "\n   union all";
			qry += "\n   select a.id,a.noteno,a.notedate ,a.totalamt,a.remark,a.handno ,a.houseid,b.housename,'XT' as notetype,'批发退货单' as notetypename,a.operant,cast('客户:'||c.custname as nvarchar2(200)) as wldw";
			qry += "\n   from wareouth a";
			qry += "\n   left outer join warehouse b on a.houseid=b.houseid";
			qry += "\n   left outer join customer c on a.custid=c.custid";
			qry += "\n   where a.accid=" + accid + " and a.statetag=1 and a.ntid=2 ";
			qry += "\n   and a.notedate>=to_date('" + mindate + "','yyyy-mm-dd') and a.notedate<=to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";
			if (houseid > 0)
				qry += "\n   and a.houseid=" + houseid;
			if (!Func.isNull(findbox))
				qry += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.handno like '%" + findbox.toUpperCase() + "%' or b.housename like '%" + findbox + "%' or b.shortname like '%" + findbox.toUpperCase()
						+ "%' )";
			bj = 1;
		}
		if (notetype == 7 || notetype == 9) {// 客户订单
			if (bj == 1)
				qry += "\n   union all";
			qry += "\n   select a.id,a.noteno,a.notedate ,a.totalamt,a.remark,a.handno ,0 as houseid,cast(' ' as nvarchar2(10)) as housename,'KO' as notetype,'客户订单' as notetypename,a.operant,cast('客户:'||c.custname as nvarchar2(200)) as wldw";
			qry += "\n   from custorderh a";
			// qry += "\n left outer join warehouse b on a.houseid=b.houseid";
			qry += "\n   left outer join customer c on a.custid=c.custid";
			qry += "\n   where a.accid=" + accid + " and a.statetag=1  ";
			qry += "\n   and a.notedate>=to_date('" + mindate + "','yyyy-mm-dd') and a.notedate<=to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";
			if (houseid > 0)
				qry += "\n   and a.houseid=" + houseid;
			if (!Func.isNull(findbox))
				qry += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.handno like '%" + findbox.toUpperCase() + "%' )";
			bj = 1;
		}
		if (notetype == 8 || notetype == 9) {// 采购订单
			if (bj == 1)
				qry += "\n   union all";
			qry += "\n   select a.id,a.noteno,a.notedate ,a.totalamt,a.remark,a.handno ,0 as houseid,cast(' ' as nvarchar2(10)) as housename,'CO' as notetype,'采购订单' as notetypename,a.operant,cast('供应商:'||c.provname as nvarchar2(200)) as wldw";
			qry += "\n   from provorderh a";
			// qry += "\n left outer join warehouse b on a.houseid=b.houseid";
			qry += "\n   left outer join provide c on a.provid=c.provid";
			qry += "\n   where a.accid=" + accid + " and a.statetag=1 ";
			qry += "\n   and a.notedate>=to_date('" + mindate + "','yyyy-mm-dd') and a.notedate<=to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";
			if (houseid > 0)
				qry += "\n   and a.houseid=" + houseid;
			if (!Func.isNull(findbox))
				qry += "\n and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.handno like '%" + findbox.toUpperCase() + "%' )";
			bj = 1;
		}

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Warebarprint dal = new Warebarprint();
		Table tb = new Table();
		tb = dal.GetTable(qp, qry);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取商品条码打印列表 (导出条码打印文件skydwarebar.txt专用)
	protected void LoadWarebarprint(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int idbj = jsonObject.has("idbj") ? Integer.parseInt(jsonObject.getString("idbj")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 50;
		long accid = htp.getMaccid();
		long userid = htp.getUserid();
		String qry = "select a.id,a.wareid,a.colorid,a.sizeid,b.wareno,b.warename,b.units,b.gbbar,c.colorname,c.colorno,d.sizename,d.sizeno,b.accid,e.barcode,a.amount,b.retailsale,a.barsale";
		qry += "\n ,b.sale4 as wholesale,b.sale5 as packsale,b.sale1,b.sale2,b.sale3,e.barremark,b.prodyear,b.prodno,b.dj,b.zxbz,b.xdsm,b.jlman,b.sjman,b.locale";
		qry += "\n ,b.useritem1,b.useritem2,b.useritem3,b.useritem4,b.useritem5,a.remark,f.brandname,g.typename,h.typename as typename0";
		// if (idbj == 1)
		// qry += ",f_barcodeid(e.accid,e.barcode) as barcodeid";
		// else
		// qry += ",'' as barcodeid";
		qry += "\n from warebarprint a ";
		qry += "\n left outer join warecode b on a.wareid=b.wareid";
		qry += "\n left outer join colorcode c on a.colorid=c.colorid";
		qry += "\n left outer join sizecode d on a.sizeid=d.sizeid";
		qry += "\n left outer join brand f on b.brandid=f.brandid";
		qry += "\n left outer join waretype g on b.typeid=g.typeid";
		qry += "\n left outer join waretype h on g.p_typeid=h.typeid";
		// qry += "\n join warebarcode e on a.wareid=e.wareid and
		// a.colorid=e.colorid and a.sizeid=e.sizeid";

		qry += " join  ("; // 如果有重复的条码，只打印第一个
		qry += "  select accid,wareid,colorid,sizeid,barcode,barremark from warebarcode a where a.accid=" + accid + " and";
		qry += "  a.id in ( select id from (select wareid,colorid,sizeid,min(id) as id from warebarcode where accid=" + accid + " group by wareid,colorid,sizeid) )";
		qry += "  )  e on a.wareid=e.wareid and a.colorid=e.colorid and a.sizeid=e.sizeid";

		qry += "\n where a.epid=" + userid + " and e.accid=" + accid;

		String sort = "barcode,colorno,sizeno";

		QueryParam qp = new QueryParam(page, pagesize, sort);
		if (idbj == 1)
			qp.setCalcfield("f_barcodeid(accid,barcode) as barcodeid");
		else
			qp.setCalcfield("'' as barcodeid");
		Warebarprint dal = new Warebarprint();
		Table tb = new Table();
		tb = dal.GetTable(qp, qry);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	//批发出库载入未发货商品库存
	protected void WareoutLoadnosendkc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		//		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		int qxbj = htp.getQxbj();
		long userid = htp.getUserid();
		vTotalCxkczy kc = new vTotalCxkczy();
		DbHelperSQL.JsonConvertObject(kc, jsonObject);// 读取json数据到表类
		kc.setAccid(htp.getMaccid());
		kc.setQxbj(qxbj);
		kc.setCxdatetime(htp.getNowdate());
		kc.setUserid(userid);
		//		kc.setHouseid(houseid);
		kc.setAccbegindate(htp.getAccdate());
		kc.setCalcdate(htp.getCalcdate());
		kc.doCxkczy();
		Wareouth dal = new Wareouth();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setUserid(userid);
		dal.setAccbegindate(htp.getAccdate());
		WriteResult(response, dal.Loadnosendkc(), dal.getErrmess());
	}

	//配货单载入未发货商品库存
	protected void WarepeiLoadnosendkc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		//		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		int qxbj = htp.getQxbj();
		long userid = htp.getUserid();
		vTotalCxkczy kc = new vTotalCxkczy();
		DbHelperSQL.JsonConvertObject(kc, jsonObject);// 读取json数据到表类
		kc.setAccid(htp.getMaccid());
		kc.setQxbj(qxbj);
		kc.setCxdatetime(htp.getNowdate());
		kc.setUserid(userid);
		//		kc.setHouseid(houseid);
		kc.setAccbegindate(htp.getAccdate());
		kc.setCalcdate(htp.getCalcdate());
		kc.doCxkczy();
		Warepeih dal = new Warepeih();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setUserid(userid);
		dal.setAccbegindate(htp.getAccdate());
		WriteResult(response, dal.Loadnosendkc(), dal.getErrmess());
	}

	// 商品条码打印载入库存
	protected void LoadWarebarprintkc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		int loadbj = jsonObject.has("loadbj") ? Integer.parseInt(jsonObject.getString("loadbj")) : 0;
		int qxbj = htp.getQxbj();
		long userid = htp.getUserid();
		vTotalCxkczy kc = new vTotalCxkczy();
		DbHelperSQL.JsonConvertObject(kc, jsonObject);// 读取json数据到表类
		kc.setAccid(htp.getMaccid());
		kc.setQxbj(qxbj);
		kc.setCxdatetime(htp.getNowdate());
		kc.setUserid(userid);
		kc.setHouseid(houseid);
		kc.setAccbegindate(htp.getAccdate());
		kc.setCalcdate(htp.getCalcdate());
		kc.doCxkczy();

		Warebarprint dal = new Warebarprint();
		dal.setEpid(userid);
		WriteResult(response, dal.LoadKc(loadbj), dal.getErrmess());
	}

	// 更改商品打码打印的商品及颜色记录的吊牌价，
	protected void ChangeWarebarprintprice(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int pricetype = jsonObject.has("pricetype") ? Integer.parseInt(jsonObject.getString("pricetype")) : 0;
		int wscl = jsonObject.has("wscl") ? Integer.parseInt(jsonObject.getString("wscl")) : 0;
		Float rate = jsonObject.has("rate") ? Float.parseFloat(jsonObject.getString("rate")) : 0;
		// pricetype :价格方式 0=零售价 ，1=售价一 ，2=售价二 ，3=售价三 ，4=批发价,5=打包价
		// rate:提价比例
		// wscl:尾数处理方式:0=4舍5入,1=尾数为8,2=尾数为6,3=尾数为0
		Warebarprint dal = new Warebarprint();
		dal.setEpid(htp.getUserid());
		WriteResult(response, dal.ChangePrice(pricetype, wscl, rate), dal.getErrmess());
	}

	// 清空所有商品打码打印的商品及颜色记录
	protected void ClearWarebarprintsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Warebarprint dal = new Warebarprint();
		dal.setEpid(htp.getUserid());
		WriteResult(response, dal.Clear(), dal.getErrmess());
	}

	// 获取商品条码打印列表(后台打印用)
	protected void GetWarebarprintList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long epid = jsonObject.has("epid") ? Long.parseLong(jsonObject.getString("epid")) : 0;
		int idbj = jsonObject.has("idbj") ? Integer.parseInt(jsonObject.getString("idbj")) : 0;
		int sortfs = jsonObject.has("sortfs") ? Integer.parseInt(jsonObject.getString("sortfs")) : 0;
		// sortfs:0=货号 1=输入
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;

		String sort = "";
		if (sortfs == 1)
			sort = " id, wareno,wareid,colorid,sizeno ";// + order;
		else
			sort = "  wareno,wareid,colorid,sizeno,id ";// + order;
		String fieldlist = " a.id,a.wareid,a.colorid,a.sizeid,b.accid,b.wareno,b.warename,b.units,b.model,b.gbbar,c.colorname,c.colorno,d.sizename,d.sizeno,a.amount,a.barsale";
		fieldlist += "\n ,b.sale4 as wholesale,b.sale5 as packsale,b.sale1,b.sale2,b.sale3,e.barremark,b.prodyear,b.prodno,b.dj,b.zxbz,b.xdsm,b.jlman,b.sjman,b.locale";
		fieldlist += "\n ,case when b.ssdate is null then to_char(sysdate,'yyyy-mm-dd') else b.ssdate end as ssdate";
		fieldlist += "\n ,b.useritem1,b.useritem2,b.useritem3,b.useritem4,b.useritem5,a.remark,f.brandname,g.typename,h.typename as typename0,e.barcode,i.areaname";
		fieldlist += "\n ,b.seasonname,b.tjtag";
		// if (idbj == 1)
		// fieldlist += ",f_barcodeid(e.accid,e.barcode) as barcodeid";
		// else
		// fieldlist += ",'' as barcodeid";
		fieldlist += ",case when j.retailsale is null then b.retailsale else j.retailsale end retailsale,case when j.shdate is null then to_char(sysdate,'yyyy-mm-dd') else j.shdate end as shdate ";
		String strwhere = " a.epid=" + epid + " and e.accid=" + htp.getMaccid();
		// String strwhere = " e.accid=" + htp.getMaccid();
		strwhere += " and e.prtok=1 ";
		Warebarprint dal = new Warebarprint();
		QueryParam qp = new QueryParam(page, pagesize, sort);
		if (idbj == 1)
			qp.setCalcfield("f_barcodeid(accid,barcode) as barcodeid");
		else
			qp.setCalcfield("'' as barcodeid");
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 获取商品条码打印列表
	protected void GetWarebarprintsumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		if (sizenum < 5)
			sizenum = 5;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;

		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;
		String sort = " ";// + order;
		if (sortid == 1)
			sort = " id ";
		else
			sort = "  wareno,wareid,colorid ";// + order;
		Warebarprint dal = new Warebarprint();
		QueryParam qp = new QueryParam(page, pagesize, sort);
		dal.setEpid(htp.getUserid());
		// dal.setAccid(htp.getMaccid());
		// dal.setNoteno(noteno);
		// dal.setLastop(htp.getUsername());
		if (dal.doGetColorsumList(qp, sizenum) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			Write(response, dal.getErrmess());
	}

	// 载入单据尺码模向打印明细(后台打印专用)
	protected void LoadPrintNotenoh(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		String tablename = jsonObject.has("tablename") ? jsonObject.getString("tablename") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;
		int sortfs = jsonObject.has("sortfs") ? Integer.parseInt(jsonObject.getString("sortfs")) : 0;
		// sortfs:0=货号 1=输入，2=数量,3=区域
		int hzfs = jsonObject.has("hzfs") ? Integer.parseInt(jsonObject.getString("hzfs")) : 0;
		// hzfs: 0=货号+颜色+尺码 1=货号+颜色 2=货号
		if (hzfs > 2)
			hzfs = 0;
		long userid = htp.getUserid();
		long accid = htp.getMaccid();
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
											// System.out.println("priceprec=" +
											// priceprec + " qxpublic=" +
											// qxpublic);
		if (Funcpackge.NotetoSize(accid, userid, tablename.toUpperCase(), noteno.toUpperCase(), priceprec) == 0) {
			WriteResult(response, 0, "操作异常！");
			return;
		}

		Backprint dal = new Backprint();
		dal.setUserid(userid);
		dal.setNoteno(noteno);
		dal.setAccid(accid);
		dal.setTablename(tablename.toUpperCase());
		dal.setSortfs(sortfs);
		dal.setHzfs(hzfs);
		dal.setPriceprec(priceprec);
		dal.setLastop(htp.getUsername());
		QueryParam qp = new QueryParam(page, pagesize);

		Table tb = new Table();

		tb = dal.GetTable1(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 载入单据打印数据
	protected void LoadPrintNoteno(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		String tablename = jsonObject.has("tablename") ? jsonObject.getString("tablename") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;
		int sortfs = jsonObject.has("sortfs") ? Integer.parseInt(jsonObject.getString("sortfs")) : 0;
		// sortfs:0=货号 1=输入，2=数量,3=区域
		int hzfs = jsonObject.has("hzfs") ? Integer.parseInt(jsonObject.getString("hzfs")) : 0;
		// hzfs: 0=货号+颜色+尺码 1=货号+颜色 2=货号
		if (hzfs > 2)
			hzfs = 0;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));
		Backprint dal = new Backprint();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setTablename(tablename.toUpperCase());
		dal.setSortfs(sortfs);
		dal.setHzfs(hzfs);
		dal.setPriceprec(priceprec);
		dal.setLastop(htp.getUsername());
		QueryParam qp = new QueryParam(page, pagesize);

		Table tb = new Table();

		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 取所有系统名称 
	protected void ListSysprogsys(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		//		int vertag = htp.getVertag();
		Sysprogsys dal = new Sysprogsys();
		Write(response, DbHelperSQL.DataTable2Json(dal.GetTable()));

	}

	// 取用户的系统名称 新
	protected void ListSysnamebyuseridipd(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int vertag = htp.getVertag();
		Sysprogsys dal = new Sysprogsys();
		Write(response, DbHelperSQL.DataTable2Json(dal.GetTableIPD(htp.getUserid(), vertag)));

	}

	// 取用户的系统名称  停用   换ListSysnamebyuseridipd
	protected void ListSysnamebyuserid(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		//		int vertag = htp.getVertag();
		Sysprogsys dal = new Sysprogsys();
		Write(response, DbHelperSQL.DataTable2Json(dal.GetTable(htp.getUserid())));

	}

	// 取用户的系统名称 pc专用
	protected void ListSysnamebyuseridpc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		// JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int vertag = htp.getVertag();
		Sysprogsys dal = new Sysprogsys();

		if (dal.Menu(htp.getUserid(), vertag) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			Write(response, dal.getErrmess());

	}

	// 返回汇总表商品颜色尺码二维表格式
	protected void ListWaretocolorandsize(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		int fs = jsonObject.has("fs") ? Integer.parseInt(jsonObject.getString("fs")) : 0;
		Warecode dal = new Warecode();
		dal.setAccid(htp.getMaccid());
		dal.setWareid(wareid);
		if (dal.doListColorandSize(htp.getUserid(), fs) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 取用户的程序名称
	protected void ListProgsnamebyuserid(HttpServletResponse response, HttpInfo htp, int fs) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long sysid = jsonObject.has("sysid") ? Long.parseLong(jsonObject.getString("sysid")) : -1;
		// sysprog->grpid: 1=采购 2=销售 3=仓库 4=基础 10=上下衣专用程序
		//		int vertag = htp.getVertag();// jsonObject.has("hytag") ? Integer.parseInt(jsonObject.getString("hytag")) : 2;
		//0=零售，1=批发，2=零售+批发，3=迷你
		//System.out.println("vertag="+vertag);
		String devicetype = htp.getDevicetype();// jsonObject.has("devicetype") ? jsonObject.getString("devicetype") : "???";

		Sysprog dal = new Sysprog();
		dal.setSysid(sysid);
		Write(response, DbHelperSQL.DataTable2Json(dal.GetTable(htp.getUserid(), fs, devicetype)));

	}

	// 取用户的程序名称 ipd
	protected void ListProgsnamebyuseridipd(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long sysid = jsonObject.has("sysid") ? Long.parseLong(jsonObject.getString("sysid")) : -1;
		// sysprog->grpid: 1=采购 2=销售 3=仓库 4=基础 10=上下衣专用程序
		int vertag = htp.getVertag();// jsonObject.has("hytag") ? Integer.parseInt(jsonObject.getString("hytag")) : 2;
		//0=零售，1=批发，2=零售+批发，3=迷你
		//System.out.println("vertag="+vertag);
		String devicetype = htp.getDevicetype();// jsonObject.has("devicetype") ? jsonObject.getString("devicetype") : "???";

		Sysprog dal = new Sysprog();
		dal.setSysid(sysid);
		Write(response, DbHelperSQL.DataTable2Json(dal.GetTableIPD(htp.getUserid(), vertag, devicetype)));

	}

	// 冲单
	protected void ClearNote(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		int noteid = jsonObject.has("noteid") ? Integer.parseInt(jsonObject.getString("noteid")) : -1;
		// noteid:0=采购，1=采购退货，2=店铺零售，3=批发，4=批发退货，5=商场零售，6=调出，7=调入
		if (noteid == 0 || noteid == 1) // 采购 ,采购退货
		{
			Wareinh dal = new Wareinh();
			dal.setAccid(htp.getMaccid());
			dal.setNoteno(noteno);
			dal.setOperant(htp.getUsername());
			WriteResult(response, dal.doClear(noteid), dal.getErrmess());

		} else if (noteid == 3 || noteid == 4) // 批发,批发退货
		{
			Wareouth dal = new Wareouth();
			dal.setAccid(htp.getMaccid());
			dal.setNoteno(noteno);
			dal.setOperant(htp.getUsername());
			WriteResult(response, dal.doClear(noteid), dal.getErrmess());

		} else if (noteid == 6) // 调出
		{
			Allotouth dal = new Allotouth();
			dal.setAccid(htp.getMaccid());
			dal.setNoteno(noteno);
			dal.setOperant(htp.getUsername());
			WriteResult(response, dal.doClear(), dal.getErrmess());

		} else {
			WriteResult(response, 0, "noteid不是一个有效值！");
		}

	}

	// 复制单据
	protected void CopyNote(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String tonoteno = jsonObject.has("tonoteno") ? jsonObject.getString("tonoteno").toUpperCase() : "";
		int noteid = jsonObject.has("noteid") ? Integer.parseInt(jsonObject.getString("noteid")) : -1;
		// noteid:0=采购，1=采购退货，2=店铺零售，3=批发，4=批发退货，5=商场零售，6=调出，7=调入
		String fromnoteno = jsonObject.has("fromnoteno") ? jsonObject.getString("fromnoteno").toUpperCase() : "";
		int fromnoteid = jsonObject.has("fromnoteid") ? Integer.parseInt(jsonObject.getString("fromnoteid")) : noteid;
		// fromnoteid:0=采购，1=采购退货，2=店铺零售，3=批发，4=批发退货，5=商场零售，6=调出，7=调入

		if (noteid == 0 || noteid == 1) // 采购 ,采购退货
		{
			Wareinm dal = new Wareinm();
			dal.setAccid(htp.getMaccid());
			WriteResult(response, dal.doCopy(fromnoteno, fromnoteid, tonoteno, noteid, htp.getPriceprec()), dal.getErrmess());

		} else if (noteid == 2 || noteid == 3 || noteid == 4) // 批发 ,批发退货
		{
			Wareoutm dal = new Wareoutm();
			dal.setAccid(htp.getMaccid());
			WriteResult(response, dal.doCopy(fromnoteno, fromnoteid, tonoteno, noteid, htp.getPriceprec()), dal.getErrmess());

		} else if (noteid == 6) // 调出
		{
			Allotoutm dal = new Allotoutm();
			dal.setAccid(htp.getMaccid());
			WriteResult(response, dal.doCopy(fromnoteno, fromnoteid, tonoteno, htp.getPriceprec()), dal.getErrmess());

		} else {
			WriteResult(response, 0, "noteid不是一个有效值！");

		}
	}

	// 更改采购明细价格(核价)
	protected void UpdateWareincheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());

		int priceprec = htp.getPriceprec();

		vWareincheck dal = new vWareincheck();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setCalcdate(htp.getCalcdate());
		// dal.setQxbj(qxbj);
		dal.setPriceprec(priceprec);
		dal.setAccbegindate(htp.getAccdate());
		dal.setNowdate(htp.getNowdate());
		WriteResult(response, dal.Setprice(), dal.getErrmess());
	}

	// 根据供应商价格方式和商品档案价格刷新采购单上的单价
	protected void ChangeWareincheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();
		int qxbj = htp.getQxbj();
		vWareincheck dal = new vWareincheck();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setQxbj(qxbj);
		dal.setPriceprec(priceprec);
		dal.setAccbegindate(htp.getAccdate());
		dal.setNowdate(htp.getNowdate());
		WriteResult(response, dal.Refresh(), dal.getErrmess());
	}

	// 查询采购明细数据(核价)
	protected void ListWareincheck(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String fieldlist = jsonObject.has("fieldlist") ?
		// jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;

		int qxbj = htp.getQxbj(); // 首页不控制权限

		vWareincheck dal = new vWareincheck();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setQxbj(qxbj);
		dal.setAccid(htp.getMaccid());
		dal.setNowdate(htp.getNowdate());
		dal.setAccbegindate(htp.getAccdate());
		dal.setUserid(htp.getUserid());
		String sort = "notedate desc,id";
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();

		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 删除店铺区位图片
	protected void DelHouseareaImg(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Housearea dal = new Housearea();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		WriteResult(response, dal.Delete(), dal.getErrmess());

	}

	// 显示店铺区位图
	protected void ListHouseareaImg(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;
		String sort = "areaid";
		Housearea dal = new Housearea();
		dal.setHouseid(houseid);
		dal.setAcciid(htp.getMaccid());
		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();

		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 增加店铺区位图片
	protected void AddHouseareaImg(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Housearea dal = new Housearea();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		WriteResult(response, dal.Append(), dal.getErrmess());

	}

	// ===================================================
	// 全选或清除商品调价单的店铺
	protected void SelectWareadjusthouse(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		int allbj = jsonObject.has("allbj") ? Integer.parseInt(jsonObject.getString("allbj")) : 0;
		// allbj:0=清除 ，1=全选
		Wareadjustc dal = new Wareadjustc();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.SelectHouse(allbj), dal.getErrmess());

	}

	// 获取指定商品调价单明细id信息
	protected void GetWareadjustmByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String strwhere = " a.ID=" + id + " and a.NOTENO='" + noteno + "' and a.ACCID=" + htp.getMaccid();

		if (fieldlist.equals("*") || fieldlist.length() <= 0) // fieldlist =
																	// "a.id,a.accid,a.noteno,a.wareid,b.warename,b.units,a.colorid,c.colorname,a.sizeid,d.sizename,a.amount,a.price,a.discount,a.curr,a.remark0";
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.WAREID,a.entersale,a.retailsale,a.sale1,a.sale2,a.sale3,a.sale4,a.sale5,a.entersale_0,a.retailsale_0,a.sale1_0,a.sale2_0,a.sale3_0,a.sale4_0,a.sale5_0,a.REMARK0,B.WARENO,B.WARENAME,B.UNITS";
		Wareadjustm dal = new Wareadjustm();
		Table tb = new Table();

		tb = dal.GetList(strwhere, fieldlist).getTable(1);

		Write(response, DbHelperSQL.DataTable2Json(tb));

	}

	// 更新指定商品调价明细id信息
	protected void UpdateWareadjustmByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String noteno = jsonObject.has("noteno") ?
		// jsonObject.getString("noteno") : "";
		// float id = jsonObject.has("id") ?
		// Float.parseFloat(jsonObject.getString("id")) : 0;
		Wareadjustm dal = new Wareadjustm();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		// dal.setNoteno(noteno);
		// dal.setId(id);
		if (dal.Update() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 删除指定商品调价明细id信息
	protected void DelWareadjustmByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		Wareadjustm dal = new Wareadjustm();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setId(id);
		WriteResult(response, dal.Delete(), dal.getErrmess());
	}

	// 新增商品调价单明细
	protected void AddWareadjustmRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		// int statetag = jsonObject.has("statetag") ?
		// Integer.parseInt(jsonObject.getString("statetag")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		Wareadjustm dal = new Wareadjustm();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setCalcdate(htp.getCalcdate());
		if (dal.Append() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 获取商品调价明细列表
	protected void GetWareadjustcList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;
		long accid = htp.getMaccid();
		String qry = " select b.houseid,b.housename,1 as selbj";
		qry += " from warehouse b where b.statetag=1 and b.accid=" + accid;
		qry += " and exists (select 1 from wareadjustc a where a.accid=" + accid + " and a.noteno='" + noteno + "'";
		qry += " and a.houseid=b.houseid)";

		qry += " union all";
		qry += " select b.houseid,b.housename,0 as selbj";
		qry += " from warehouse b where b.statetag=1 and b.accid=" + accid;
		qry += " and not exists (select 1 from wareadjustc a where a.accid=" + accid + " and a.noteno='" + noteno + "'";
		qry += " and a.houseid=b.houseid)";
		Wareadjustc dal = new Wareadjustc();
		QueryParam qp = new QueryParam(page, pagesize, " SELBJ DESC, HOUSEID", qry);
		Table tb = new Table();
		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 保存商品调价适用店铺
	protected void WriteWareadjustc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Wareadjustc dal = new Wareadjustc();
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Write(jsonObject), dal.getErrmess());

	}

	// 成批更改商品调价单的价格
	protected void ChangeWareadjustmPrice(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Wareadjustm dal = new Wareadjustm();
		dal.setAccid(htp.getMaccid());
		// dal.setNoteno(noteno);
		WriteResult(response, dal.ChangePrice(jsonObject), dal.getErrmess());

	}

	// 商品调价单成批载入商品
	protected void LoadtoWareadjustm(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Wareadjustm dal = new Wareadjustm();
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Load(jsonObject), dal.getErrmess());

	}

	// 获取商品调价明细列表
	protected void GetWareadjustmList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;
		String sort = " ";
		if (sortid == 1)
			sort = " id ";
		else
			sort = "  wareno,wareid,id ";// + order;
		// sort += " " + order;
		String strwhere = " a.ACCID=" + htp.getMaccid() + " and a.NOTENO='" + noteno + "'";
		if (findbox.length() > 0)
			strwhere += " and (b.wareno like '%" + findbox.toUpperCase() + "%' or b.shortname like '%" + findbox.toUpperCase() + "%' or b.warename like '%" + findbox + "%')";

		if (fieldlist.equals("*") || fieldlist.length() <= 0) // fieldlist =
																	// "a.id,a.accid,a.noteno,a.wareid,b.warename,b.units,a.colorid,c.colorname,a.sizeid,d.sizename,a.amount,a.price,a.discount,a.curr,a.remark0";
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.WAREID,B.WARENO,B.WARENAME,B.UNITS,B.SSDATE,A.ENTERSALE,A.RETAILSALE,A.SALE1,A.SALE2,A.SALE3,A.SALE4,A.SALE5,A.ENTERSALE_0,A.RETAILSALE_0,A.SALE1_0,A.SALE2_0,A.SALE3_0,A.SALE4_0,A.SALE5_0,a.REMARK0";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Wareadjustm dal = new Wareadjustm();
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);
		if (page < 0) {
			// System.out.println("11111");
			String retcs = DbHelperSQL.Table2Excel(tb, jsonObject);
			// System.out.println("22222");
			WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
			return;
		}
		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取商品调价店铺列表(pc版同步专用)
	protected void GetWareadjusthouseList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String lastdate = jsonObject.has("lastdate") ? jsonObject.getString("lastdate") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;
		String qry = " select a.id,a.accid,a.noteno,a.houseid,a.lastdate";
		qry += " from wareadjustc a join wareadjusth b on a.accid=b.accid and a.noteno=b.noteno";
		qry += " where a.ACCID=" + htp.getMaccid() + " and b.statetag>0";
		if (!Func.isNull(lastdate))
			qry += " and a.lastdate>to_date('" + lastdate + "','yyyy-mm-dd hh24:mi:ss')";
		String sort = " id";
		QueryParam qp = new QueryParam(page, pagesize, sort, qry);
		Wareadjusth dal = new Wareadjusth();
		Table tb = new Table();
		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取商品调价明细列表(pc版同步专用)
	protected void GetWareadjustdetailList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String noteno = jsonObject.has("noteno") ?
		// jsonObject.getString("noteno") : "";
		String lastdate = jsonObject.has("lastdate") ? jsonObject.getString("lastdate") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;
		String qry = " select a.accid,B.ID,A.NOTENO,A.NOTEDATE,A.STATETAG,A.BEGINDATE,A.ENDDATE,B.WAREID,B.RETAILSALE,B.REMARK0,A.OPERANT,A.LASTDATE";
		qry += " from wareadjusth a join wareadjustm b on a.accid=b.accid and a.noteno=b.noteno";
		qry += " where a.ACCID=" + htp.getMaccid() + " and a.statetag>0";
		if (!Func.isNull(lastdate))
			qry += " and a.lastdate>to_date('" + lastdate + "','yyyy-mm-dd hh24:mi:ss')";
		String sort = " id";
		QueryParam qp = new QueryParam(page, pagesize, sort, qry);
		Wareadjusth dal = new Wareadjusth();
		Table tb = new Table();
		tb = dal.GetTable(qp);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 新增商品调价记录
	protected void AddWareadjusthRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// long provid = jsonObject.has("provid") ?
		// Long.parseLong(jsonObject.getString("provid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		Wareadjusth dal = new Wareadjusth();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		// dal.setProvid(provid);
		// dal.setHouseid(houseid);
		// dal.setNtid(ntid);
		if (dal.Append(houseid) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());

	}

	// 删除指定商品调价记录id信息
	protected void DelWareadjusthByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		Wareadjusth dal = new Wareadjusth();
		long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		dal.setNoteno(noteno);
		dal.setAccid(accid);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			pFunc.myWriteLog(accid, "商品调价", "【删除单据】" + noteno, lastop);
			WriteResult(response, 1, dal.getErrmess());
		}
	}

	// 调价单审核及取消审核
	protected void CheckWareadjusth(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int opid = jsonObject.has("opid") ? Integer.parseInt(jsonObject.getString("opid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		// opid:0=取消审核，1=审核,2=审核驳回
		Wareadjusth dal = new Wareadjusth();
		// DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setNoteno(noteno.toUpperCase());
		if (opid == 2) {// 2=审核驳回要传入原因
			String checkremark = jsonObject.has("checkremark") ? jsonObject.getString("checkremark") : "";
			dal.setCheckremark(checkremark);
		}
		WriteResult(response, dal.Check(opid), dal.getErrmess());
	}

	// 更新指定商品调价记录id信息
	protected void UpdateWareadjusthByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		Wareadjusth dal = new Wareadjusth();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());

		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 获取指定商品调价单记录id信息
	protected void GetWareadjusthByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long accid0 = jsonObject.has("accid") ? Long.parseLong(jsonObject.getString("accid")) : 0;
		long accid = htp.getMaccid();
		if (accid0 > 0)
			accid = accid0;
		String strwhere = " a.NOTENO='" + noteno + "' and a.ACCID=" + accid;

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.NOTEDATE,a.HANDNO,a.REMARK,a.OPERANT,a.CHECKMAN,a.STATETAG,a.LASTDATE";

		fieldlist += ",(select houseid from (select houseid from wareadjustc where accid=" + accid + " and noteno='" + noteno + "' order by id) where rownum=1) as houseid";

		Wareadjusth dal = new Wareadjusth();

		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取商品调价记录列表
	protected void GetWareadjusthList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		// long areaid = jsonObject.has("areaid") ?
		// Long.parseLong(jsonObject.getString("areaid")) : 0;
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno") : "";
		// String provname = jsonObject.has("provname") ?
		// jsonObject.getString("provname") : "";
		// String wareno = jsonObject.has("wareno") ?
		// jsonObject.getString("wareno") : "";
		// String wareno = jsonObject.has("wareno") ?
		// jsonObject.getString("wareno") : "";

		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;

		String remark = jsonObject.has("remark") ? jsonObject.getString("remark") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;
		int checktag = jsonObject.has("checktag") ? Integer.parseInt(jsonObject.getString("checktag")) : 0;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 3;
		String lastop = htp.getUsername();

		// int qxbj = htp.getQxbj();
		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		// String mess = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// ==========================
		String sort = " notedate desc,id ";// +order;
		String strwhere = " a.ACCID=" + htp.getMaccid();
		if (checktag == 1)
			strwhere += " and a.statetag>0 and a.statetag<>4";
		// statetag:0=未提交，1=已提交，未审核，2=已审核，3=终止 ，4=所有
		if (statetag == 0)
			strwhere += " and a.statetag=0 and a.operant='" + lastop + "'"; // 未提
		// 交
		else if (statetag == 1)
			strwhere += " and a.statetag=1"; // 已提 交
		else if (statetag == 2)
			strwhere += " and a.statetag=2";
		else if (statetag == 2)
			strwhere += " and a.statetag=3";
		else
			strwhere += "  and a.statetag<>4 and (a.STATETAG>=1 or a.STATETAG=0 and a.operant='" + lastop + "')"; // 所有

		// if (ywly < 2) qry += " and a.ywly=" + ywly;//ywly=0
		// 只查询手机端增加的单据，用于向erp传数据

		if (!Func.isNull(findbox))
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox + "%')";

		if (!Func.isNull(handno))
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (!Func.isNull(noteno))
			strwhere += " and a.NOTENO like '%" + noteno + "%'";

		if (!Func.isNull(remark))
			strwhere += " and a.remark like '%" + remark + "%'";

		// if (mindate == null || mindate == "") qry += " and a.NOTEDATE >=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 00:00:00','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";

		// if (maxdate == null || maxdate == "") qry += " and a.NOTEDATE <=
		// to_date(to_char(sysdate,'yyyy-mm-dd')||' 23:59:59','yyyy-mm-dd
		// hh24:mi:ss')";
		// else
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";

		// qry += " and a.notedate >= to_date('" + mindate + " 00:00:00' and
		// a.notedate<='" + maxdate + " 23:59:59'";

		if (wareid != 0) // 如果转入epid,说明要判断职员仓库权限
		{
			strwhere += " and exists (select 1 from wareadjustm x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (!Func.isNull(wareno)) {
			strwhere += " and exists (select 1 from wareadjustm x,warecode y where x.wareid=y.wareid and a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno + "%')";
		}
		if (houseid > 0) {
			strwhere += " and exists (select 1 from wareadjustc x where a.accid=x.accid and a.noteno=x.noteno and x.houseid =" + houseid + ")";
		}

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.NOTEDATE,A.HANDNO,A.REMARK,A.OPERANT,A.CHECKMAN,A.STATETAG,A.LASTDATE";
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Wareadjusth dal = new Wareadjusth();
		Table tb = new Table();
		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// ====================================================
	// 删除指定商品配货单明细id信息
	protected void DelWarepeimByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		Float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		Warepeim dal = new Warepeim();
		dal.setAccid(htp.getMaccid());
		dal.setId(id);
		dal.setNoteno(noteno);
		dal.setUserid(htp.getUserid());
		WriteResult(response, dal.Delete(), dal.getErrmess());

	}

	// 按尺码自动配货
	protected void SizetoWarepeim(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();
		Warepeim dal = new Warepeim();
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.doSizetoWarepeim(jsonObject, priceprec), dal.getErrmess());
	}

	// 按未完定单自动配货
	protected void OrdertoWarepeim(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int priceprec = htp.getPriceprec();
		Warepeim dal = new Warepeim();
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.doOrdertoWarepeim(jsonObject, priceprec), dal.getErrmess());
	}

	// 删除客户配货商品及颜色记录
	protected void DelWarepeimsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		Warepeim dal = new Warepeim();
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setAccid(htp.getMaccid());
		WriteResult(response, dal.Delete1(), dal.getErrmess());

	}

	// 成批更改商品配货单折扣
	protected void ChangeWarepeimdisc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		Float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 0;
		int priceprec = htp.getPriceprec();
		Warepeim dal = new Warepeim();
		dal.setNoteno(noteno);
		dal.setAccid(htp.getMaccid());
		dal.setDiscount(discount);
		WriteResult(response, dal.ChangeDisc(priceprec), dal.getErrmess());
	}

	// 成批增加商品配货数据
	protected void AddWarepeimbatch(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long saleid = jsonObject.has("saleid") ? Long.parseLong(jsonObject.getString("saleid")) : 0;
		Float price = jsonObject.has("price") ? Float.parseFloat(jsonObject.getString("price")) : null;
		float price0 = jsonObject.has("price0") ? Float.parseFloat(jsonObject.getString("price0")) : 0;
		float discount = jsonObject.has("discount") ? Float.parseFloat(jsonObject.getString("discount")) : 0;
		// int changeenterprice = htp.getChangeenterprice();
		// int fs = htp.getFsout();
		int priceprec = htp.getPriceprec();

		// int qxbj = htp.getQxbj();

		// float price = 0;
		// if (jsonObject.has("pricestr")) // 如果传入了折后价
		if (price != null) {
			// price = Float.parseFloat(jsonObject.getString("pricestr"));
			if (price0 == 0) {
				price0 = price;
				discount = 1;
			}

			else
				discount = Func.getRound(price / price0, 2);

		} else {
			price = Func.getRound(price0 * discount, priceprec);

		}
		Warepeim dal = new Warepeim();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setSaleid(saleid);
		dal.setPrice(price);
		dal.setDiscount(discount);
		dal.setPrice0(price0);
		dal.setCalcdate(htp.getCalcdate());
		WriteResult(response, dal.Addbatch(jsonObject), dal.getErrmess());

	}

	// 保存配货单商品
	protected void WriteWarepeimsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		// long colorid = jsonObject.has("colorid") ?
		// Long.parseLong(jsonObject.getString("colorid")) : 0;
		long saleid = jsonObject.has("saleid") ? Long.parseLong(jsonObject.getString("saleid")) : 0;
		Warepeim dal = new Warepeim();
		dal.setAccid(htp.getMaccid());
		dal.setWareid(wareid);
		dal.setSaleid(saleid);
		dal.setNoteno(noteno);
		WriteResult(response, dal.Write1(jsonObject), dal.getErrmess());
	}

	// 保存配货商品捡货颜色尺码明细
	protected void WriteWarepeimchecksum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		long saleid = jsonObject.has("saleid") ? Long.parseLong(jsonObject.getString("saleid")) : 0;
		Warepeim dal = new Warepeim();
		dal.setAccid(htp.getMaccid());
		dal.setWareid(wareid);
		dal.setColorid(colorid);
		dal.setSaleid(saleid);
		dal.setNoteno(noteno);
		WriteResult(response, dal.Write(jsonObject), dal.getErrmess());
	}

	// 显示配货商品明细
	protected void GetWarepeimsum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno") : "";
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		// long colorid = jsonObject.has("colorid") ?
		// Long.parseLong(jsonObject.getString("colorid")) : 0;
		long saleid = jsonObject.has("saleid") ? Long.parseLong(jsonObject.getString("saleid")) : 0;
		int priceprec = htp.getPriceprec();// 4 单价小数位数(0,1,2)
		int nearsaleok = htp.getNearsale();// 3 启用最近售价

		Warepeim dal = new Warepeim();

		dal.setAccid(htp.getMaccid());
		dal.setUserid(htp.getUserid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setSaleid(saleid);
		dal.setCalcdate(htp.getCalcdate());
		// dal.setColorid(colorid);
		if (dal.Load(custid, houseid, priceprec, nearsaleok, wareno) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 显示配货商品明细(捡货)
	protected void GetWarepeimchecksum(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		// long houseid = jsonObject.has("houseid") ?
		// Long.parseLong(jsonObject.getString("houseid")) : 0;
		long colorid = jsonObject.has("colorid") ? Long.parseLong(jsonObject.getString("colorid")) : 0;
		long saleid = jsonObject.has("saleid") ? Long.parseLong(jsonObject.getString("saleid")) : 0;

		Warepeim dal = new Warepeim();

		dal.setUserid(htp.getUserid());
		dal.setNoteno(noteno);
		dal.setWareid(wareid);
		dal.setAccid(htp.getMaccid());
		dal.setSaleid(saleid);
		dal.setColorid(colorid);
		if (dal.Load() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 获取配货商品捡货尺码明细列表
	protected void GetWarepeimchecksumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		int cxfs = jsonObject.has("cxfs") ? Integer.parseInt(jsonObject.getString("cxfs")) : 0;
		// cxfs: 0=未配，1=已配，2=差异，3=所有
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;

		String sort = "  wareno,wareid,saleid ";// + order;

		String qry = "select a.wareid,b.wareno,b.warename,b.units,b.locale,a.saleid,c.salename,a.colorid,d.colorname,b.imagename0";
		qry += ",sum(a.amount) as amount,sum(a.factamt) as factamt,sum(a.factamt-a.amount) as balamt"; // 已捡
																										// -应捡=
																										// 差额
		qry += "\n from warepeim a ";
		qry += "\n left outer join warecode b on a.wareid=b.wareid";
		qry += "\n left outer join salecode c on a.saleid=c.saleid";
		qry += "\n left outer join colorcode d on a.colorid=d.colorid";
		qry += "\n where a.ACCID=" + htp.getMaccid() + " and a.NOTENO='" + noteno + "'";
		// cxfs: 0=未配，1=已配，2=差异，3=所有
		if (cxfs == 0)
			qry += " and a.factamt=0";
		else if (cxfs == 1)
			qry += " and a.factamt>0";
		else if (cxfs == 2)
			qry += " and a.amount<>a.factamt";
		if (findbox.length() > 0)
			qry += " and (b.wareno like '%" + findbox.toUpperCase() + "%' or b.shortname like '%" + findbox.toUpperCase() + "%' or b.warename like '%" + findbox.toUpperCase() + "%')";
		qry += "\n group by a.wareid,b.wareno,b.warename,b.units,b.locale,a.saleid,c.salename,a.colorid,d.colorname,b.imagename0";

		QueryParam qp = new QueryParam(page, pagesize, sort);
		qp.setSumString("sum(amount) as totalamt,sum(factamt) as totalfactamt,sum(balamt) as totalbalamt,count('^'||wareid||'^'||colorid||'^') as skc");
		Warepeim dal = new Warepeim();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);

		Table tb = new Table();
		tb = dal.GetTable(qp, qry);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));

	}

	// 新增商品配货单明细
	protected void AddWarepeimRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// int allpricechange = jsonObject.has("allpricechange") ?
		// Integer.parseInt(jsonObject.getString("allpricechange")) : 0;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 0;
		int priceprec = htp.getPriceprec();
		Warepeim dal = new Warepeim();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());

		WriteResult(response, dal.Append(priceprec, statetag), dal.getErrmess());
	}

	// 更新指定商品配货单明细id信息
	protected void UpdateWarepeimByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int allpricechange = jsonObject.has("allpricechange") ? Integer.parseInt(jsonObject.getString("allpricechange")) : 0;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 0;

		int priceprec = htp.getPriceprec();
		Warepeim dal = new Warepeim();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());

		WriteResult(response, dal.Update(priceprec, allpricechange, statetag), dal.getErrmess());
	}

	// 获取指定商品配货单明细id信息
	protected void GetWarepeimByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		Float id = jsonObject.has("id") ? Float.parseFloat(jsonObject.getString("id")) : 0;
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String strwhere = " a.ID=" + id + " and a.NOTENO='" + noteno + "' and a.ACCID=" + htp.getMaccid();
		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "a.ID,a.NOTENO,a.ACCID,a.WAREID,a.COLORID,a.SIZEID,a.AMOUNT,a.PRICE0,a.DISCOUNT,a.PRICE,a.CURR,a.REMARK0,B.WARENO,B.WARENAME,B.UNITS,C.COLORNAME,D.SIZENAME";
		Warepeim dal = new Warepeim();
		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// 获取商品未配商品明细列表
	protected void GetWarepeimListwp(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long brandid = jsonObject.has("brandid") ? Long.parseLong(jsonObject.getString("brandid")) : -1;
		long typeid = jsonObject.has("typeid") ? Long.parseLong(jsonObject.getString("typeid")) : -1;
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno") : "";
		String warename = jsonObject.has("warename") ? jsonObject.getString("warename") : "";
		String seasonname = jsonObject.has("seasonname") ? jsonObject.getString("seasonname") : "";
		String prodyear = jsonObject.has("prodyear") ? jsonObject.getString("prodyear") : "";
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;
		int cxfs = jsonObject.has("cxfs") ? Integer.parseInt(jsonObject.getString("cxfs")) : 0;
		// cxfs:0=已定货，1=未定货,2=未发货,3=所有
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		String sort = " kcamt desc,wareid";
		long accid = htp.getMaccid();
		String qry = "  select wareid,wareno,warename,units,retailsale,imagename0,xsamount ";
		qry += "  ,f_getamountbywareid(to_char(sysdate,'yyyy-mm-dd')," + accid + ",wareid," + houseid + ") as kcamt  "; // 可用库存
		qry += "  ,f_getcustorderbal(to_char(sysdate,'yyyy-mm-dd')," + accid + ",wareid," + custid + ") as ordamt  "; // 未完订货
		qry += "  ,f_getwareoutsum(to_char(sysdate,'yyyy-mm-dd')," + accid + ",wareid," + custid + ") as outamt  "; // 累计发货
		qry += "  ,f_getphusebywareid(to_char(sysdate,'yyyy-mm-dd')," + accid + ",wareid," + houseid + ") as phamt  "; // 配货占用

		qry += "\n  from ( select a.wareid,a.wareno,a.warename,a.units,a.retailsale,a.imagename0,a.xsamount";
		qry += "\n  from warecode a where a.accid=" + accid + " and a.statetag=1 and a.noused=0 ";
		qry += "\n  and not exists (select 1 from warepeim b where b.accid=" + accid + " and b.NOTENO='" + noteno + "' and a.wareid=b.wareid)";
		if (findbox.length() > 0)
			qry += " and (a.warename like '%" + findbox + "%' or a.wareno like '%" + findbox.toUpperCase() + "%' or a.shortname like '%" + findbox.toUpperCase() + "%')";
		if (wareid > 0) {
			qry += " and a.wareid=" + wareid;
		} else {
			if (wareno.length() > 0)
				qry += " and a.wareno like '%" + wareno.toUpperCase() + "%'";
			if (warename.length() > 0)
				qry += " and (a.warename like '%" + warename + "%' or a.shortname like '%" + warename.toUpperCase() + "%')";
			if (seasonname.length() > 0)
				qry += " and a.seasonname like '%" + seasonname + "%'";
			if (prodyear.length() > 0)
				qry += " and a.prodyear = '" + prodyear + "'";
			if (typeid >= 0)
				if (typeid > 0 && typeid < 1000) {
					qry += "    and exists (select 1 from waretype t where t.typeid=a.typeid and t.p_typeid= " + typeid + ")";
				} else {
					qry += "    and a.typeid=" + typeid;
				}
			if (brandid >= 0)
				qry += "   and a.brandid=" + brandid;
		}
		qry += "\n  order by a.ssdate desc ) where rownum<100";
		qry += "\n  and f_getamountbywareid(to_char(sysdate,'yyyy-mm-dd')," + accid + ",wareid," + houseid + ") >0  "; // 可用库存大于0的商品
		// cxfs:0=已定货，1=未定货,2=未发货,3=所有
		if (cxfs == 0)
			qry += " and f_getcustorderbal(to_char(sysdate,'yyyy-mm-dd')," + accid + ",wareid," + custid + ")>0";
		else if (cxfs == 1)
			qry += " and f_getcustorderbal(to_char(sysdate,'yyyy-mm-dd')," + accid + ",wareid," + custid + ")<=0";
		else if (cxfs == 2)
			qry += " and f_getwareoutsum(to_char(sysdate,'yyyy-mm-dd')," + accid + ",wareid," + custid + ")<=0"; // 未发货

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Warepeim dal = new Warepeim();
		dal.setAccid(accid);
		dal.setNoteno(noteno);
		Table tb = new Table();

		tb = dal.GetTable1(qp, qry);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取配货明细汇总列表
	protected void GetWarepeimsumList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		// String findbox = jsonObject.has("findbox") ?
		// jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "";
		int sizenum = jsonObject.has("sizenum") ? Integer.parseInt(jsonObject.getString("sizenum")) : 0;
		int sortid = jsonObject.has("sortid") ? Integer.parseInt(jsonObject.getString("sortid")) : 0;
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;
		int priceprec = htp.getPriceprec();// Integer.parseInt(Func.subString(qxpublic,
											// 4, 1));

		String sort = "";
		if (sortid == 1)
			sort = " id " + order;
		else
			sort = "  wareno " + order + ",wareid,colorid,id ";// + order;
		QueryParam qp = new QueryParam(page, pagesize, sort);
		Warepeim dal = new Warepeim();
		dal.setAccid(htp.getMaccid());
		dal.setNoteno(noteno);
		// dal.setLastop(htp.getUsername());
		if (dal.List(qp, sizenum, priceprec) == 0)
			WriteResult(response, 0, dal.getErrmess());
		// else
		// Write(response, dal.getErrmess());
		else {
			String jsonstr = dal.getErrmess();
			// System.out.println(jsonstr);

			if (page < 0) {// 导出excel
				String retcs = DbHelperSQL.Json2Excel(jsonstr, jsonObject);
				WriteResult(response, Integer.parseInt(retcs.substring(0, 1)), retcs.substring(1));
				return;
			}

			Write(response, jsonstr);
		}

	}

	// 配货单转批发出库单
	protected void Warepei2Wareout(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String phnoteno = jsonObject.has("phnoteno") ? jsonObject.getString("phnoteno") : "";
		int tocash = jsonObject.has("tocash") ? Integer.parseInt(jsonObject.getString("tocash")) : 0;
		// tocash=1,转收银台
		Wareouth dal = new Wareouth();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setUserid(htp.getUserid());
		// dal.setNoteno(phnoteno.toUpperCase());
		if (dal.PeiToOut(phnoteno.toUpperCase(), tocash) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 更改商品配货记录状态
	protected void ChangeWarepeihByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		int opid = jsonObject.has("opid") ? Integer.parseInt(jsonObject.getString("opid")) : 0;
		// opid:0=返单，1=审核，2=取消审核，3=开始捡货，4=中止捡货，5=捡货完成，6=捡货完成返回
		// ,7=发货,8=传后台打印,9=返单(已出库的单据返回上)
		Warepeih dal = new Warepeih();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setUserid(htp.getUserid());
		dal.setNoteno(noteno);
		WriteResult(response, dal.Change(opid), dal.getErrmess());

	}

	// 新增商品配货单记录
	protected void AddWarepeihRec(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		int noxsman = jsonObject.has("noxsman") ? Integer.parseInt(jsonObject.getString("noxsman")) : 0;
		long epid = htp.getUserid();
		if (noxsman == 1) // 1=不自动默认销售人
			epid = 0;
		Warepeih dal = new Warepeih();
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		dal.setCustid(custid);
		dal.setHouseid(houseid);
		// WriteResultJson(response, dal.Append(epid), dal.getErrmess());

		if (dal.Append(epid) == 0)
			WriteResult(response, 0, dal.getErrmess());
		else
			WriteResultJson(response, 1, dal.getErrmess());
	}

	// 删除指定商品配货单记录id信息
	protected void DelWarepeihByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		Warepeih dal = new Warepeih();
		long accid = htp.getMaccid();
		String lastop = htp.getUsername();
		dal.setOperant(lastop);
		dal.setNoteno(noteno);
		dal.setAccid(accid);
		if (dal.Delete() == 0)
			WriteResult(response, 0, dal.getErrmess());
		else {
			pFunc.myWriteLog(accid, "商品配货", "【删除单据】" + noteno, lastop);

			WriteResult(response, 1, dal.getErrmess());
		}
	}

	// 更新指定商品配货单记录id信息
	protected void UpdateWarepeihByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		// String noteno = jsonObject.has("noteno") ?
		// jsonObject.getString("noteno") : "";
		Warepeih dal = new Warepeih();
		DbHelperSQL.JsonConvertObject(dal, jsonObject);// 读取json数据到表类
		dal.setAccid(htp.getMaccid());
		dal.setOperant(htp.getUsername());
		WriteResult(response, dal.Update(), dal.getErrmess());
	}

	// 获取指定商品配货记录id信息
	protected void GetWarepeihByID(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		int showbalcurr = jsonObject.has("showbalcurr") ? Integer.parseInt(jsonObject.getString("showbalcurr")) : 0;
		long accid = htp.getMaccid();
		if (htp.getHousezkbj() == 0)
			houseid = 0;
		String strwhere = " a.NOTENO='" + noteno + "' and a.ACCID=" + accid;

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.NOTEDATE,A.CUSTID,A.HOUSEID,A.DPTID,A.REMARK,A.HANDNO,A.OPERANT,A.CHECKMAN,A.STATETAG,A.LASTDATE"//
					+ ",B.CUSTNAME,C.HOUSENAME,D.DPTNAME,E.EPNAME AS SALEMANNAME";
		if (showbalcurr == 1)
			// fieldlist +=
			// ",f_getincomebal(to_char(sysdate,'yyyy-mm-dd'),a.accid,a.custid)
			// as balcurr";
			fieldlist += ",f_getincomebal2x(to_char(sysdate,'yyyy-mm-dd'),a.accid ,a.custid," + houseid + ",'" + htp.getCalcdate() + "') as balcurr";

		Warepeih dal = new Warepeih();

		Table tb = new Table();
		tb = dal.GetList(strwhere, fieldlist).getTable(1);
		Write(response, DbHelperSQL.DataTable2Json(tb));
	}

	// pc版批发出库载入配货记录列表专用 fs=3
	protected void GetWarepeihLoad(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long dptid = jsonObject.has("dptid") ? Long.parseLong(jsonObject.getString("dptid")) : 0;
		// int statetag = jsonObject.has("statetag") ?
		// Integer.parseInt(jsonObject.getString("statetag")) : 0;
		// int checktag = jsonObject.has("checktag") ?
		// Integer.parseInt(jsonObject.getString("checktag")) : 0;
		// checktag:0=未审，1=已审，2=所有
		// int phcytag = jsonObject.has("phcytag") ?
		// Integer.parseInt(jsonObject.getString("phcytag")) : 0;
		// phcytag:0=无差异，1=有差异，2=所有

		// int prttag = jsonObject.has("prttag") ?
		// Integer.parseInt(jsonObject.getString("prttag")) : 2;
		// prttag:0=未打印，1=已打印，2=所有
		// int fhtag = jsonObject.has("fhtag") ?
		// Integer.parseInt(jsonObject.getString("fhtag")) : 2;
		// fhtag:0=未发货，1=已发货，2=所有

		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark") : "";

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		// String warename = jsonObject.has("warename") ?
		// jsonObject.getString("warename") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno") : "";
		String custname = jsonObject.has("custname") ? jsonObject.getString("custname") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		// String currdate = htp.getNowdate();//
		// Func.DateToStr(pFunc.getServerdatetime(), "yyyy-MM-dd");
		// String mindate = jsonObject.has("mindate") ?
		// jsonObject.getString("mindate") : currdate;
		// String maxdate = jsonObject.has("maxdate") ?
		// jsonObject.getString("maxdate") : currdate;
		//
		// int maxday = 0;
		// try {
		// maxday = Integer.parseInt(Func.subString(htp.getRolepublic(), 4,
		// 3));
		// } catch (Exception e) {
		// maxday = 0;
		// }
		// // 校验开始查询日期
		// MinDateValid mdv = new MinDateValid(mindate, currdate,
		// htp.getAccdate(), maxday);
		// mindate = mdv.getMindate();
		// String warning = mdv.getErrmess();
		// if (mindate.compareTo(maxdate) > 0)
		// maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		String sort = " notedate desc,id ";// +order;
		// String lastop = htp.getUsername();
		String strwhere = " a.ACCID=" + htp.getMaccid();

		// strwhere += " and a.STATETAG=1";
		strwhere += " and a.STATETAG=1 and (a.xsnoteno='' or a.xsnoteno is null)";
		strwhere += " and not exists ( select 1 from wareouth a1 where a.accid=a1.accid and a.noteno=a1.ywnoteno and a1.statetag<>2 )";

		if (findbox.length() > 0)
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox + "%' or b.custname like '%" + findbox + "%' or b.shortname like '%"
					+ findbox.toUpperCase() + "%')";

		strwhere += " and a.NOTEDATE >= to_date('" + htp.getAccdate() + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		// strwhere += " and a.NOTEDATE <= to_date('" + maxdate + "
		// 23:59:59','yyyy-mm-dd hh24:mi:ss')";
		if (custid > 0)
			strwhere += " and a.CUSTID = " + custid;
		else if (custname.length() > 0)
			strwhere += " and (b.custname like '%" + custname + "%' or b.shortname like '%" + custname.toUpperCase() + "%' )";
		if (houseid > 0)
			strwhere += " and a.houseid = " + houseid;
		if (dptid > 0)
			strwhere += " and a.dptid = " + dptid;

		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";

		if (wareid != 0) // 如果转入epid,说明要判断职员仓库权限
		{
			strwhere += " and exists (select 1 from warepeim x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (wareno.length() > 0) {
			strwhere += " and exists (select 1 from warepeim x,warecode y where x.wareid=y.wareid and a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno + "%')";
		}

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.NOTEDATE,A.CUSTID,A.HOUSEID,A.DPTID,A.REMARK,A.HANDNO,A.OPERANT,A.CHECKMAN,A.STATETAG,A.LASTDATE,B.CUSTNAME,C.HOUSENAME,D.DPTNAME";
		// if (fs == 1)
		fieldlist += ",A.TOTALAMT-A.TOTALFACTAMT AS TOTALCYAMT";
		Warepeih dal = new Warepeih();

		QueryParam qp = new QueryParam(page, pagesize, sort);
		Table tb = new Table();

		// qp.setTotalString("\"warning\":\"" + warning + "\"");
		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 分页商品配货记录列表pc版商品配货单专用 fs=2
	protected void GetWarepeihListpc(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long dptid = jsonObject.has("dptid") ? Long.parseLong(jsonObject.getString("dptid")) : 0;
		int cxfs = jsonObject.has("cxfs") ? Integer.parseInt(jsonObject.getString("cxfs")) : 3;
		// cxfs:0=未提交，1=已提交，2=已出库，3=所有

		// int statetag = jsonObject.has("statetag") ?
		// Integer.parseInt(jsonObject.getString("statetag")) : 0;
		// int checktag = jsonObject.has("checktag") ?
		// Integer.parseInt(jsonObject.getString("checktag")) : 0;
		// checktag:0=未审，1=已审，2=所有
		// int phcytag = jsonObject.has("phcytag") ?
		// Integer.parseInt(jsonObject.getString("phcytag")) : 0;
		// phcytag:0=无差异，1=有差异，2=所有

		// int prttag = jsonObject.has("prttag") ?
		// Integer.parseInt(jsonObject.getString("prttag")) : 2;
		// prttag:0=未打印，1=已打印，2=所有
		// int fhtag = jsonObject.has("fhtag") ?
		// Integer.parseInt(jsonObject.getString("fhtag")) : 2;
		// fhtag:0=未发货，1=已发货，2=所有

		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark") : "";

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		// String warename = jsonObject.has("warename") ?
		// jsonObject.getString("warename") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno") : "";
		String custname = jsonObject.has("custname") ? jsonObject.getString("custname") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String order = jsonObject.has("order") ? jsonObject.getString("order") : "desc";
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant") : "";
		String sort = jsonObject.has("sort") ? jsonObject.getString("sort") : "notedate";
		sort += " " + order + ",id ";// +order;

		int maxday = htp.getMaxday();
		// try {
		// maxday = Integer.parseInt(Func.subString(htp.getRolepublic(), 4,
		// 3));
		// } catch (Exception e) {
		// maxday = 0;
		// }
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		String warning = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		// String sort = " notedate desc,id ";// +order;
		String lastop = htp.getUsername();
		String strwhere = " a.ACCID=" + htp.getMaccid();
		// statetag: 0=草稿,1=提交,2=审核,3=配货中，4=配货完，5=出库
		// cxfs:0=未提交，1=已提交，2=已出库，3=所有
		// if (cxfs == -1) cxfs = statetag;
		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";
		// cxfs:0=未提交，1=已提交，2=已出库，3=所有
		if (cxfs == 0)
			strwhere += " and a.STATETAG=0 and a.OPERANT='" + lastop + "'"; // 未提
		// 交
		else if (cxfs == 1) // 已提交未出库
		{
			// strwhere += " and a.STATETAG>=1 and exists (select 1 from
			// wareouth a1 where a.accid=a1.accid and a.noteno=a1.ywnoteno and
			// a1.statetag=0)"; // 已提交
			strwhere += " and a.STATETAG>=1 and a.STATETAG<=4"; // 已提交
		} else if (cxfs == 2) // 提交且已出库
		{
			// strwhere += " and a.STATETAG>=1 and exists (select 1 from
			// wareouth a1 where a.accid=a1.accid and a.noteno=a1.ywnoteno and
			// a1.statetag=1)"; // 已提交
			strwhere += " and a.STATETAG>=5";
		} else
			strwhere += " and (a.STATETAG>=1 or a.STATETAG=0 and a.OPERANT='" + lastop + "')"; // 所有

		if (findbox.length() > 0)
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox + "%' or b.custname like '%" + findbox + "%' or b.shortname like '%"
					+ findbox.toUpperCase() + "%')";

		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";
		if (custid > 0)
			strwhere += " and a.CUSTID = " + custid;
		else if (custname.length() > 0)
			strwhere += " and (b.custname like '%" + custname + "%' or b.shortname like '%" + custname.toUpperCase() + "%' )";
		if (houseid > 0)
			strwhere += " and a.houseid = " + houseid;
		if (dptid > 0)
			strwhere += " and a.dptid = " + dptid;

		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";

		if (wareid != 0) // 如果转入epid,说明要判断职员仓库权限
		{
			strwhere += " and exists (select 1 from warepeim x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (wareno.length() > 0) {
			strwhere += " and exists (select 1 from warepeim x,warecode y where x.wareid=y.wareid and a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno + "%')";
		}

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.NOTEDATE,A.CUSTID,A.HOUSEID,A.DPTID,A.REMARK,A.HANDNO,A.OPERANT,A.CHECKMAN,A.STATETAG,A.LASTDATE,B.CUSTNAME,C.HOUSENAME,D.DPTNAME";
		// if (fs == 1)
		fieldlist += ",A.TOTALAMT-A.TOTALFACTAMT AS TOTALCYAMT";
		if (!fieldlist.toUpperCase().contains("A.TOTALFACTAMT"))
			fieldlist += ",A.TOTALFACTAMT";
		Warepeih dal = new Warepeih();

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();

		qp.setTotalString("\"warning\":\"" + warning + "\"");
		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 分页商品配货记录列表--捡货 fs=1
	protected void GetWarepeihList1(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long dptid = jsonObject.has("dptid") ? Long.parseLong(jsonObject.getString("dptid")) : 0;
		int statetag = jsonObject.has("statetag") ? Integer.parseInt(jsonObject.getString("statetag")) : 0;
		int checktag = jsonObject.has("checktag") ? Integer.parseInt(jsonObject.getString("checktag")) : 0;
		// checktag:0=未审，1=已审，2=所有
		int phcytag = jsonObject.has("phcytag") ? Integer.parseInt(jsonObject.getString("phcytag")) : 0;
		// phcytag:0=无差异，1=有差异，2=所有

		int prttag = jsonObject.has("prttag") ? Integer.parseInt(jsonObject.getString("prttag")) : 2;
		// prttag:0=未打印，1=已打印，2=所有
		int fhtag = jsonObject.has("fhtag") ? Integer.parseInt(jsonObject.getString("fhtag")) : 2;
		// fhtag:0=未发货，1=已发货，2=所有

		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark") : "";

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		// String warename = jsonObject.has("warename") ?
		// jsonObject.getString("warename") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno") : "";
		String custname = jsonObject.has("custname") ? jsonObject.getString("custname") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant") : "";

		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		String warning = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		String sort = " notedate desc,id ";// +order;
		// String lastop = htp.getUsername();
		String strwhere = " a.ACCID=" + htp.getMaccid();
		// prttag:0=未打印，1=已打印，2=所有
		if (prttag == 0)
			strwhere += " and a.prtnum=0";
		else if (prttag == 1)
			strwhere += " and a.prtnum>0";
		if (fhtag == 0)
			strwhere += " and a.overbj=0";
		else if (fhtag == 1)
			strwhere += " and a.overbj>0";

		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";
		// statetag:0=未配，1=在配，2=已配,3=已出库
		if (statetag == 0) {
			if (checktag == 0)
				strwhere += " and a.statetag=1"; // 未审
			else if (checktag == 1)
				strwhere += " and a.statetag=2"; // 已审
			else
				strwhere += " and (a.STATETAG=1 or a.statetag=2)"; // 未提交
		} else {
			if (statetag == 1)
				strwhere += " and a.STATETAG=3"; // 已提交
			else if (statetag == 2)
				strwhere += " and a.STATETAG=4"; // 已配货
			else
				strwhere += " and a.STATETAG=5"; // 已出库
			// phcytag:0=无差异，1=有差异，2=所有
			if (phcytag == 0) {
				strwhere += "   and exists ( select 1 from warepeim a1 where a.accid=a1.accid and a.noteno=a1.noteno and a1.factamt=a1.amount )";
			}
			if (phcytag == 1) {
				strwhere += "   and not exists ( select 1 from warepeim a1 where a.accid=a1.accid and a.noteno=a1.noteno and a1.factamt=a1.amount )";
			}
		}

		if (findbox.length() > 0)
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox + "%' or b.custname like '%" + findbox + "%' or b.shortname like '%"
					+ findbox.toUpperCase() + "%')";

		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";
		if (custid > 0)
			strwhere += " and a.CUSTID = " + custid;
		else if (custname.length() > 0)
			strwhere += " and (b.custname like '%" + custname + "%' or b.shortname like '%" + custname.toUpperCase() + "%' )";
		if (houseid > 0)
			strwhere += " and a.houseid = " + houseid;
		if (dptid > 0)
			strwhere += " and a.dptid = " + dptid;

		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";

		if (wareid != 0) // 如果转入epid,说明要判断职员仓库权限
		{
			strwhere += " and exists (select 1 from warepeim x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (wareno.length() > 0) {
			strwhere += " and exists (select 1 from warepeim x,warecode y where x.wareid=y.wareid and a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno + "%')";
		}

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.NOTEDATE,A.CUSTID,A.HOUSEID,A.DPTID,A.REMARK,A.HANDNO,A.OPERANT,A.CHECKMAN,A.STATETAG,A.LASTDATE,B.CUSTNAME,C.HOUSENAME,D.DPTNAME";
		// if (fs == 1)
		fieldlist += ",A.TOTALFACTAMT-A.TOTALAMT AS TOTALCYAMT";
		Warepeih dal = new Warepeih();

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();

		qp.setTotalString("\"warning\":\"" + warning + "\"");
		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// 获取商品配货单记录列表 fs=0
	protected void GetWarepeihList(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		int page = jsonObject.has("page") ? Integer.parseInt(jsonObject.getString("page")) : 1;
		int pagesize = jsonObject.has("rows") ? Integer.parseInt(jsonObject.getString("rows")) : 10;
		if (pagesize > 50)
			pagesize = 10;
		long custid = jsonObject.has("custid") ? Long.parseLong(jsonObject.getString("custid")) : 0;
		long wareid = jsonObject.has("wareid") ? Long.parseLong(jsonObject.getString("wareid")) : 0;
		long houseid = jsonObject.has("houseid") ? Long.parseLong(jsonObject.getString("houseid")) : 0;
		long dptid = jsonObject.has("dptid") ? Long.parseLong(jsonObject.getString("dptid")) : 0;
		// int statetag = jsonObject.has("statetag") ?
		// Integer.parseInt(jsonObject.getString("statetag")) : 0;
		int cxfs = jsonObject.has("cxfs") ? Integer.parseInt(jsonObject.getString("cxfs")) : 3;
		// cxfs:0=未提交，1=已提交，2=已出库，3=所有

		// int checktag = jsonObject.has("checktag") ?
		// Integer.parseInt(jsonObject.getString("checktag")) : 0;
		// checktag:0=未审，1=已审，2=所有
		// int phcytag = jsonObject.has("phcytag") ?
		// Integer.parseInt(jsonObject.getString("phcytag")) : 0;
		// phcytag:0=无差异，1=有差异，2=所有
		String findbox = jsonObject.has("findbox") ? jsonObject.getString("findbox").trim().replace("'", "''") : "";
		String remark = jsonObject.has("remark") ? jsonObject.getString("remark") : "";

		String fieldlist = jsonObject.has("fieldlist") ? jsonObject.getString("fieldlist") : "*";
		String operant = jsonObject.has("operant") ? jsonObject.getString("operant") : "";
		// String warename = jsonObject.has("warename") ?
		// jsonObject.getString("warename") : "";
		String wareno = jsonObject.has("wareno") ? jsonObject.getString("wareno") : "";
		String custname = jsonObject.has("custname") ? jsonObject.getString("custname") : "";
		String handno = jsonObject.has("handno") ? jsonObject.getString("handno") : "";
		String noteno = jsonObject.has("noteno") ? jsonObject.getString("noteno") : "";
		String currdate = htp.getNowdate();// Func.DateToStr(pFunc.getServerdatetime(),
											// "yyyy-MM-dd");
		String mindate = jsonObject.has("mindate") ? jsonObject.getString("mindate") : currdate;
		String maxdate = jsonObject.has("maxdate") ? jsonObject.getString("maxdate") : currdate;
		int maxday = htp.getMaxday();
		// 校验开始查询日期
		MinDateValid mdv = new MinDateValid(mindate, currdate, htp.getAccdate(), maxday);
		mindate = mdv.getMindate();
		String warning = mdv.getErrmess();
		if (mindate.compareTo(maxdate) > 0)
			maxdate = mindate; // 如果结束查询日期小于开始查询日期，则结束查询日期=开始查询日期
		String sort = " notedate desc,id ";// +order;
		String lastop = htp.getUsername();
		String strwhere = " a.ACCID=" + htp.getMaccid();

		if (findbox.length() > 0)
			strwhere += " and (a.noteno like '%" + findbox.toUpperCase() + "%' or a.remark like '%" + findbox + "%' or a.operant like '%" + findbox + "%' or b.custname like '%" + findbox + "%' or b.shortname like '%"
					+ findbox.toUpperCase() + "%')";
		// statetag: 0=草稿,1=提交,2=审核,3=配货中，4=配货完，5=已转出库单
		// cxfs:0=未提交，1=已提交，2=已出库，3=所有
		// if (cxfs == -1) cxfs = statetag;
		if (cxfs == 0)
			strwhere += " and a.STATETAG=0 and a.OPERANT='" + lastop + "'"; // 未提
		// 交
		else if (cxfs == 1)
			strwhere += " and a.STATETAG>=1 and a.statetag<=4"; // 已提交
		else if (cxfs == 2)
			strwhere += " and a.STATETAG>=5"; // 已出库
		else
			strwhere += " and (a.STATETAG>=1 or a.STATETAG=0 and a.OPERANT='" + lastop + "')"; // 所有

		strwhere += " and a.NOTEDATE >= to_date('" + mindate + " 00:00:00','yyyy-mm-dd hh24:mi:ss')";
		strwhere += " and a.NOTEDATE <= to_date('" + maxdate + " 23:59:59','yyyy-mm-dd hh24:mi:ss')";
		if (custid > 0)
			strwhere += " and a.CUSTID = " + custid;
		else if (custname.length() > 0)
			strwhere += " and (b.custname like '%" + custname + "%' or b.shortname like '%" + custname.toUpperCase() + "%' )";
		if (houseid > 0)
			strwhere += " and a.houseid = " + houseid;
		if (dptid > 0)
			strwhere += " and a.dptid = " + dptid;
		if (operant.length() > 0)
			strwhere += " and a.operant like '%" + operant + "%'";

		if (handno.length() > 0)
			strwhere += " and a.HANDNO like '%" + handno + "%'";
		if (noteno.length() > 0)
			strwhere += " and a.NOTENO like '%" + noteno.toUpperCase() + "%'";
		if (remark.length() > 0)
			strwhere += " and a.remark like '%" + remark + "%'";

		if (wareid != 0) // 如果转入epid,说明要判断职员仓库权限
		{
			strwhere += " and exists (select 1 from warepeim x where a.accid=x.accid and a.noteno=x.noteno and x.wareid=" + wareid + ")";
		} else if (wareno.length() > 0) {
			strwhere += " and exists (select 1 from warepeim x,warecode y where x.wareid=y.wareid and a.accid=x.accid and a.noteno=x.noteno and y.wareno like '%" + wareno + "%')";
		}

		if (fieldlist.equals("*") || fieldlist.length() <= 0)
			fieldlist = "A.ID,A.NOTENO,A.ACCID,A.NOTEDATE,A.CUSTID,A.HOUSEID,A.DPTID,A.REMARK,A.HANDNO,A.OPERANT,A.CHECKMAN,A.STATETAG,A.LASTDATE,B.CUSTNAME,C.HOUSENAME,D.DPTNAME";
		// if (fs == 1)
		fieldlist += ",A.TOTALFACTAMT-A.TOTALAMT AS TOTALCYAMT";
		Warepeih dal = new Warepeih();

		QueryParam qp = new QueryParam(page, pagesize, sort);

		Table tb = new Table();

		qp.setTotalString("\"warning\":\"" + warning + "\"");
		tb = dal.GetTable(qp, strwhere, fieldlist);

		Write(response, DbHelperSQL.DataTable2Json(tb, qp.getTotalString()));
	}

	// ==============================================================
	//	获取外网ip
	protected void GetPublicIP(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		String jsonstr = "{\"result\":1,\"msg\":\"操作成功！\",\"ip\":\"" + htp.getIpaddress() + "\"}";

		Write(response, jsonstr);
	}

	// 获取当前用户最近登录的设备号
	protected void GetDeviceno(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {

		Table tb = new Table();
		String qry = "select DEVICENO from useronline where EPID=" + htp.getUserid();
		tb = DbHelperSQL.Query(qry).getTable(1);
		String jsonstr = "{\"result\":1,\"msg\":\"操作成功！\",\"DEVICENO\":\"\"}";
		if (tb.getRowCount() == 1) {
			jsonstr = "{\"result\":1,\"msg\":\"操作成功！\",\"DEVICENO\":\"" + tb.getRow(0).get("DEVICENO").toString() + "\"}";
		}
		Write(response, jsonstr);
	}

	protected void Test(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String opaction = jsonObject.has("opaction") ? jsonObject.getString("opaction") : "";
		String opvalue = jsonObject.has("opvalue") ? jsonObject.getString("opvalue") : "";
		Funcpackge dal = new Funcpackge();

		int i = dal.getTest(opaction, opvalue);

		WriteResult(response, i, dal.getErrmess());
	}

	// 指定推送消息
	protected void PushMess(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {
		JSONObject jsonObject = JSONObject.fromObject(htp.getDatajson());
		String alias = jsonObject.has("alias") ? jsonObject.getString("alias") : "";
		String tag = jsonObject.has("tag") ? jsonObject.getString("tag") : "";
		String mess = jsonObject.has("mess") ? jsonObject.getString("mess") : "";
		// {"flyang":"20150107","alias":"erp1792^","tag":"erptag0","mess":"testing"}
		// 给sun推送消息

		// String ss = "erp10453^erp10551^erp990^";
		// String tag = "erptag1489";
		// String strmess = "ERP okok B端向B端发送消息 b====>b okokok";
		if (JGPush.PushToErp(alias, tag, mess) == 0)
			WriteResult(response, 0, "发送失败!");
		else
			WriteResult(response, 1, "发送成功!");

	}

	/// <summary>
	/// 测试保存图片test.jpg
	/// </summary>
	protected void TestSaveimage(HttpServletResponse response, HttpInfo htp) throws ServletException, IOException {

		// String ss = ;
		// System.out.println("000000");
		String ss = Func.Base64UpFastDFS(Func.testImagetobase64());
		// System.out.println("111111" + ss);
		if (ss.substring(0, 1).equals("1")) {
			String fileName = ss.substring(1);
			WriteResult(response, 1, fileName);

			if (Func.fastDFSDelete(fileName) == 1)
				WriteResult(response, 1, "删除文件成功!");
			else
				WriteResult(response, 0, "删除文件失败!");

		} else
			WriteResult(response, 0, ss.substring(1));

	} // ==============================

	// ********************************************************
	protected void ServerDate(HttpServletResponse response) throws ServletException, IOException {
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		// System.out.println("ServerDate ");
		String jsonstr = "{\"result\":1,\"msg\":\"操作成功！\",\"SERVERDATE\":\"" + df.format(pFunc.getServerdatetime()) + "\"}";
		response.getWriter().write(jsonstr);
	}

	protected void ServerDateTime(HttpServletResponse response) throws ServletException, IOException {
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		// String jsonstr = "{\"SERVERDATETIME\":\"" + df.format(new Date()) +
		// "\"}";

		String jsonstr = "{\"result\":1,\"msg\":\"操作成功！\",\"SERVERDATETIME\":\"" + df.format(pFunc.getServerdatetime()) + "\"}";

		response.getWriter().write(jsonstr);
	}

	protected void WriteResult(HttpServletResponse response, int result, String mess) throws ServletException, IOException {
		String jsonstr = "{\"result\":" + result + ",\"msg\":\"" + mess + "\"}";
		response.getWriter().write(jsonstr);
	}

	protected void WriteResultJson(HttpServletResponse response, int result, String mess) throws ServletException, IOException {
		String jsonstr = "{\"result\":" + result + "," + mess + "}";
		response.getWriter().write(jsonstr);
	}

	protected void Write(HttpServletResponse response, String outstr) throws ServletException, IOException {
		response.getWriter().write(outstr);
		// return;
	}

}
